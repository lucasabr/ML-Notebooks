node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_7"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_6"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "\367p\355z<\010\000@\252y\203\355\301}\313\277\325\327\232\262F\224\331\277Ue\207\220\371~\337\277\325\327\232\262F\224\331\277.\220\227\264E\260\006@UJ\256\324\223\251\323\277\304\027v\327\320/\365\277\252y\203\355\301}\313\277~\033\212\256\263\227\236\277\317wi\317r\240\373?\242hK\177\365b\n@r\236Gk\264\300\343?\271\315\034\204\342\224\353\277\337\274Tc\270P\277\277Ue\207\220\371~\337\277\247\r\370\250l0\367?\350\306\001:\023;\364?\271\315\034\204\342\224\353\277e\224\311<P\301\325?\201\271 \'\032\226\357?\304\027v\327\320/\365\277\201\271 \'\032\226\357?\234\255\004\261\312\277\360\277\004\321\177hw:\362\277H\352|\361\277\265\365?\325\327\232\262F\224\331\277Ue\207\220\371~\337\277UJ\256\324\223\251\323\277/\233\344\206\037\033\375?Ue\207\220\371~\337\277\252y\203\355\301}\313\277[\224h2\351\202\001@\004\321\177hw:\362\277j\37197\326\264\342\2779@0\246/\252\345\277gT\356\027\306%\372?\371\206&\025\211\237\350\277Ue\207\220\371~\337\277Ue\207\220\371~\337\277~\033\212\256\263\227\236\277y\024\023\363;\212\356\277\200\243\206\202f\300\362?j\37197\326\264\342\277\004\321\177hw:\362\277y\024\023\363;\212\356\277\301r*\270\300\240\354?\271\315\034\204\342\224\353\277\301r*\270\300\240\354?\325\327\232\262F\224\331\277\262WQ\374Z\313\340?y\024\023\363;\212\356\277\271\315\034\204\342\224\353\277\337\274Tc\270P\277\2779@0\246/\252\345\277\262WQ\374Z\313\340?r\236Gk\264\300\343?\004\321\177hw:\362\277\247\r\370\250l0\367?\247\002\253\326\222\305\000@\217\276_>\314\225\376?\271\315\034\204\342\224\353\277\004\321\177hw:\362\277\234\255\004\261\312\277\360\277\350\306\001:\023;\364?\220f\362GA\304\342?\217\276_>\314\225\376?\262WQ\374Z\313\340? \257\017\214\336\004\260?j\37197\326\264\342\277j\37197\326\264\342\277\001,4Ig\253\351? \257\017\214\336\004\260?\271\315\034\204\342\224\353\277\337\274Tc\270P\277\277UJ\256\324\223\251\323\277\325\327\232\262F\224\331\277 \257\017\214\336\004\260?\234\255\004\261\312\277\360\277\273\267\343\351\225\375\002@\371\206&\025\211\237\350\277gT\356\027\306%\372?\262WQ\374Z\313\340?r\236Gk\264\300\343?\001,4Ig\253\351?\345!\266\032\003\254\333?d\364\372\037$\265\363\277\004\321\177hw:\362\277\234\255\004\261\312\277\360\277\217\276_>\314\225\376?\345!\266\032\003\254\333? \257\017\214\336\004\260?\201\271 \'\032\226\357?/\233\344\206\037\033\375?2\345=\332\r\266\346?\345!\266\032\003\254\333?\220\362\340\001\325\327\303?\217\276_>\314\225\376?\217\r\272\275:\255\317?\217\276_>\314\225\376?2\345=\332\r\266\346? \257\017\214\336\004\260?\345!\266\032\003\254\333?\262WQ\374Z\313\340?gT\356\027\306%\372?\304\027v\327\320/\365\277\200\243\206\202f\300\362?9@0\246/\252\345\2772\345=\332\r\266\346?\337\274Tc\270P\277\277Ue\207\220\371~\337\277\001,4Ig\253\351?\234\255\004\261\312\277\360\277\004\321\177hw:\362\277y\024\023\363;\212\356\277y\024\023\363;\212\356\277j\37197\326\264\342\277 \200\013\313\271E\361?~\033\212\256\263\227\236\277\304\027v\327\320/\365\277~\033\212\256\263\227\236\277\252y\203\355\301}\313\277y\024\023\363;\212\356\277UJ\256\324\223\251\323\277j\37197\326\264\342\277y\024\023\363;\212\356\277\234\255\004\261\312\277\360\277e\224\311<P\301\325?\304\027v\327\320/\365\277Ue\207\220\371~\337\277\325\327\232\262F\224\331\277j\37197\326\264\342\277kI\241E\354\272\003@\337\274Tc\270P\277\277\301r*\270\300\240\354?2\345=\332\r\266\346?e\224\311<P\301\325?y\024\023\363;\212\356\277\252y\203\355\301}\313\277\0071s`\031\253\370?\304\027v\327\320/\365\277y\024\023\363;\212\356\277\201\271 \'\032\226\357?\004\321\177hw:\362\277UJ\256\324\223\251\323\2779@0\246/\252\345\277j\37197\326\264\342\2779@0\246/\252\345\277\371\206&\025\211\237\350\277\247\r\370\250l0\367?Ue\207\220\371~\337\277\247\r\370\250l0\367?j\37197\326\264\342\277j\37197\326\264\342\277e\224\311<P\301\325?e\224\311<P\301\325? \257\017\214\336\004\260?2\345=\332\r\266\346?\217\276_>\314\225\376?\217\276_>\314\225\376?\371\206&\025\211\237\350\277\371\206&\025\211\237\350\277y\024\023\363;\212\356\277j\37197\326\264\342\277\247\r\370\250l0\367?\234\255\004\261\312\277\360\277\217\r\272\275:\255\317?\201\271 \'\032\226\357?\004\321\177hw:\362\277\004\321\177hw:\362\277\262WQ\374Z\313\340?\247\r\370\250l0\367?y\024\023\363;\212\356\277\004\321\177hw:\362\277\353\201\347\375\326\237\371\277e\224\311<P\301\325?\217\r\272\275:\255\317?\217\276_>\314\225\376?Ue\207\220\371~\337\277\301r*\270\300\240\354?\220\362\340\001\325\327\303?y\024\023\363;\212\356\277Ue\207\220\371~\337\277\262WQ\374Z\313\340?\200\243\206\202f\300\362?UJ\256\324\223\251\323\2772\345=\332\r\266\346?e\224\311<P\301\325?\252y\203\355\301}\313\277\252y\203\355\301}\313\277\001,4Ig\253\351?Ue\207\220\371~\337\277\325\327\232\262F\224\331\277~\033\212\256\263\227\236\277\345!\266\032\003\254\333?\304\027v\327\320/\365\277\217\r\272\275:\255\317?\247\r\370\250l0\367? \257\017\214\336\004\260?\371\206&\025\211\237\350\277\247\r\370\250l0\367?\337\274Tc\270P\277\277y\024\023\363;\212\356\277\367p\355z<\010\000@2\345=\332\r\266\346?y\024\023\363;\212\356\277UJ\256\324\223\251\323\277[\224h2\351\202\001@\325\327\232\262F\224\331\277j\37197\326\264\342\277\247\002\253\326\222\305\000@\0071s`\031\253\370?\301r*\270\300\240\354?[\224h2\351\202\001@2\345=\332\r\266\346?j\37197\326\264\342\277\271\315\034\204\342\224\353\277H\352|\361\277\265\365?\271\315\034\204\342\224\353\277~\033\212\256\263\227\236\277\371\206&\025\211\237\350\277/\233\344\206\037\033\375?\336!U\020\234m\007@\004\321\177hw:\362\277~\033\212\256\263\227\236\277\325\327\232\262F\224\331\277\371\206&\025\211\237\350\277j\37197\326\264\342\277e\224\311<P\301\325?\271\315\034\204\342\224\353\2779@0\246/\252\345\277\325\327\232\262F\224\331\277\325\327\232\262F\224\331\2772\345=\332\r\266\346?y\024\023\363;\212\356\277\271\315\034\204\342\224\353\277\177\376\331X\357\362\005@2\345=\332\r\266\346?\350\306\001:\023;\364?\247\002\253\326\222\305\000@\001,4Ig\253\351?\004\321\177hw:\362\2772\345=\332\r\266\346?\271\315\034\204\342\224\353\277 \257\017\214\336\004\260?\301r*\270\300\240\354?\217\r\272\275:\255\317?gT\356\027\306%\372?\247\r\370\250l0\367?\271\315\034\204\342\224\353\277 \257\017\214\336\004\260?~\033\212\256\263\227\236\277\234\255\004\261\312\277\360\277\220\362\340\001\325\327\303?\271\315\034\204\342\224\353\2779@0\246/\252\345\277\004\321\177hw:\362\277\350\306\001:\023;\364?\226\356\3709\374\233\351\277\301r*\270\300\240\354?j\37197\326\264\342\277\001,4Ig\253\351?j\37197\326\264\342\277UJ\256\324\223\251\323\277\201\271 \'\032\226\357?r\236Gk\264\300\343?y\024\023\363;\212\356\277r\236Gk\264\300\343?\271\315\034\204\342\224\353\277j\37197\326\264\342\277\325\327\232\262F\224\331\277\262WQ\374Z\313\340?9@0\246/\252\345\277e\224\311<P\301\325?\001,4Ig\253\351?Ue\207\220\371~\337\277\262WQ\374Z\313\340?UJ\256\324\223\251\323\277\317wi\317r\240\373?y\024\023\363;\212\356\277e\224\311<P\301\325?9@0\246/\252\345\277[\312\350GD\332\273?9@0\246/\252\345\277\271\315\034\204\342\224\353\277y\024\023\363;\212\356\2779@0\246/\252\345\277y\024\023\363;\212\356\277y\024\023\363;\212\356\277\345!\266\032\003\254\333?y\024\023\363;\212\356\277\337\274Tc\270P\277\277j\37197\326\264\342\277j\37197\326\264\342\277y\024\023\363;\212\356\277 \200\013\313\271E\361?UJ\256\324\223\251\323\277\271\315\034\204\342\224\353\277j\37197\326\264\342\277\004\321\177hw:\362\2772\345=\332\r\266\346?\234\255\004\261\312\277\360\277j\37197\326\264\342\277\262WQ\374Z\313\340?\271\315\034\204\342\224\353\277j\37197\326\264\342\277\325\327\232\262F\224\331\277j\37197\326\264\342\277e\224\311<P\301\325?\217\276_>\314\225\376?\345!\266\032\003\254\333?\252y\203\355\301}\313\277Ue\207\220\371~\337\2779@0\246/\252\345\277\234\255\004\261\312\277\360\277\271\315\034\204\342\224\353\277j\37197\326\264\342\277j\37197\326\264\342\277H\352|\361\277\265\365?e\224\311<P\301\325?\004\321\177hw:\362\277\350\306\001:\023;\364?\247\r\370\250l0\367?\262WQ\374Z\313\340?9@0\246/\252\345\277\371\206&\025\211\237\350\277\234\255\004\261\312\277\360\277H\352|\361\277\265\365?\201\271 \'\032\226\357?y\024\023\363;\212\356\277r\236Gk\264\300\343?\234\255\004\261\312\277\360\277 \257\017\214\336\004\260?\0071s`\031\253\370?Ue\207\220\371~\337\277gT\356\027\306%\372?gT\356\027\306%\372?\271\315\034\204\342\224\353\277y\024\023\363;\212\356\277\325\327\232\262F\224\331\2779@0\246/\252\345\277\337\274Tc\270P\277\277\234\255\004\261\312\277\360\277~\033\212\256\263\227\236\277\371\206&\025\211\237\350\277\325\327\232\262F\224\331\277\234\255\004\261\312\277\360\277\371\206&\025\211\237\350\277gT\356\027\306%\372?j\37197\326\264\342\277H\352|\361\277\265\365?UJ\256\324\223\251\323\277\200\243\206\202f\300\362?\345!\266\032\003\254\333? \200\013\313\271E\361?\247\r\370\250l0\367?UJ\256\324\223\251\323\277[\224h2\351\202\001@UJ\256\324\223\251\323\277[\224h2\351\202\001@\371\206&\025\211\237\350\277\217\276_>\314\225\376?Ue\207\220\371~\337\277\350\306\001:\023;\364?\345!\266\032\003\254\333?\337\274Tc\270P\277\277d\364\372\037$\265\363\2772\345=\332\r\266\346?\217\r\272\275:\255\317?\004\321\177hw:\362\277 \257\017\214\336\004\260?e\224\311<P\301\325?j\37197\326\264\342\277\234\255\004\261\312\277\360\277\271\315\034\204\342\224\353\277\337\274Tc\270P\277\277j\37197\326\264\342\277~\033\212\256\263\227\236\277y\024\023\363;\212\356\277\271\315\034\204\342\224\353\277y\024\023\363;\212\356\277\271\315\034\204\342\224\353\277\271\315\034\204\342\224\353\277\325\327\232\262F\224\331\277\325\327\232\262F\224\331\277r\236Gk\264\300\343?\325\327\232\262F\224\331\277UJ\256\324\223\251\323\277\271\315\034\204\342\224\353\277\304\027v\327\320/\365\277\252y\203\355\301}\313\277e\224\311<P\301\325?\262WQ\374Z\313\340? \257\017\214\336\004\260?9@0\246/\252\345\277\252y\203\355\301}\313\277\350\306\001:\023;\364?\217\r\272\275:\255\317?\271\315\034\204\342\224\353\277\0071s`\031\253\370?\217\r\272\275:\255\317?\234\255\004\261\312\277\360\277y\024\023\363;\212\356\277\220\362\340\001\325\327\303?\220\362\340\001\325\327\303?y\024\023\363;\212\356\277\004\321\177hw:\362\277\220\362\340\001\325\327\303? \200\013\313\271E\361?\004\321\177hw:\362\277H\352|\361\277\265\365?\271\315\034\204\342\224\353\277d\364\372\037$\265\363\277 \257\017\214\336\004\260?y\024\023\363;\212\356\277\252y\203\355\301}\313\277\271\315\034\204\342\224\353\277\353\201\347\375\326\237\371\277\336!U\020\234m\007@y\024\023\363;\212\356\277j\37197\326\264\342\277UJ\256\324\223\251\323\277y\024\023\363;\212\356\277\337\274Tc\270P\277\277\226M\323\315\366\313\322?\033\333^\241Bx\004@gT\356\027\306%\372?\001,4Ig\253\351?\001,4Ig\253\351? \200\013\313\271E\361?\271\315\034\204\342\224\353\277\0071s`\031\253\370?y\024\023\363;\212\356\277gT\356\027\306%\372?\371\206&\025\211\237\350\277\350\306\001:\023;\364?d\364\372\037$\265\363\277\336!U\020\234m\007@\301r*\270\300\240\354?\371\206&\025\211\237\350\277r\236Gk\264\300\343?\301r*\270\300\240\354?UJ\256\324\223\251\323\277\234\255\004\261\312\277\360\277\004\321\177hw:\362\277\004\321\177hw:\362\277\220\362\340\001\325\327\303?\317wi\317r\240\373?j\37197\326\264\342\277\325\327\232\262F\224\331\277\217\276_>\314\225\376?y\024\023\363;\212\356\277y\024\023\363;\212\356\277y\024\023\363;\212\356\277\345!\266\032\003\254\333?\234\255\004\261\312\277\360\277e\224\311<P\301\325?\345!\266\032\003\254\333?UJ\256\324\223\251\323\277\304\027v\327\320/\365\277\200\243\206\202f\300\362?\337\274Tc\270P\277\277y\024\023\363;\212\356\277 \200\013\313\271E\361?\350\306\001:\023;\364? \257\017\214\336\004\260?e\224\311<P\301\325?\242hK\177\365b\n@r\236Gk\264\300\343?\371\206&\025\211\237\350\277\350\306\001:\023;\364?\004\321\177hw:\362\277\345!\266\032\003\254\333?\262WQ\374Z\313\340? \200\013\313\271E\361?y\024\023\363;\212\356\277\234\255\004\261\312\277\360\277P?\302\014!}\361\277\271\315\034\204\342\224\353\277j\37197\326\264\342\277\325\327\232\262F\224\331\277\013&&\216?@\002@\271\315\034\204\342\224\353\277\345!\266\032\003\254\333?Ue\207\220\371~\337\277y\024\023\363;\212\356\277\013\354X$\335\017\376\277\271\315\034\204\342\224\353\277~\033\212\256\263\227\236\277\004\321\177hw:\362\277\217\r\272\275:\255\317?j\37197\326\264\342\277\252y\203\355\301}\313\277\004\321\177hw:\362\277\271\315\034\204\342\224\353\277\220\362\340\001\325\327\303?\004\321\177hw:\362\277\371\206&\025\211\237\350\277\234\255\004\261\312\277\360\277Ue\207\220\371~\337\277\013&&\216?@\002@\220\362\340\001\325\327\303?\345!\266\032\003\254\333?\234\255\004\261\312\277\360\277\325\327\232\262F\224\331\277y\024\023\363;\212\356\277\200\243\206\202f\300\362?~\033\212\256\263\227\236\277\364{:M\026s\366?\371\206&\025\211\237\350\277\200\243\206\202f\300\362?\004\321\177hw:\362\277\220\362\340\001\325\327\303?\234\255\004\261\312\277\360\277d\364\372\037$\265\363\277r\236Gk\264\300\343?/\233\344\206\037\033\375?j\37197\326\264\342\277\301r*\270\300\240\354?d\364\372\037$\265\363\277\252y\203\355\301}\313\277\325\327\232\262F\224\331\277\345!\266\032\003\254\333?\271\315\034\204\342\224\353\277\304\027v\327\320/\365\277d\364\372\037$\265\363\277\262WQ\374Z\313\340?\371\206&\025\211\237\350\277r\236Gk\264\300\343?9@0\246/\252\345\277j\37197\326\264\342\277j\37197\326\264\342\277\004\321\177hw:\362\277\234\255\004\261\312\277\360\277\252y\203\355\301}\313\277\234\255\004\261\312\277\360\277\247\r\370\250l0\367?UJ\256\324\223\251\323\277 \257\017\214\336\004\260?kI\241E\354\272\003@\325\327\232\262F\224\331\277\004\321\177hw:\362\277 \257\017\214\336\004\260?y\024\023\363;\212\356\277\220\362\340\001\325\327\303?9@0\246/\252\345\277\247\r\370\250l0\367?r\236Gk\264\300\343?2\345=\332\r\266\346?\271\315\034\204\342\224\353\277\013&&\216?@\002@j\37197\326\264\342\277\271\315\034\204\342\224\353\277r\236Gk\264\300\343?~\033\212\256\263\227\236\277Ue\207\220\371~\337\277H\352|\361\277\265\365?j\37197\326\264\342\2779@0\246/\252\345\277\345!\266\032\003\254\333?2\345=\332\r\266\346?d\364\372\037$\265\363\277\271\315\034\204\342\224\353\277\271\315\034\204\342\224\353\277\345!\266\032\003\254\333?\301r*\270\300\240\354?2\345=\332\r\266\346?\001,4Ig\253\351?\301r*\270\300\240\354?y\024\023\363;\212\356\277\001,4Ig\253\351?\0071s`\031\253\370?\013&&\216?@\002@\367p\355z<\010\000@y\024\023\363;\212\356\277\371\206&\025\211\237\350\277\271\315\034\204\342\224\353\277/\233\344\206\037\033\375?\243\036\221!\240\211\334\277\201\271 \'\032\226\357?j\37197\326\264\342\277\371\206&\025\211\237\350\277\350\306\001:\023;\364?\346\323\177G\177.\007@ \257\017\214\336\004\260?\345!\266\032\003\254\333?\371\206&\025\211\237\350\277y\024\023\363;\212\356\277\262WQ\374Z\313\340?\220\362\340\001\325\327\303?\271\315\034\204\342\224\353\277/\233\344\206\037\033\375?\371\206&\025\211\237\350\277\220\362\340\001\325\327\303? \257\017\214\336\004\260?y\024\023\363;\212\356\277H\352|\361\277\265\365?d\364\372\037$\265\363\277y\024\023\363;\212\356\277 \257\017\214\336\004\260?\350\306\001:\023;\364?y\024\023\363;\212\356\277UJ\256\324\223\251\323\277~\033\212\256\263\227\236\277\301r*\270\300\240\354?\004\321\177hw:\362\277y\024\023\363;\212\356\277\345!\266\032\003\254\333?\271\315\034\204\342\224\353\277\004\321\177hw:\362\277\271\315\034\204\342\224\353\277\271\315\034\204\342\224\353\277\345!\266\032\003\254\333?9@0\246/\252\345\277y\024\023\363;\212\356\2779@0\246/\252\345\277\304\027v\327\320/\365\277\004\321\177hw:\362\277[\224h2\351\202\001@\262WQ\374Z\313\340?Ue\207\220\371~\337\277\350\306\001:\023;\364?\252y\203\355\301}\313\277 \257\017\214\336\004\260?2\345=\332\r\266\346?\271\315\034\204\342\224\353\277d\364\372\037$\265\363\277r\236Gk\264\300\343?\336!U\020\234m\007@\337\274Tc\270P\277\277\004\321\177hw:\362\277y\024\023\363;\212\356\277\271\315\034\204\342\224\353\277\252y\203\355\301}\313\2779@0\246/\252\345\277\001,4Ig\253\351?y\024\023\363;\212\356\277 \257\017\214\336\004\260?\325\327\232\262F\224\331\277\217\r\272\275:\255\317?d\364\372\037$\265\363\277j\37197\326\264\342\277j\37197\326\264\342\277e\224\311<P\301\325? \257\017\214\336\004\260?\371\206&\025\211\237\350\277\201\271 \'\032\226\357?\004\321\177hw:\362\277\234\255\004\261\312\277\360\277\004\321\177hw:\362\277\200\243\206\202f\300\362?Ue\207\220\371~\337\277 \257\017\214\336\004\260?\004\321\177hw:\362\277e\224\311<P\301\325?\234\255\004\261\312\277\360\277\271\315\034\204\342\224\353\277Ue\207\220\371~\337\277j\37197\326\264\342\277y\024\023\363;\212\356\277\220\362\340\001\325\327\303?\345!\266\032\003\254\333?e\224\311<P\301\325?\350\306\001:\023;\364?\271\315\034\204\342\224\353\277\271\315\034\204\342\224\353\277e\224\311<P\301\325?\234\255\004\261\312\277\360\277 \257\017\214\336\004\260?Ue\207\220\371~\337\277\325\327\232\262F\224\331\277~\033\212\256\263\227\236\2779@0\246/\252\345\277\001,4Ig\253\351?\271\315\034\204\342\224\353\2772\345=\332\r\266\346?9@0\246/\252\345\277\325\327\232\262F\224\331\277\271\315\034\204\342\224\353\277\325\327\232\262F\224\331\277\177\376\331X\357\362\005@\317wi\317r\240\373?\234\255\004\261\312\277\360\277r\236Gk\264\300\343?j\37197\326\264\342\277\273\267\343\351\225\375\002@\262WQ\374Z\313\340?\200\243\206\202f\300\362?~\033\212\256\263\227\236\277j\37197\326\264\342\277\004\321\177hw:\362\277Ue\207\220\371~\337\277\201\271 \'\032\226\357?[\224h2\351\202\001@j\37197\326\264\342\277\262WQ\374Z\313\340?\337\274Tc\270P\277\277\201\271 \'\032\226\357?y\024\023\363;\212\356\277~\033\212\256\263\227\236\277\004\321\177hw:\362\277\252y\203\355\301}\313\277 \257\017\214\336\004\260?\325\327\232\262F\224\331\2779@0\246/\252\345\277\301r*\270\300\240\354?\252y\203\355\301}\313\277y\024\023\363;\212\356\277\325\327\232\262F\224\331\277\367p\355z<\010\000@y\024\023\363;\212\356\277\301r*\270\300\240\354?~\033\212\256\263\227\236\277UJ\256\324\223\251\323\277y\024\023\363;\212\356\277\271\315\034\204\342\224\353\277\200\243\206\202f\300\362?\301r*\270\300\240\354?\325\327\232\262F\224\331\2779@0\246/\252\345\277\201\271 \'\032\226\357?\247\002\253\326\222\305\000@\271\315\034\204\342\224\353\277\252y\203\355\301}\313\277\304\027v\327\320/\365\277\271\315\034\204\342\224\353\2772\345=\332\r\266\346? \200\013\313\271E\361? \257\017\214\336\004\260?\013\354X$\335\017\376\277\271\315\034\204\342\224\353\277UJ\256\324\223\251\323\277\317l\034\375\2305\005@\234\255\004\261\312\277\360\277\271\315\034\204\342\224\353\277UJ\256\324\223\251\323\277\217\r\272\275:\255\317?\273\267\343\351\225\375\002@\004\321\177hw:\362\277\345!\266\032\003\254\333?\271\315\034\204\342\224\353\277\325\327\232\262F\224\331\277\271\315\034\204\342\224\353\277\317wi\317r\240\373?\271\315\034\204\342\224\353\277j\37197\326\264\342\277r\236Gk\264\300\343?/\233\344\206\037\033\375?2\345=\332\r\266\346?\247\002\253\326\222\305\000@\004\321\177hw:\362\277e\224\311<P\301\325?\004\321\177hw:\362\277\252y\203\355\301}\313\277\201\271 \'\032\226\357?e\224\311<P\301\325?y\024\023\363;\212\356\277\201\271 \'\032\226\357?\325\327\232\262F\224\331\277\337\274Tc\270P\277\277~\033\212\256\263\227\236\277\252y\203\355\301}\313\277\271\315\034\204\342\224\353\277\325\327\232\262F\224\331\277Ue\207\220\371~\337\277y\024\023\363;\212\356\277\004\321\177hw:\362\277~\033\212\256\263\227\236\277~\033\212\256\263\227\236\277\252y\203\355\301}\313\277\252y\203\355\301}\313\277\271\315\034\204\342\224\353\277\337\274Tc\270P\277\277d\364\372\037$\265\363\277\262WQ\374Z\313\340?\271\315\034\204\342\224\353\277\217\r\272\275:\255\317?\371\206&\025\211\237\350\277 \257\017\214\336\004\260?\350\306\001:\023;\364?9@0\246/\252\345\2779@0\246/\252\345\277j\37197\326\264\342\277Ue\207\220\371~\337\277\252y\203\355\301}\313\277\253\310\335l0\225\374\277\201\271 \'\032\226\357?\317wi\317r\240\373?\252y\203\355\301}\313\277\301r*\270\300\240\354?Ue\207\220\371~\337\277H\352|\361\277\265\365?\004\321\177hw:\362\277\271\315\034\204\342\224\353\277 \257\017\214\336\004\260?\200\243\206\202f\300\362?\325\327\232\262F\224\331\277e\224\311<P\301\325? \257\017\214\336\004\260?e\224\311<P\301\325?\004\321\177hw:\362\277\242hK\177\365b\n@\350\306\001:\023;\364?\247\r\370\250l0\367?r\236Gk\264\300\343?j\37197\326\264\342\277\350\306\001:\023;\364?UJ\256\324\223\251\323\277UJ\256\324\223\251\323\277\004\321\177hw:\362\277\317wi\317r\240\373?\371\206&\025\211\237\350\277\371\206&\025\211\237\350\277\301r*\270\300\240\354?\262WQ\374Z\313\340?\234\255\004\261\312\277\360\277\262WQ\374Z\313\340?\217\r\272\275:\255\317?\371\206&\025\211\237\350\277\304\027v\327\320/\365\277\001,4Ig\253\351?\234\255\004\261\312\277\360\277\371\206&\025\211\237\350\277 \257\017\214\336\004\260?\271\315\034\204\342\224\353\277\271\315\034\204\342\224\353\277\201\271 \'\032\226\357?r\236Gk\264\300\343?\201\271 \'\032\226\357?\271\315\034\204\342\224\353\277\004\321\177hw:\362\277j\37197\326\264\342\277\247\r\370\250l0\367?y\024\023\363;\212\356\277y\024\023\363;\212\356\277\234\255\004\261\312\277\360\277\220\362\340\001\325\327\303?\371\206&\025\211\237\350\277\371\206&\025\211\237\350\277 \200\013\313\271E\361?\217\276_>\314\225\376?\252y\203\355\301}\313\277\262WQ\374Z\313\340?\004\321\177hw:\362\277\217\276_>\314\225\376? \257\017\214\336\004\260?[\312\350GD\332\273?\013&&\216?@\002@\234\255\004\261\312\277\360\277\201\271 \'\032\226\357?\271\315\034\204\342\224\353\277\350\306\001:\023;\364?\262WQ\374Z\313\340?\271\315\034\204\342\224\353\277\004\321\177hw:\362\277\262WQ\374Z\313\340?\234\255\004\261\312\277\360\277e\224\311<P\301\325?9@0\246/\252\345\277\325\327\232\262F\224\331\277\301r*\270\300\240\354?y\024\023\363;\212\356\277d\364\372\037$\265\363\277\350\306\001:\023;\364?\371\206&\025\211\237\350\277\220\362\340\001\325\327\303?H\352|\361\277\265\365? \257\017\214\336\004\260?\371\206&\025\211\237\350\277\337\274Tc\270P\277\277\262WQ\374Z\313\340?\337\274Tc\270P\277\277\013&&\216?@\002@\325\327\232\262F\224\331\2779@0\246/\252\345\277 \257\017\214\336\004\260?\271\315\034\204\342\224\353\277\273\267\343\351\225\375\002@e\224\311<P\301\325?UJ\256\324\223\251\323\277\271\315\034\204\342\224\353\277\262WQ\374Z\313\340?\234\255\004\261\312\277\360\277\201\271 \'\032\226\357?9@0\246/\252\345\277\271\315\034\204\342\224\353\277\301r*\270\300\240\354?\004\321\177hw:\362\2779@0\246/\252\345\277\271\315\034\204\342\224\353\277\234\255\004\261\312\277\360\277\317wi\317r\240\373?5\235\026\326=\274\361\277\325\327\232\262F\224\331\277\337\274Tc\270P\277\277/\233\344\206\037\033\375?\325\327\232\262F\224\331\277\371\206&\025\211\237\350\277\325\327\232\262F\224\331\277r\236Gk\264\300\343?[\224h2\351\202\001@y\024\023\363;\212\356\277\004\321\177hw:\362\2779@0\246/\252\345\277\337\274Tc\270P\277\277 \257\017\214\336\004\260?\304\027v\327\320/\365\277\371\206&\025\211\237\350\277\271\315\034\204\342\224\353\277~\033\212\256\263\227\236\277d\364\372\037$\265\363\277~\033\212\256\263\227\236\277\220\362\340\001\325\327\303?\345!\266\032\003\254\333?\001,4Ig\253\351?[\224h2\351\202\001@\325\327\232\262F\224\331\277\201\271 \'\032\226\357?j\37197\326\264\342\277\271\315\034\204\342\224\353\277\004\321\177hw:\362\277\001,4Ig\253\351?\013&&\216?@\002@UJ\256\324\223\251\323\277\371\206&\025\211\237\350\277e\224\311<P\301\325?\271\315\034\204\342\224\353\277\271\315\034\204\342\224\353\277\325\327\232\262F\224\331\277\325\327\232\262F\224\331\277y\024\023\363;\212\356\2779@0\246/\252\345\277\262WQ\374Z\313\340?2\345=\332\r\266\346?\371\206&\025\211\237\350\277\271\315\034\204\342\224\353\277\220\362\340\001\325\327\303? \257\017\214\336\004\260?\271\315\034\204\342\224\353\277H\352|\361\277\265\365?y\024\023\363;\212\356\277\234\255\004\261\312\277\360\277\271\315\034\204\342\224\353\2772\345=\332\r\266\346?Q\252\241\3145\032\352\277d\364\372\037$\265\363\277\271\315\034\204\342\224\353\277y\024\023\363;\212\356\277\217\r\272\275:\255\317?\350\306\001:\023;\364?\217\r\272\275:\255\317?\200\243\206\202f\300\362?y\024\023\363;\212\356\277\271\315\034\204\342\224\353\277\371\206&\025\211\237\350\277~\033\212\256\263\227\236\2772\345=\332\r\266\346?\217\r\272\275:\255\317?\345!\266\032\003\254\333?Ue\207\220\371~\337\277e\224\311<P\301\325?\247\r\370\250l0\367?\317wi\317r\240\373?\177\376\331X\357\362\005@9@0\246/\252\345\277\367p\355z<\010\000@\325\327\232\262F\224\331\277\271\315\034\204\342\224\353\277 \257\017\214\336\004\260?\325\327\232\262F\224\331\277\0071s`\031\253\370?\371\206&\025\211\237\350\277\371\206&\025\211\237\350\277\325\327\232\262F\224\331\2779@0\246/\252\345\277j\37197\326\264\342\277\262WQ\374Z\313\340?\234\255\004\261\312\277\360\277\201\271 \'\032\226\357?\201\271 \'\032\226\357?~\033\212\256\263\227\236\277\337\274Tc\270P\277\277[\224h2\351\202\001@\271\315\034\204\342\224\353\277/\233\344\206\037\033\375?\325\327\232\262F\224\331\277\271\315\034\204\342\224\353\277y\024\023\363;\212\356\277\262WQ\374Z\313\340?\252y\203\355\301}\313\277y\024\023\363;\212\356\277\004\321\177hw:\362\2772\345=\332\r\266\346?\304\027v\327\320/\365\277\020h\360k`\233\327\277\234\255\004\261\312\277\360\277 \257\017\214\336\004\260? \257\017\214\336\004\260?j\37197\326\264\342\277\345!\266\032\003\254\333?\217\r\272\275:\255\317?Ue\207\220\371~\337\277\325\327\232\262F\224\331\2772\345=\332\r\266\346?\271\315\034\204\342\224\353\277\262WQ\374Z\313\340?\371\206&\025\211\237\350\277\371\206&\025\211\237\350\277\004\321\177hw:\362\277Ue\207\220\371~\337\277j\37197\326\264\342\277e\224\311<P\301\325?\301r*\270\300\240\354?j\37197\326\264\342\277\001,4Ig\253\351?\271\315\034\204\342\224\353\277\252y\203\355\301}\313\277 \257\017\214\336\004\260?\234\255\004\261\312\277\360\277\220\362\340\001\325\327\303?\001,4Ig\253\351?e\224\311<P\301\325?\234\255\004\261\312\277\360\277\355\303z\\\177\205\020@\271\315\034\204\342\224\353\277\200\243\206\202f\300\362?\0071s`\031\253\370?gT\356\027\306%\372?9@0\246/\252\345\277\271\315\034\204\342\224\353\277\220\362\340\001\325\327\303?e\224\311<P\301\325?\304\027v\327\320/\365\277\247\002\253\326\222\305\000@2\345=\332\r\266\346?\262WQ\374Z\313\340?y\024\023\363;\212\356\277\004\321\177hw:\362\277y\024\023\363;\212\356\277y\024\023\363;\212\356\277\217\276_>\314\225\376?\252y\203\355\301}\313\277\271\315\034\204\342\224\353\277\301r*\270\300\240\354?\271\315\034\204\342\224\353\277\271\315\034\204\342\224\353\277UJ\256\324\223\251\323\277\0071s`\031\253\370?\325\327\232\262F\224\331\277\001,4Ig\253\351?Ue\207\220\371~\337\277\217\276_>\314\225\376?\001,4Ig\253\351?UJ\256\324\223\251\323\277UJ\256\324\223\251\323\277\337\274Tc\270P\277\277\242hK\177\365b\n@\242hK\177\365b\n@d\364\372\037$\265\363\277\200\243\206\202f\300\362?\345!\266\032\003\254\333? \257\017\214\336\004\260?y\024\023\363;\212\356\277\301r*\270\300\240\354?Q\252\241\3145\032\352\277UJ\256\324\223\251\323\2772\345=\332\r\266\346?UJ\256\324\223\251\323\2772\345=\332\r\266\346?9@0\246/\252\345\277d\364\372\037$\265\363\277\217\r\272\275:\255\317?/\233\344\206\037\033\375?\325\327\232\262F\224\331\277 \257\017\214\336\004\260?d\364\372\037$\265\363\277\013&&\216?@\002@\262WQ\374Z\313\340?~\033\212\256\263\227\236\277\217\r\272\275:\255\317?Ue\207\220\371~\337\277\004\321\177hw:\362\277 \257\017\214\336\004\260?j\37197\326\264\342\277\371\206&\025\211\237\350\277~\033\212\256\263\227\236\277\301r*\270\300\240\354?"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: ">\021\013\250\310\027\332\277~\346.&\327-\327?\304\210\000\364\"c\265\277\260wHj\321@\312\277t3\013e\221p\317\277\372=\277P\274I\340\277p\004\371\253\3703\326\277\216\006\370\261U\"\375?\200\346\312\273\315h\363?!ol\245\250\257\334\277/\300\273\246\270c\333\277\010^\354FD\003\352\277\t^$r1y\302\277\234\367\346\257(P\322\277\222\325\251g\261\330\314\277\260wHj\321@\312\277/\300\273\246\270c\333\277o\225\337$\307y\330?\326;\264^\2164\314?\304\210\000\364\"c\265\277\315\031\347l\361\250\307\277\022\200\361c\316\004\307?\027\257;HT\267\350\277\315\031\347l\361\250\307\277*V\341\016\214O\227\277\304\210\000\364\"c\265\277\211D\303\356\342\222\272\277\306\352\234\210k\366\345?|\2062\215\243l\341?\021\021\330\334\234J\271?\373\2074\307s.\222?\377\314=\371b3\260\277O\223\340\036j\213\361\277p\004\371\253\3703\326\277\343\214;\213\213^\343?\260wHj\321@\312\277\231\367\256\204;\332\351?\234\367\346\257(P\322\277\353\273\205o\021\021\305\277\353\273\205o\021\021\305\277\211D\303\356\342\222\272\277\036p\330\270\251S\366?M\304.i\016\325\301?\\\263\251\252\350\177\327\277MbZ\251\330\313\330\277\205:\220\244r%%@\022\036\035\244\230\373\335\277M\000\206\351\242\302\277\277S\302VB\014\215\356\277LU\025\342\334\032\264?\017\037\211\267\231\237\367?\304\210\000\364\"c\265\277/\300\273\246\270c\333\277\211D\303\356\342\222\272\277\353\273\205o\021\021\305\277\326\314\232\327\\z\276?\177UH\255\010\350\324\277MbZ\251\330\313\330\277!ol\245\250\257\334\277\253H6\2618\004\321\277M\000\206\351\242\302\277\277\234\367\346\257(P\322\277\2768\263\036a\204d\277\201Y\325T4\264\036@/\300\273\246\270c\333\277\177UH\255\010\350\324\277?B\303\322\336\271\004@\\\263\251\252\350\177\327\277*V\341\016\214O\227\277\326\314\232\327\\z\276?\315\031\347l\361\250\307\277\253\331\034*\007J\323?s\225\027P\264\357\340\277\206\273\037\331\271v\243?\260wHj\321@\312\277LU\025\342\334\032\264?\222\325\251g\261\330\314\277\377\314=\371b3\260\277m5\343\213\223\270\342?\325;\354\211{\252\344?p\004\371\253\3703\326\277\177UH\255\010\350\324\277/\300\273\246\270c\333\277p\004\371\253\3703\326\277\217\006\224GL]\351\277MbZ\251\330\313\330\277\253H6\2618\004\321\277\t^$r1y\302\277\022\200\361c\316\004\307?\306\352\234\210k\366\345?6Q\332Jt\037\346\277\206\273\037\331\271v\243?\253\331\034*\007J\323?>\021\013\250\310\027\332\277!\240V\205C4\351?\201\265DF<\251\352\277\222\325\251g\261\330\314\277\352\273MD$\233\354\277\271*l+\027\376\321?\260wHj\321@\312\277\314J\321L\214-\344\277*V\341\016\214O\227\277\004/\332\215\253\306\340?\334\233 N\234\341\342\277\326\314\232\327\\z\276?\203\026\027\323\342f\004@\260wHj\321@\312\277M\000\206\351\242\302\277\277\373\2074\307s.\222?\372=\277P\274I\340\277\353\273\205o\021\021\305\277s\225\027P\264\357\340\277\372=\277P\274I\340\277~\346.&\327-\327?\003\315\315\242\210G\337\277q\225{\272\275\264\364?\t^$r1y\302\277\236\"\366\374E\007\246\277\353\354oO\254\225\341\277\t^$r1y\302\277M\000\206\351\242\302\277\277\260wHj\321@\312\277j\324B\264q\335\372?\253H6\2618\004\321\277\216\006\370\261U\"\375?\353\273\205o\021\021\305\277\314J\321L\214-\344\277\275\371\345\265\205>\371?{m\204X\241\016\033@Kc\306\274\331o\362?LU\025\342\334\032\264?\216\246\227\256\030\234\323\277t3\013e\221p\317\277M\304.i\016\325\301?\216\246\227\256\030\234\323\277\253H6\2618\004\321\277\373\2074\307s.\222?\0203\245\3169\326\255?p\004\371\253\3703\326\277\371\014\235E4O\353\277t3\013e\221p\317\277m5\343\213\223\270\342?\236\"\366\374E\007\246\277\025\257\237\262]|\374?\2768\263\036a\204d\277p\004\371\253\3703\326\277\315\031\347l\361\250\307\277\304\210\000\364\"c\265\277\353\273\205o\021\021\305\277\314J\321L\214-\344\277\304\210\000\364\"c\265\277\027\257;HT\267\350\277\211D\303\356\342\222\272\277t3\013e\221p\317\277\326\314\232\327\\z\276?\021\021\330\334\234J\271?p\004\371\253\3703\326\277!ol\245\250\257\334\277\'\000\213Idk\347\277\353\273\205o\021\021\305\277\373\2074\307s.\222?\206\273\037\331\271v\243?\022\200\361c\316\004\307?\222\325\251g\261\330\314\277\315\031\347l\361\250\307\277\216\246\227\256\030\234\323\277M\000\206\351\242\302\277\2776Q\332Jt\037\346\277\253H6\2618\004\321\277\364\335Ra\256\234\311?*V\341\016\214O\227\277\234\367\346\257(P\322\277\222\325\251g\261\330\314\277\206\273\037\331\271v\243?E\242)L\204\323\344\277p\004\371\253\3703\326\277M\000\206\351\242\302\277\277M\000\206\351\242\302\277\277\2157~\'\347\341\325?\253H6\2618\004\321\277!ol\245\250\257\334\277t3\013e\221p\317\277\211D\303\356\342\222\272\277t3\013e\221p\317\277|U\254\027\022\255\370\277\315\031\347l\361\250\307\277\022\036\035\244\230\373\335\277t3\013e\221p\317\277LU\025\342\334\032\264?\372=\277P\274I\340\277\216\246\227\256\030\234\323\277\216\246\227\256\030\234\323\277LU\025\342\334\032\264?\222\325\251g\261\330\314\277/\300\273\246\270c\333\277t3\013e\221p\317\277\021\021\330\334\234J\271?LU\025\342\334\032\264?\t^$r1y\302\277\t^$r1y\302\277\177UH\255\010\350\324\277MbZ\251\330\313\330\277\216\246\227\256\030\234\323\277\216\246\227\256\030\234\323\277\177UH\255\010\350\324\277\315\031\347l\361\250\307\277M\304.i\016\325\301?\260wHj\321@\312\277\275\371\345\265\205>\371?\260wHj\321@\312\277\377\314=\371b3\260\277\003\315\315\242\210G\337\277\234\367\346\257(P\322\277>\021\013\250\310\027\332\277!ol\245\250\257\334\277\253H6\2618\004\321\277\353\273\205o\021\021\305\277\256\2502Jl\305\346\277o\225\337$\307y\330?M\304.i\016\325\301?\260wHj\321@\312\277\216\246\227\256\030\234\323\277\371\014\235E4O\353\277\234\367\346\257(P\322\277\373\2074\307s.\222?\2768\263\036a\204d\277\234\367\346\257(P\322\277\2768\263\036a\204d\277\222\325\251g\261\330\314\277\304\210\000\364\"c\265\277\304\210\000\364\"c\265\277\211D\303\356\342\222\272\277\271*l+\027\376\321?\260wHj\321@\312\277MbZ\251\330\313\330\277\234\210\315(\367\225\324?\004/\332\215\253\306\340?T\363xM\224\207\343\277!ol\245\250\257\334\277p\004\371\253\3703\326\277M\304.i\016\325\301?\022\036\035\244\230\373\335\277\t^$r1y\302\277\021\021\330\334\234J\271?\377\314=\371b3\260\277\217\006\224GL]\351\277\2768\263\036a\204d\277M\000\206\351\242\302\277\277\234\367\346\257(P\322\277\2768\263\036a\204d\277s\225\027P\264\357\340\277\377\314=\371b3\260\277\007F\021\313\000X\014@T\363xM\224\207\343\277t3\013e\221p\317\277M\304.i\016\325\301?p\004\371\253\3703\326\277\353\354oO\254\225\341\277\326\314\232\327\\z\276?\\\263\251\252\350\177\327\277\353\273\205o\021\021\305\277\2157~\'\347\341\325?\260wHj\321@\312\277/\"\220f\356l\304?6Q\332Jt\037\346\277>\021\013\250\310\027\332\277t3\013e\221p\317\277\211D\303\356\342\222\272\277*V\341\016\214O\227\277LU\025\342\334\032\264?\022\036\035\244\230\373\335\277\353\273\205o\021\021\305\277\022\036\035\244\230\373\335\277\260wHj\321@\312\277\343\214;\213\213^\343?\304\210\000\364\"c\265\277\234\210\315(\367\225\324?\373\2074\307s.\222?s\225\027P\264\357\340\277\211D\303\356\342\222\272\277m5\343\213\223\270\342?\253H6\2618\004\321\277\022\036\035\244\230\373\335\277\003\315\315\242\210G\337\277\216\246\227\256\030\234\323\277\353\273\205o\021\021\305\277\206\273\037\331\271v\243?MbZ\251\330\313\330\277M\000\206\351\242\302\277\277\'\000\213Idk\347\277\234\367\346\257(P\322\277\357d\253\316,\307\010@\271*l+\027\376\321?dD\310N\244;\342\277\2768\263\036a\204d\277>\021\013\250\310\027\332\277\236\"\366\374E\007\246\277\373\2074\307s.\222?*V\341\016\214O\227\277\234\367\346\257(P\322\277p\004\371\253\3703\326\277\t^$r1y\302\277>\021\013\250\310\027\332\277\027\257;HT\267\350\277\0203\245\3169\326\255?T\363xM\224\207\343\277\271*l+\027\376\321?\222\325\251g\261\330\314\277\010^\354FD\003\352\277S\302VB\014\215\356\277\236\"\366\374E\007\246\277\304\210\000\364\"c\265\277\304\210\000\364\"c\265\277t3\013e\221p\317\277\315\031\347l\361\250\307\277\353\273\205o\021\021\305\277\260wHj\321@\312\277\004/\332\215\253\306\340?\'\000\213Idk\347\277M\304.i\016\325\301?\253H6\2618\004\321\277\314J\321L\214-\344\277)a]\326\n)\001@\t^$r1y\302\277M\000\206\351\242\302\277\277\\\263\251\252\350\177\327\277\022\200\361c\316\004\307?\253\331\034*\007J\323?Dq\007A\374\330\357\277p\004\371\253\3703\326\277\304\210\000\364\"c\265\277MbZ\251\330\313\330\277\\\263\251\252\350\177\327\277\206\273\037\331\271v\243?C\242\361 \227]\334?\372=\277P\274I\340\277\315\031\347l\361\250\307\277\353\273\205o\021\021\305\277\304\210\000\364\"c\265\277LU\025\342\334\032\264?\304\210\000\364\"c\265\277\216\246\227\256\030\234\323\277\206\273\037\331\271v\243?t3\013e\221p\317\277M\000\206\351\242\302\277\277\377\314=\371b3\260\277\2768\263\036a\204d\277LU\025\342\334\032\264?\022\036\035\244\230\373\335\277\377\314=\371b3\260\277/\300\273\246\270c\333\277\326\314\232\327\\z\276?\332j\376B\024\347\355\277\\\344\223\212\203\004\344?s\225\027P\264\357\340\277\021\021\330\334\234J\271?\236\"\366\374E\007\246\277\003\315\315\242\210G\337\277\315\031\347l\361\250\307\277\260wHj\321@\312\277\315\031\347l\361\250\307\277\\\263\251\252\350\177\327\277o\225\337$\307y\330?p\004\371\253\3703\326\277s\225\027P\264\357\340\277LU\025\342\334\032\264?\234\210\315(\367\225\324?\315\031\347l\361\250\307\277\234\210\315(\367\225\324?\222\325\251g\261\330\314\277>\021\013\250\310\027\332\277\236\"\366\374E\007\246\277\343\214;\213\213^\343?\306\352\234\210k\366\345?\216\246\227\256\030\234\323\277\353\273\205o\021\021\305\277\234\367\346\257(P\322\277\260wHj\321@\312\277\341\207<Z\366Z\031@\315\031\347l\361\250\307\277M\000\206\351\242\302\277\277o\225\337$\307y\330?\236\"\366\374E\007\246\277\373\2074\307s.\222?\\\263\251\252\350\177\327\277\206\273\037\331\271v\243?/\"\220f\356l\304?\236\"\366\374E\007\246\277\253H6\2618\004\321\277\364\335Ra\256\234\311?\211D\303\356\342\222\272\277dD\310N\244;\342\277\022\036\035\244\230\373\335\277\206\273\037\331\271v\243?\260wHj\321@\312\277p\004\371\253\3703\326\277E\242)L\204\323\344\277t3\013e\221p\317\277\206\273\037\331\271v\243?\010^\354FD\003\352\277*V\341\016\214O\227\277\216\246\227\256\030\234\323\277\\\263\251\252\350\177\327\277\353\273\205o\021\021\305\277\222\325\251g\261\330\314\277\343\214;\213\213^\343?\216\246\227\256\030\234\323\277\0203\245\3169\326\255?p\004\371\253\3703\326\277\022\200\361c\316\004\307?\271\231\025\\n\314\316?\326\314\232\327\\z\276?\\\263\251\252\350\177\327\277\t^$r1y\302\277\211D\303\356\342\222\272\277/\"\220f\356l\304?p\004\371\253\3703\326\277\304\210\000\364\"c\265\277\010^\354FD\003\352\277\\\263\251\252\350\177\327\277\377\314=\371b3\260\277\353\273\205o\021\021\305\277t3\013e\221p\317\277E\242)L\204\323\344\277\003\315\315\242\210G\337\277{U\020\202\033r\354?\371\014\235E4O\353\277E\242)L\204\323\344\277p\004\371\253\3703\326\277\373\2074\307s.\222?\216\246\227\256\030\234\323\277!ol\245\250\257\334\277M\000\206\351\242\302\277\277T\363xM\224\207\343\277\\\263\251\252\350\177\327\277\267\231M\207[B\347?M\304.i\016\325\301?\352\273MD$\233\354\277\353\273\205o\021\021\305\277\211D\303\356\342\222\272\277\216\246\227\256\030\234\323\277rd\365D,\365\353\277\334\233 N\234\341\342\277M\000\206\351\242\302\277\277\177UH\255\010\350\324\277\377\314=\371b3\260\277M\000\206\351\242\302\277\277MbZ\251\330\313\330\277>B\365\207c\234\346?\253H6\2618\004\321\277\177UH\255\010\350\324\277\t^$r1y\302\277/\"\220f\356l\304?\375\277\205$\322/%@\'\000\213Idk\347\277\222\325\251g\261\330\314\277>\021\013\250\310\027\332\277\021\021\330\334\234J\271?t3\013e\221p\317\277\177UH\255\010\350\324\277>\021\013\250\310\027\332\277\254\220W\316(\032\t@\\\263\251\252\350\177\327\277\021\021\330\334\234J\271?\234\210\315(\367\225\324?\373\2074\307s.\222?\260wHj\321@\312\277\022\036\035\244\230\373\335\277>\021\013\250\310\027\332\277\0203\245\3169\326\255?!ol\245\250\257\334\277\211D\303\356\342\222\272\277\365\335\212\214\233\022\342?*V\341\016\214O\227\277\222\325\251g\261\330\314\277t3\013e\221p\317\277\271\231\025\\n\314\316?\234\367\346\257(P\322\277\260wHj\321@\312\277\177\235i\312\370\375\014@\260wHj\321@\312\277\332j\376B\024\347\355\277rd\365D,\365\353\277\t^$r1y\302\277M\304.i\016\325\301?\234\367\346\257(P\322\277^\344a\325\376!\002@\t^$r1y\302\277\206\273\037\331\271v\243?\211D\303\356\342\222\272\277t3\013e\221p\317\277\315\031\347l\361\250\307\277\177UH\255\010\350\324\277\373\2074\307s.\222?\315\031\347l\361\250\307\277s\225\027P\264\357\340\277\2157~\'\347\341\325?\326\314\232\327\\z\276?\231\367|\317\266\367\007@/\300\273\246\270c\333\277\275\371\201K|y\345\277/\300\273\246\270c\333\277\353\354oO\254\225\341\277\\\263\251\252\350\177\327\277\253\331\034*\007J\323?M\000\206\351\242\302\277\2774Q\242\037\207\251\335?\253H6\2618\004\321\277\027\257;HT\267\350\277\315\031\347l\361\250\307\277\353\273\205o\021\021\305\277M\000\206\351\242\302\277\277\2157~\'\347\341\325?\236\"\366\374E\007\246\277\177UH\255\010\350\324\277p\004\371\253\3703\326\277\234\367\346\257(P\322\277\234\367\346\257(P\322\277\364\335Ra\256\234\311?\362 \027Yh}\032@\234\367\346\257(P\322\277p\004\371\253\3703\326\277\326\n\312~\363\257\357?\216\246\227\256\030\234\323\277\355\034 \321\312X\006@\353\273\205o\021\021\305\277\222\325\251g\261\330\314\277dD\310N\244;\342\277*V\341\016\214O\227\277\253H6\2618\004\321\277/\"\220f\356l\304?\353\273\205o\021\021\305\277\253H6\2618\004\321\277\315\031\347l\361\250\307\277\234\367\346\257(P\322\277t3\013e\221p\317\277p\004\371\253\3703\326\277\236\"\366\374E\007\246\2776Q\332Jt\037\346\2776Q\332Jt\037\346\277>\021\013\250\310\027\332\277\022\200\361c\316\004\307?r\225\342_{\303\023@*V\341\016\214O\227\277\377\314=\371b3\260\277\373\2074\307s.\222?\t^$r1y\302\277M\304.i\016\325\301?\271\231\025\\n\314\316?\353\273\205o\021\021\305\277\\\263\251\252\350\177\327\277\315\031\347l\361\250\307\277\253H6\2618\004\321\277\260wHj\321@\312\277M\223D\211sP\345?\234\367\346\257(P\322\277M\000\206\351\242\302\277\277\177UH\255\010\350\324\277\353\273\205o\021\021\305\277T\363xM\224\207\343\277\260wHj\321@\312\277\2768\263\036a\204d\277pdY\2575\272\377?\315\031\347l\361\250\307\277\003\315\315\242\210G\337\277\304\210\000\364\"c\265\277\304\210\000\364\"c\265\277\0203\245\3169\326\255?\353\354oO\254\225\341\277\222\325\251g\261\330\314\277s\225\027P\264\357\340\277\315{\273,\'\262\320?rd\365D,\365\353\277!ol\245\250\257\334\277Dq\007A\374\330\357\277\315\031\347l\361\250\307\277\021\021\330\334\234J\271?E\242)L\204\323\344\277\260wHj\321@\312\277\211D\303\356\342\222\272\277\315\031\347l\361\250\307\277\004/\332\215\253\306\340?\373\2074\307s.\222?\010^\354FD\003\352\277\234\367\346\257(P\322\277\353\273\205o\021\021\305\277t3\013e\221p\317\277\373\2074\307s.\222?\353\273\205o\021\021\305\277t3\013e\221p\317\277\2157~\'\347\341\325?Dq\007A\374\330\357\277\250H\376\205K\216\350?6Q\332Jt\037\346\277dD\310N\244;\342\277\377\314=\371b3\260\277>B\365\207c\234\346?\024\013AY\352S\032@\261\t\005\327\022\203\000@\236\"\366\374E\007\246\277dD\310N\244;\342\277\2768\263\036a\204d\277\222\325\251g\261\330\314\277\2768\263\036a\204d\277\t^$r1y\302\277MbZ\251\330\313\330\277\211D\303\356\342\222\272\277\315\031\347l\361\250\307\277\211D\303\356\342\222\272\277\022\200\361c\316\004\307?\353\273\205o\021\021\305\277\021\021\330\334\234J\271?\t^$r1y\302\277\0203\245\3169\326\255?\304\210\000\364\"c\265\277*V\341\016\214O\227\277\234\367\346\257(P\322\277\\\263\251\252\350\177\327\277*V\341\016\214O\227\277t3\013e\221p\317\277T\363xM\224\207\343\277R\363@\"\247\021\333?\315\031\347l\361\250\307\277\234\367\346\257(P\322\277\334\233 N\234\341\342\277\315\031\347l\361\250\307\277\004/\332\215\253\306\340?\372=\277P\274I\340\277\253H6\2618\004\321\277/\300\273\246\270c\333\277\004/\332\215\253\306\340?\353\273\205o\021\021\305\277M\000\206\351\242\302\277\277*V\341\016\214O\227\277\304\210\000\364\"c\265\277\353\354oO\254\225\341\277M\000\206\351\242\302\277\277p\004\371\253\3703\326\277\256\2502Jl\305\346\277M\000\206\351\242\302\277\277\364\335Ra\256\234\311?\260wHj\321@\312\277t3\013e\221p\317\277^\344/ z?\360\277\004/\332\215\253\306\340?\222\325\251g\261\330\314\277s\225\027P\264\357\340\277\222\325\251g\261\330\314\277\032\337\353\311rz\r@\003\026,Y\251h\032@\217\006\224GL]\351\277\236\"\366\374E\007\246\277M\000\206\351\242\302\277\277*V\341\016\214O\227\277\\\263\251\252\350\177\327\277\020\037\360\\W\256\026@/\"\220f\356l\304?\372=\277P\274I\340\277\353\273\205o\021\021\305\277/\300\273\246\270c\333\277p\004\371\253\3703\326\277\353\273\205o\021\021\305\277j\324B\264q\335\372?\253H6\2618\004\321\277LU\025\342\334\032\264?\253H6\2618\004\321\277C\242\361 \227]\334?\306\352\234\210k\366\345?\022\036\035\244\230\373\335\277\260wHj\321@\312\277\2768\263\036a\204d\277\211D\303\356\342\222\272\277\377\314=\371b3\260\277\235WG\263e\326\373?\377\314=\371b3\260\277s\225\027P\264\357\340\277\234\367\346\257(P\322\277\021\021\330\334\234J\271?|\2062\215\243l\341?/\"\220f\356l\304?\'\000\213Idk\347\277\234\367\346\257(P\322\277\177UH\255\010\350\324\277\314J\321L\214-\344\277\373\2074\307s.\222?E\242)L\204\323\344\277s\225\027P\264\357\340\277\271\231\025\\n\314\316?\253H6\2618\004\321\277MbZ\251\330\313\330\277\304\210\000\364\"c\265\277\353\273\205o\021\021\305\277o\225\337$\307y\330?\'\000\213Idk\347\277C\242\361 \227]\334?\\\263\251\252\350\177\327\277\004/\332\215\253\306\340?>\021\013\250\310\027\332\277\2648\024U\367u\036@T\363xM\224\207\343\277\\\263\251\252\350\177\327\277\253H6\2618\004\321\277\0203\245\3169\326\255?\211D\303\356\342\222\272\277/\361\245\206S\350\347?\271*l+\027\376\321?\334\233 N\234\341\342\277\177UH\255\010\350\324\277MbZ\251\330\313\330\277\260wHj\321@\312\277\222\325\251g\261\330\314\277\253H6\2618\004\321\277\003\315\315\242\210G\337\277o\225\337$\307y\330?\177UH\255\010\350\324\277%\000S\036w\365\336?T\363xM\224\207\343\277\216\246\227\256\030\234\323\277/\300\273\246\270c\333\277\304\210\000\364\"c\265\277\2768\263\036a\204d\277\'\000\213Idk\347\277*V\341\016\214O\227\277\211D\303\356\342\222\272\277\234\367\346\257(P\322\277\t^$r1y\302\277\275\371\201K|y\345\277\234\210\315(\367\225\324?\022\036\035\244\230\373\335\277\253H6\2618\004\321\277\222\325\251g\261\330\314\277\304\210\000\364\"c\265\277\022\036\035\244\230\373\335\277|\2062\215\243l\341?!ol\245\250\257\334\277\304\210\000\364\"c\265\277\315\031\347l\361\250\307\277\217\006\224GL]\351\277LU\025\342\334\032\264?p\004\371\253\3703\326\277\036p\330\270\251S\366?\222\325\251g\261\330\314\277M\000\206\351\242\302\277\277\334\233 N\234\341\342\277\245\000A\323d=\004@\304\210\000\364\"c\265\277T\363xM\224\207\343\277\177UH\255\010\350\324\277\271\231\025\\n\314\316?\217\006\224GL]\351\277\234\367\346\257(P\322\277\334\233 N\234\341\342\277t3\013e\221p\317\277t3\013e\221p\317\277\0203\245\3169\326\255?\353\273\205o\021\021\305\277\253H6\2618\004\321\277M\304.i\016\325\301?LU\025\342\334\032\264?\t^$r1y\302\277\253H6\2618\004\321\277\206\273\037\331\271v\243?\315\031\347l\361\250\307\277\315\031\347l\361\250\307\277MbZ\251\330\313\330\277\021\021\330\334\234J\271?M\000\206\351\242\302\277\277R\363@\"\247\021\333?\373\2074\307s.\222?\027\257;HT\267\350\277C\242\361 \227]\334?/\"\220f\356l\304?|\2062\215\243l\341?R\363@\"\247\021\333?\003\315\315\242\210G\337\277\353\273\205o\021\021\305\277T\363xM\224\207\343\277\022\200\361c\316\004\307?\334\233 N\234\341\342\277o\225\337$\307y\330?M\000\206\351\242\302\277\277\t^$r1y\302\277$\000\357\263m0\373?\234\367\346\257(P\322\277\315\031\347l\361\250\307\277\362|\352\264y7\372?MbZ\251\330\313\330\277\027\257;HT\267\350\277\306\352\234\210k\366\345?>\021\013\250\310\027\332\277\271\261\301]\341\336\025@\315\031\347l\361\250\307\277\326\314\232\327\\z\276?\353\273\205o\021\021\305\277LU\025\342\334\032\264?\372=\277P\274I\340\277\304\210\000\364\"c\265\277\275\371\201K|y\345\277\216\246\227\256\030\234\323\277p\004\371\253\3703\326\277\331\367%_2~\024@\027\257;HT\267\350\277\211D\303\356\342\222\272\277\353\354oO\254\225\341\277^\344/ z?\360\277LU\025\342\334\032\264?\253H6\2618\004\321\277t3\013e\221p\317\277t3\013e\221p\317\277\2768\263\036a\204d\277\177UH\255\010\350\324\277\\\263\251\252\350\177\327\277\271\231\025\\n\314\316?E\242)L\204\323\344\277dD\310N\244;\342\277\334\233 N\234\341\342\277MbZ\251\330\313\330\277/\300\273\246\270c\333\277>\021\013\250\310\027\332\277\236\"\366\374E\007\246\277>B\365\207c\234\346?4Q\242\037\207\251\335?/\"\220f\356l\304?\211D\303\356\342\222\272\277\004/\332\215\253\306\340?\260wHj\321@\312\277\177UH\255\010\350\324\277s\225\027P\264\357\340\277M\223D\211sP\345?\260wHj\321@\312\277\253H6\2618\004\321\277M\000\206\351\242\302\277\277\234\367\346\257(P\322\277\353\273\205o\021\021\305\277*V\341\016\214O\227\277\2768\263\036a\204d\277\236\"\366\374E\007\246\277\234\210\315(\367\225\324?\315{\273,\'\262\320?-\301\'\272\271\007\365?\253H6\2618\004\321\277{U\020\202\033r\354?p\004\371\253\3703\326\277LU\025\342\334\032\264?>\021\013\250\310\027\332\277\304\210\000\364\"c\265\277\027\257;HT\267\350\277>\021\013\250\310\027\332\277t3\013e\221p\317\277/\"\220f\356l\304?|\2062\215\243l\341?/\"\220f\356l\304?\021\021\330\334\234J\271?\211D\303\356\342\222\272\277\216\246\227\256\030\234\323\277/\300\273\246\270c\333\277`D\220#\267\305\331?\t^$r1y\302\277\353\273\205o\021\021\305\277\t^$r1y\302\277\315\031\347l\361\250\307\2774Q\242\037\207\251\335?T\363xM\224\207\343\277\377\314=\371b3\260\277\206\273\037\331\271v\243?p\004\371\253\3703\326\277\0203\245\3169\326\255?p\004\371\253\3703\326\277\253H6\2618\004\321\277/\300\273\246\270c\333\277\2768\263\036a\204d\277\0203\245\3169\326\255?\216\246\227\256\030\234\323\277\353\354oO\254\225\341\277\222\325\251g\261\330\314\277\260wHj\321@\312\277\236\"\366\374E\007\246\277!ol\245\250\257\334\277\222\325\251g\261\330\314\277>\021\013\250\310\027\332\277\227\307\227]_\010\026@\377\314=\371b3\260\277\2768\263\036a\204d\277!ol\245\250\257\334\277\201\265DF<\251\352\277\216\246\227\256\030\234\323\277\236\"\366\374E\007\246\277\260wHj\321@\312\277\353\273\205o\021\021\305\277\271\231\025\\n\314\316?*V\341\016\214O\227\277\275\371\201K|y\345\277\234\367\346\257(P\322\277MbZ\251\330\313\330\277\364\335Ra\256\234\311?Dq\007A\374\330\357\277\222\325\251g\261\330\314\277\216\246\227\256\030\234\323\277t3\013e\221p\317\277/\300\273\246\270c\333\277/\300\273\246\270c\333\277\315{\273,\'\262\320?\234\367\346\257(P\322\277\206\273\037\331\271v\243?\353\273\205o\021\021\305\277/\300\273\246\270c\333\277\234\367\346\257(P\322\277\206\273\037\331\271v\243?\035\314y_6+\024@\253H6\2618\004\321\277/\300\273\246\270c\333\277t3\013e\221p\317\277\234\367\346\257(P\322\277%\000S\036w\365\336?>\021\013\250\310\027\332\277/\300\273\246\270c\333\277\372=\277P\274I\340\277\253H6\2618\004\321\277\364\335Ra\256\234\311?M\000\206\351\242\302\277\277\001\3169\266\211\353\370?\372=\277P\274I\340\277!ol\245\250\257\334\277\234\210\315(\367\225\324?\326\314\232\327\\z\276?\253H6\2618\004\321\277\314J\321L\214-\344\277\253\331\034*\007J\323?s\225\027P\264\357\340\277\177UH\255\010\350\324\277\211D\303\356\342\222\272\277\326;\264^\2164\314?\353\273\205o\021\021\305\277\236\"\366\374E\007\246\277\316\356a[\2048\030@\273\341\246\3178\316\007@\234\210\315(\367\225\324?\353\273\205o\021\021\305\277M\304.i\016\325\301?\377\314=\371b3\260\277p\004\371\253\3703\326\277\326;\264^\2164\314?t\305\307\321\322\262\005@\003\315\315\242\210G\337\277LU\025\342\334\032\264?/\"\220f\356l\304?M\000\206\351\242\302\277\277\260wHj\321@\312\277\003\315\315\242\210G\337\277\003\315\315\242\210G\337\277\332j\376B\024\347\355\277\343\214;\213\213^\343?\\\263\251\252\350\177\327\277\260wHj\321@\312\277~\346.&\327-\327?/\300\273\246\270c\333\277\325;\354\211{\252\344?t3\013e\221p\317\277\352\273MD$\233\354\277\260wHj\321@\312\277M\304.i\016\325\301?\372=\277P\274I\340\277\364\335Ra\256\234\311?\236\"\366\374E\007\246\277\260wHj\321@\312\277/\300\273\246\270c\333\277^\263q\177\373\t\357?\260wHj\321@\312\277\222\325\251g\261\330\314\277M\304.i\016\325\301?\377\314=\371b3\260\277\304\210\000\364\"c\265\277\0203\245\3169\326\255?LU\025\342\334\032\264?\364\335Ra\256\234\311?\372=\277P\274I\340\277\377\314=\371b3\260\277t3\013e\221p\317\277\t^$r1y\302\277\334\233 N\234\341\342\277\373\2074\307s.\222?\222\325\251g\261\330\314\277\334\233 N\234\341\342\277\027\257;HT\267\350\277\372=\277P\274I\340\277\\\263\251\252\350\177\327\277\0203\245\3169\326\255?!ol\245\250\257\334\277\253H6\2618\004\321\277\271\231\025\\n\314\316?\260wHj\321@\312\277\362 \027Yh}\032@\271*l+\027\376\321?\353\273\205o\021\021\305\277\0203\245\3169\326\255?M\000\206\351\242\302\277\277\234\367\346\257(P\322\277LU\025\342\334\032\264?\\\263\251\252\350\177\327\277\315\031\347l\361\250\307\277\277)2\315\232<\n@t3\013e\221p\317\277\211D\303\356\342\222\272\277\177UH\255\010\350\324\277\253H6\2618\004\321\277\003\315\315\242\210G\337\277\373\2074\307s.\222?M\304.i\016\325\301?\2768\263\036a\204d\277\303\272\036\274\321\025\363?M\000\206\351\242\302\277\277\275\371\345\265\205>\371?~\346.&\327-\327?\326;\264^\2164\314?4Q\242\037\207\251\335?\203\026\027\323\342f\004@4Q\242\037\207\251\335?\216\246\227\256\030\234\323\277\222\325\251g\261\330\314\277s\225\027P\264\357\340\277\211D\303\356\342\222\272\277\326;\264^\2164\314?\216\246\227\256\030\234\323\277/\"\220f\356l\304?t3\013e\221p\317\277>\021\013\250\310\027\332\277\003\315\315\242\210G\337\2776Q\332Jt\037\346\277!ol\245\250\257\334\277\t^$r1y\302\277\326\314\232\327\\z\276?\t^$r1y\302\277\353\273\205o\021\021\305\277\\\263\251\252\350\177\327\277\234\210\315(\367\225\324?\304\210\000\364\"c\265\277\2768\263\036a\204d\277\256\250\226\264u\212\372?\326;\264^\2164\314?\304\210\000\364\"c\265\2776Q\332Jt\037\346\277\372=\277P\274I\340\277\304\210\000\364\"c\265\277!ol\245\250\257\334\277~\346.&\327-\327?\\\263\251\252\350\177\327\277\021\021\330\334\234J\271?\216\246\227\256\030\234\323\277!ol\245\250\257\334\277>\021\013\250\310\027\332\277!ol\245\250\257\334\277\022\036\035\244\230\373\335\277\275\371\201K|y\345\277dD\310N\244;\342\277!ol\245\250\257\334\277\\\263\251\252\350\177\327\277dD\310N\244;\342\277\010^\354FD\003\352\277\326\314\232\327\\z\276?\003\315\315\242\210G\337\277\353\273\205o\021\021\305\277\267\r\374^\260\247\024@\304\210\000\364\"c\265\277\022\200\361c\316\004\307?\206\273\037\331\271v\243?\271*l+\027\376\321?\t^$r1y\302\277MbZ\251\330\313\330\277\271\231\025\\n\314\316?\326\314\232\327\\z\276?%\000S\036w\365\336?\353\273\205o\021\021\305\277etx\320\302\376\006@*V\341\016\214O\227\277\2768\263\036a\204d\277\003\026,Y\251h\032@T\363xM\224\207\343\277\260wHj\321@\312\2776Q\332Jt\037\346\277\304\210\000\364\"c\265\277\304\210\000\364\"c\265\277\353\273\205o\021\021\305\277\206\273\037\331\271v\243?\211D\303\356\342\222\272\277\003\315\315\242\210G\337\277\2768\263\036a\204d\277T\363xM\224\207\343\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "N2r\253\227\346\344?\215{]\247\274|\357\277\\\367&\352 \326\363\277\027\220\251\222\347c\342\277s*\371\232d;\336\277\023NE\306\351&\260\277\203\222\326\367I,\305\277\037\376\306\004\242\331\355\277s*\371\232d;\336\277\203\222\326\367I,\305\277w\245b\330\034\026\355?\202\263\010\336\310J\366\277\213\210\251r\272\341\322?\3339r\313\304h\324\277\215{]\247\274|\357\277\206\r@5\002\007\344\277\315\024\213\214\245p\210\277X\372\306t\213\030\376?\322\205\003\035R\360\350\277!y0BZ\264\334?\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277\203\222\326\367I,\305\277s*\371\232d;\336\277\3339r\313\304h\324\277)-\237\360\314,\350?\2159\371\332\276?\275\277\0236r;\256\247\364\277\260\2000b\2076\354\277\341\016\023`\266\377\360?\202\263\010\336\310J\366\277\260\2000b\2076\354\277\0236r;\256\247\364\277\2664\237\020\372\256\327\277*\320\307\016).\360?6;E\366xa\361\277wH\213\366x\027\365?\037\376\306\004\242\331\355\277\374>E\206\217\"\321\277\023NE\306\351&\260\277\346\305!\231\223\272\366?\341\016\023`\266\377\360?\203\222\326\367I,\305\277\0236r;\256\247\364\277\336\264\333\010}C\343?\021\346\255q5\310\r@\272\257\010N\262\211\346?\300\t@\245\353E\364?\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277\225/\314U/\365\332\277\315\024\213\214\245p\210\277\364\212\326\327\034\252\345\277\235%\237\320\237\252\310?\0236r;\256\247\364\277\374>E\206\217\"\321\277\0236r;\256\247\364\277s*\371\232d;\336\277\231M^\261C\321\361?\225/\314U/\365\332\277j\203\326\267\357\'\326?\336\264\333\010}C\343?\023NE\306\351&\260\277\233\372\371\\`\257\000@\037\376\306\004\242\331\355\277\0236r;\256\247\364\277w\245b\330\034\026\355?\231M^\261C\321\361?)-\237\360\314,\350?\215{]\247\274|\357\277\010\313\364S^t\363?/\207\326G\006\351\365?j\203\326\267\357\'\326?\260\2000b\2076\354\277\203\222\326\367I,\305\277\231M^\261C\321\361?\202\263\010\336\310J\366\277/\207\326G\006\351\365?\203\222\326\367I,\305\277\214\323\027\234\351/\005@s*\371\232d;\336\277\341\016\023`\266\377\360?*\320\307\016).\360?\215{]\247\274|\357\277N2r\253\227\346\344?\272\257\010N\262\211\346?\355y\220G\0063\362\277!y0BZ\264\334?\341\016\023`\266\377\360?X\372\306t\213\030\376?Et\326w\225#\267?\215{]\247\274|\357\277\013\202\003\215;/\371?\010(\3145\002s\353?Et\326w\225#\267?\2664\237\020\372\256\327\277\203\222\326\367I,\305\277;\2100\202\264\270\313\277\202\263\010\336\310J\366\277\336\264\333\010}C\343?\312t\275\214;y\365\277\364\212\326\327\034\252\345\277\346\"\371z7\271\356?\231\2525\223\347\317\351?\346\"\371z7\271\356?\000t]\207\217\372\337?\312t\275\214;y\365\277\351|0\322pu\374?~\374\371\244\353\217\360\2776;E\366xa\361\277\023NE\306\351&\260\277Y\033\371Z\n7\317?\341\016\023`\266\377\360?\374>E\206\217\"\321\277\374>E\206\217\"\321\277z\377\231/V\322\372?\355y\220G\0063\362\277\235%\237\320\237\252\310?\244\270\333\230\223\004\363\277\2159\371\332\276?\275\277\250\022\023\360\314\300\340\277\2159\371\332\276?\275\277\231M^\261C\321\361?\3339r\313\304h\324\277\322\205\003\035R\360\350\277)-\237\360\314,\350?\000t]\207\217\372\337?\202\263\010\336\310J\366\277\010\313\364S^t\363?)-\237\360\314,\350?\203\222\326\367I,\305\277\023NE\306\351&\260\277j\203\326\267\357\'\326?\336\264\333\010}C\343?\236\004m\352 \214\367?C~\003\375$n\331?\241\273{#\376F\375?;\2100\202\264\270\313\277\241\273{#\376F\375?\000t]\207\217\372\337?\215{]\247\274|\357\277\346\305!\231\223\272\366?Et\326w\225#\267?s*\371\232d;\336\277Y\033\371Z\n7\317?\3339r\313\304h\324\277\225/\314U/\365\332\277B\003\232\277l\223\352\2776;E\366xa\361\277\000t]\207\217\372\337?\374>E\206\217\"\321\277N2r\253\227\346\344?\315\024\213\214\245p\210\277c\010mz7M\347\277o7Efb\240\341?\310w]\027\246\273\377?)-\237\360\314,\350?e\0276\250A\273\002@w\245b\330\034\026\355?\202\263\010\336\310J\366\277\231M^\261C\321\361?\\\367&\352 \326\363\277\322\205\003\035R\360\350\277\312t\275\214;y\365\277\302\300N\336\310\000\372?\202\263\010\336\310J\366\277\336\264\333\010}C\343?Y\033\371Z\n7\317?\000t]\207\217\372\337?\2664\237\020\372\256\327\277Et\326w\225#\267?wH\213\366x\027\365?\203\222\326\367I,\305\277\366\231\237\005\'\030\001@N2r\253\227\346\344?\346\305!\231\223\272\366?P\214\251\002\321\242\362?\231M^\261C\321\361?\203\222\326\367I,\305\277\346\"\371z7\271\356?\355y\220G\0063\362\277\260\2000b\2076\354\277\023NE\306\351&\260\277\213\210\251r\272\341\322?\300\021E\306\200\025\244?6;E\366xa\361\277!y0BZ\264\334?\312t\275\214;y\365\277\300\t@\245\353E\364?\203\222\326\367I,\305\277j\203\326\267\357\'\326?\206\r@5\002\007\344\277\244\270\333\230\223\004\363\277\250\022\023\360\314\300\340\277\202\263\010\336\310J\366\2772>\345\200\343\243\373?\231M^\261C\321\361?\013\202\003\215;/\371?\225/\314U/\365\332\277\202\263\010\336\310J\366\277w\245b\330\034\026\355?\374>E\206\217\"\321\277\322\205\003\035R\360\350\277w\245b\330\034\026\355?;\2100\202\264\270\313\277s*\371\232d;\336\277\\\367&\352 \326\363\277\312t\275\214;y\365\277\202\263\010\336\310J\366\277\235%\237\320\237\252\310?\231M^\261C\321\361?\213\210\251r\272\341\322?\340/EF5\036\302?\213\210\251r\272\341\322?\340/EF5\036\302?\236\004m\352 \214\367?\202\263\010\336\310J\366\277\260\2000b\2076\354\277\206\r@5\002\007\344\277\202\263\010\336\310J\366\277\374>E\206\217\"\321\277j\203\326\267\357\'\326?P\214\251\002\321\242\362?C~\003\375$n\331?\215{]\247\274|\357\277\231M^\261C\321\361?~\374\371\244\353\217\360\277\310w]\027\246\273\377?)-\237\360\314,\350?\346\305!\231\223\272\366?\202\263\010\336\310J\366\277\310w]\027\246\273\377?\202\263\010\336\310J\366\277\037\376\306\004\242\331\355\2776;E\366xa\361\277\225/\314U/\365\332\277\233\372\371\\`\257\000@N2r\253\227\346\344?j\203\326\267\357\'\326?\\\367&\352 \326\363\277\346\"\371z7\271\356?\202\263\010\336\310J\366\277\010(\3145\002s\353?B\003\232\277l\223\352\277*\320\307\016).\360?\244\270\333\230\223\004\363\277\213\210\251r\272\341\322?N2r\253\227\346\344?*\320\307\016).\360?;\2100\202\264\270\313\277\037\376\306\004\242\331\355\277\0236r;\256\247\364\277\000t]\207\217\372\337?o7Efb\240\341?\244\270\333\230\223\004\363\277;\2100\202\264\270\313\277\260\2000b\2076\354\277C~\003\375$n\331?\225/\314U/\365\332\277\202\263\010\336\310J\366\277\315\024\213\214\245p\210\277\374>E\206\217\"\321\277\0236r;\256\247\364\277\231M^\261C\321\361?\\\367&\352 \326\363\277\037\376\306\004\242\331\355\277\340/EF5\036\302?C~\003\375$n\331?j\203\326\267\357\'\326?\244\270\333\230\223\004\363\277\202\263\010\336\310J\366\277\300\t@\245\353E\364?\202\263\010\336\310J\366\277c\010mz7M\347\277\206\r@5\002\007\344\277\202\263\010\336\310J\366\277\010(\3145\002s\353?~\374\371\244\353\217\360\277\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277\037\376\306\004\242\331\355\277\260\2000b\2076\354\277\250\022\023\360\314\300\340\277\215{]\247\274|\357\277\346\"\371z7\271\356?\202\263\010\336\310J\366\277~\374\371\244\353\217\360\277\244\270\333\230\223\004\363\277\322\205\003\035R\360\350\277\023NE\306\351&\260\277\235%\237\320\237\252\310?\250\022\023\360\314\300\340\277\260\2000b\2076\354\277\312t\275\214;y\365\277\023NE\306\351&\260\277\322\205\003\035R\360\350\277\322\205\003\035R\360\350\277\260\2000b\2076\354\277\203\222\326\367I,\305\277\000t]\207\217\372\337?\231\2525\223\347\317\351?\202\263\010\336\310J\366\277\244\270\333\230\223\004\363\277j\203\326\267\357\'\326?\260\2000b\2076\354\277o7Efb\240\341?\203\222\326\367I,\305\277\312t\275\214;y\365\277\260\2000b\2076\354\277\336\264\333\010}C\343?\355y\220G\0063\362\277\340/EF5\036\302?B\003\232\277l\223\352\277\225/\314U/\365\332\277\355y\220G\0063\362\277C~\003\375$n\331?s*\371\232d;\336\277\364\212\326\327\034\252\345\277)-\237\360\314,\350?\301\266\333P\010$\003@\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277Et\326w\225#\267?\2159\371\332\276?\275\277\231\2525\223\347\317\351?SC\270;\256]\370?\023NE\306\351&\260\277\272\257\010N\262\211\346?\310w]\027\246\273\377?\202\263\010\336\310J\366\277\037\376\306\004\242\331\355\277\235%\237\320\237\252\310?)-\237\360\314,\350?\231M^\261C\321\361?\300\021E\306\200\025\244?\202\263\010\336\310J\366\277\\\367&\352 \326\363\277\374>E\206\217\"\321\277\202\263\010\336\310J\366\277\203\222\326\367I,\305\277\260\2000b\2076\354\277\346\305!\231\223\272\366?\202\263\010\336\310J\366\277\231\2525\223\347\317\351?\244\270\333\230\223\004\363\277\233\372\371\\`\257\000@\235%\237\320\237\252\310?\\\367&\352 \326\363\277\010(\3145\002s\353?\260\2000b\2076\354\277\231\2525\223\347\317\351?j\203\326\267\357\'\326?\202\263\010\336\310J\366\277w\245b\330\034\026\355?\0236r;\256\247\364\277@[T\264\231F\000@\2159\371\332\276?\275\277\206\r@5\002\007\344\277\260\2000b\2076\354\277\346\"\371z7\271\356?\374>E\206\217\"\321\277\215{]\247\274|\357\277\374>E\206\217\"\321\277\010\313\364S^t\363?j\203\326\267\357\'\326?\322\205\003\035R\360\350\277\206\r@5\002\007\344\277\\\367&\352 \326\363\277\202\263\010\336\310J\366\277\374>E\206\217\"\321\277\260\2000b\2076\354\277\364\212\326\327\034\252\345\277\2159\371\332\276?\275\277\231M^\261C\321\361?\231M^\261C\321\361?\231M^\261C\321\361?Et\326w\225#\267?\364\212\326\327\034\252\345\277\023NE\306\351&\260\277\023NE\306\351&\260\277\215{]\247\274|\357\277\010(\3145\002s\353?\231M^\261C\321\361?\355y\220G\0063\362\277\202\263\010\336\310J\366\277Y\033\371Z\n7\317?\013\202\003\215;/\371?\3339r\313\304h\324\277\374>E\206\217\"\321\277R9E\256\355\200\001@\322\205\003\035R\360\350\2776;E\366xa\361\277N2r\253\227\346\344?\235%\237\320\237\252\310?\244\270\333\230\223\004\363\277j\203\326\267\357\'\326?!y0BZ\264\334?~\374\371\244\353\217\360\277)-\237\360\314,\350?\260\2000b\2076\354\2776;E\366xa\361\277;\2100\202\264\270\313\277\023NE\306\351&\260\277\0236r;\256\247\364\277\374>E\206\217\"\321\277\236\004m\352 \214\367?\2664\237\020\372\256\327\277\037\376\306\004\242\331\355\277\215{]\247\274|\357\277\215{]\247\274|\357\277\231M^\261C\321\361?\300\t@\245\353E\364?s*\371\232d;\336\277z\377\231/V\322\372?\340/EF5\036\302?\300\021E\306\200\025\244?\010(\3145\002s\353?\231M^\261C\321\361?B\003\232\277l\223\352\277\023NE\306\351&\260\277\231M^\261C\321\361?\\\367&\352 \326\363\277\203\222\326\367I,\305\277*\320\307\016).\360?\0236r;\256\247\364\277\341\016\023`\266\377\360?\213\210\251r\272\341\322?\235%\237\320\237\252\310?\374>E\206\217\"\321\277\037\376\306\004\242\331\355\277\0236r;\256\247\364\277o7Efb\240\341?\315\024\213\214\245p\210\277\272\257\010N\262\211\346?\231M^\261C\321\361?\256\330\352V\264\351\001@\315\024\213\214\245p\210\277\202\263\010\336\310J\366\277w\245b\330\034\026\355?6;E\366xa\361\277z\377\231/V\322\372?\215{]\247\274|\357\277\213\210\251r\272\341\322?;\2100\202\264\270\313\277\0236r;\256\247\364\277c\010mz7M\347\277\235%\237\320\237\252\310?)-\237\360\314,\350?\202\263\010\336\310J\366\277\225/\314U/\365\332\277\241\273{#\376F\375?\346\305!\231\223\272\366?o7Efb\240\341?y\365&\242\225\365\003@\202\263\010\336\310J\366\277;\2100\202\264\270\313\277\244\270\333\230\223\004\363\277\236\004m\352 \214\367?\206\r@5\002\007\344\277\\\367&\352 \326\363\277\272\257\010N\262\211\346?s*\371\232d;\336\277\202\263\010\336\310J\366\277SC\270;\256]\370?\346\"\371z7\271\356?\010(\3145\002s\353?\202\263\010\336\310J\366\277w\245b\330\034\026\355?\202\263\010\336\310J\366\277\203\222\326\367I,\305\277Y\033\371Z\n7\317?\231M^\261C\321\361?!y0BZ\264\334?\302\300N\336\310\000\372?\231M^\261C\321\361?\202\263\010\336\310J\366\277\027\220\251\222\347c\342\277\3339r\313\304h\324\277\203\222\326\367I,\305\277\202\263\010\336\310J\366\277\203\222\326\367I,\305\277s*\371\232d;\336\277\3339r\313\304h\324\277!y0BZ\264\334?/\207\326G\006\351\365?\213\210\251r\272\341\322?\231M^\261C\321\361?\225/\314U/\365\332\277\300\t@\245\353E\364?/\207\326G\006\351\365?\364\212\326\327\034\252\345\2776;E\366xa\361\277\0236r;\256\247\364\277!y0BZ\264\334?\235%\237\320\237\252\310?\346\305!\231\223\272\366?wH\213\366x\027\365?/\207\326G\006\351\365?\023NE\306\351&\260\277\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277\341\016\023`\266\377\360?\0236r;\256\247\364\277~\374\371\244\353\217\360\277\203\222\326\367I,\305\277\300\021E\306\200\025\244?X\372\306t\213\030\376?\231M^\261C\321\361?6;E\366xa\361\277\206\r@5\002\007\344\277\236\004m\352 \214\367?\341\016\023`\266\377\360?\202\263\010\336\310J\366\277\272\257\010N\262\211\346?\374>E\206\217\"\321\277)-\237\360\314,\350?\336\264\333\010}C\343?\2159\371\332\276?\275\277\010(\3145\002s\353?\233\372\371\\`\257\000@\340/EF5\036\302?\013\202\003\215;/\371?\202\263\010\336\310J\366\277\340/EF5\036\302?\203\222\326\367I,\305\277\2664\237\020\372\256\327\277\341\016\023`\266\377\360?w\245b\330\034\026\355?SC\270;\256]\370?\2159\371\332\276?\275\277\202\263\010\336\310J\366\277\3339r\313\304h\324\277\010(\3145\002s\353?\3339r\313\304h\324\277\260\2000b\2076\354\277\206\r@5\002\007\344\277\315\024\213\214\245p\210\277\3339r\313\304h\324\277\013\202\003\215;/\371?\206\r@5\002\007\344\277\037\376\306\004\242\331\355\277\215{]\247\274|\357\277\2664\237\020\372\256\327\277\250\022\023\360\314\300\340\277j\203\326\267\357\'\326?\023NE\306\351&\260\277\037\376\306\004\242\331\355\277\231M^\261C\321\361?\301\266\333P\010$\003@\203\222\326\367I,\305\277Y\033\371Z\n7\317?Y\033\371Z\n7\317?Et\326w\225#\267?\203\222\326\367I,\305\277\010\313\364S^t\363?\231M^\261C\321\361?\202\263\010\336\310J\366\277\tx\220\377zR\002@Y\033\371Z\n7\317?~\374\371\244\353\217\360\277\213\210\251r\272\341\322?\231M^\261C\321\361?\322\205\003\035R\360\350\277\203\222\326\367I,\305\277\231M^\261C\321\361?\035V\201\371\316\214\003@\241\273{#\376F\375?~\374\371\244\353\217\360\2776;E\366xa\361\277\341\016\023`\266\377\360?\340/EF5\036\302?wH\213\366x\027\365?\355y\220G\0063\362\277Y\033\371Z\n7\317?\244\270\333\230\223\004\363\277B\003\232\277l\223\352\277\235%\237\320\237\252\310?c\010mz7M\347\277\0236r;\256\247\364\277\336\264\333\010}C\343?\336\264\333\010}C\343?\215{]\247\274|\357\277\213\210\251r\272\341\322?B\003\232\277l\223\352\277!y0BZ\264\334?\336\264\333\010}C\343?\000t]\207\217\372\337?s*\371\232d;\336\277\0209\022\306\030\352\376?\231\2525\223\347\317\351?/\207\326G\006\351\365?\231M^\261C\321\361?\235%\237\320\237\252\310?*\320\307\016).\360?\231M^\261C\321\361?\231M^\261C\321\361?\310w]\027\246\273\377?wH\213\366x\027\365?\202\263\010\336\310J\366\277\364\212\326\327\034\252\345\277N2r\253\227\346\344?C~\003\375$n\331?B\003\232\277l\223\352\277\241\273{#\376F\375?)-\237\360\314,\350?\2664\237\020\372\256\327\277Et\326w\225#\267?6;E\366xa\361\277\231M^\261C\321\361?\2664\237\020\372\256\327\277\213\210\251r\272\341\322?j\203\326\267\357\'\326?\202\263\010\336\310J\366\277\272\257\010N\262\211\346?\235%\237\320\237\252\310?\300\021E\306\200\025\244?\340/EF5\036\302?\2159\371\332\276?\275\277\202\263\010\336\310J\366\277c\010mz7M\347\277c\010mz7M\347\277N2r\253\227\346\344?\231M^\261C\321\361?04r\363\"\307\004@X\372\306t\213\030\376?\235%\237\320\237\252\310?Et\326w\225#\267?N2r\253\227\346\344?j\203\326\267\357\'\326?C~\003\375$n\331?\231\2525\223\347\317\351?\340/EF5\036\302?Y\033\371Z\n7\317?\203\222\326\367I,\305\277\364\212\326\327\034\252\345\277Y\033\371Z\n7\317?Y\033\371Z\n7\317?)-\237\360\314,\350?!y0BZ\264\334?j\203\326\267\357\'\326?Et\326w\225#\267?s*\371\232d;\336\277\\\367&\352 \326\363\277\010(\3145\002s\353?\346\"\371z7\271\356?\302\300N\336\310\000\372?\340/EF5\036\302?c\010mz7M\347\277\231M^\261C\321\361?\302\300N\336\310\000\372?\2664\237\020\372\256\327\277\000t]\207\217\372\337?\225/\314U/\365\332\277\300\021E\306\200\025\244?\355y\220G\0063\362\277\300\021E\306\200\025\244?\250\022\023\360\314\300\340\277\0236r;\256\247\364\277\\\367&\352 \326\363\277\0236r;\256\247\364\277N2r\253\227\346\344?;\2100\202\264\270\313\277\231\2525\223\347\317\351?\0209\022\306\030\352\376?)-\237\360\314,\350?B\003\232\277l\223\352\277\231\2525\223\347\317\351?\300\t@\245\353E\364?\340/EF5\036\302?s*\371\232d;\336\277\315\024\213\214\245p\210\277\322\205\003\035R\360\350\277\364\212\326\327\034\252\345\277\013\202\003\215;/\371?\010(\3145\002s\353?\260\2000b\2076\354\277\027\220\251\222\347c\342\277\215{]\247\274|\357\277\037\376\306\004\242\331\355\277\235%\237\320\237\252\310?\010\313\364S^t\363?\346\"\371z7\271\356?\250\022\023\360\314\300\340\277w\245b\330\034\026\355?\364\212\326\327\034\252\345\277\215{]\247\274|\357\277\0236r;\256\247\364\277~\374\371\244\353\217\360\277\340/EF5\036\302?\3339r\313\304h\324\277\023NE\306\351&\260\277\3339r\313\304h\324\277P\214\251\002\321\242\362?N2r\253\227\346\344?Et\326w\225#\267?wH\213\366x\027\365?/\207\326G\006\351\365?\355y\220G\0063\362\277R9E\256\355\200\001@\202\263\010\336\310J\366\277\364\212\326\327\034\252\345\277\322\205\003\035R\360\350\277\000t]\207\217\372\337?\203\222\326\367I,\305\277\341\016\023`\266\377\360?\203\222\326\367I,\305\277X\372\306t\213\030\376?\203\222\326\367I,\305\277Et\326w\225#\267?\272\257\010N\262\211\346?\244\270\333\230\223\004\363\277\231M^\261C\321\361?)-\237\360\314,\350?\355y\220G\0063\362\277\206\r@5\002\007\344\277\260\2000b\2076\354\277\2664\237\020\372\256\327\277\250\022\023\360\314\300\340\277\203\222\326\367I,\305\277\231M^\261C\321\361?c\010mz7M\347\277\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277s*\371\232d;\336\277\213\210\251r\272\341\322?\225/\314U/\365\332\277\315\024\213\214\245p\210\277P\214\251\002\321\242\362?\027\220\251\222\347c\342\277\301\266\333P\010$\003@6;E\366xa\361\277\2159\371\332\276?\275\277\322\205\003\035R\360\350\277\231M^\261C\321\361?\0236r;\256\247\364\277\235%\237\320\237\252\310?\010(\3145\002s\353?\037\376\306\004\242\331\355\277\3339r\313\304h\324\277\225/\314U/\365\332\277\340/EF5\036\302?\300\021E\306\200\025\244?j\203\326\267\357\'\326?\\\367&\352 \326\363\277)-\237\360\314,\350?\202\263\010\336\310J\366\277\315\024\213\214\245p\210\277)-\237\360\314,\350?\336\264\333\010}C\343?\000t]\207\217\372\337?\023NE\306\351&\260\277\340/EF5\036\302?\2159\371\332\276?\275\277\231\2525\223\347\317\351?\202\263\010\336\310J\366\277\260\2000b\2076\354\277\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277\322\205\003\035R\360\350\277\355y\220G\0063\362\277\\\367&\352 \326\363\277\235%\237\320\237\252\310?\235%\237\320\237\252\310?\023NE\306\351&\260\277\235%\237\320\237\252\310?\202\263\010\336\310J\366\277\374>E\206\217\"\321\277\310w]\027\246\273\377?~\374\371\244\353\217\360\277\346\"\371z7\271\356?\206\r@5\002\007\344\277\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277Et\326w\225#\267?\231M^\261C\321\361?\340/EF5\036\302?~\374\371\244\353\217\360\277\3339r\313\304h\324\277\231M^\261C\321\361?P\214\251\002\321\242\362?\235%\237\320\237\252\310?\0236r;\256\247\364\277\037\376\306\004\242\331\355\277SC\270;\256]\370?\037\376\306\004\242\331\355\277o7Efb\240\341?)-\237\360\314,\350?\233\372\371\\`\257\000@P\214\251\002\321\242\362?\202\263\010\336\310J\366\277\233\372\371\\`\257\000@N2r\253\227\346\344?\231M^\261C\321\361?\3339r\313\304h\324\277C~\003\375$n\331?\213\210\251r\272\341\322?\215{]\247\274|\357\277\202\263\010\336\310J\366\277\302\300N\336\310\000\372?~\374\371\244\353\217\360\277\010\313\364S^t\363?\202\263\010\336\310J\366\277/\207\326G\006\351\365?*\320\307\016).\360?\364\212\326\327\034\252\345\277\215{]\247\274|\357\277)-\237\360\314,\350?c\010mz7M\347\277\231\2525\223\347\317\351?C~\003\375$n\331?\0236r;\256\247\364\277\231M^\261C\321\361?~\374\371\244\353\217\360\277\312t\275\214;y\365\277\336\264\333\010}C\343?\010\313\364S^t\363?\0236r;\256\247\364\277\231M^\261C\321\361?\202\263\010\336\310J\366\277\215{]\247\274|\357\277\202\263\010\336\310J\366\277;\2100\202\264\270\313\277\023NE\306\351&\260\277\3339r\313\304h\324\277\322\205\003\035R\360\350\277\\\367&\352 \326\363\277\202\263\010\336\310J\366\277N2r\253\227\346\344?\310w]\027\246\273\377?Et\326w\225#\267?\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277e\0276\250A\273\002@\202\263\010\336\310J\366\277\244\270\333\230\223\004\363\277\340/EF5\036\302?\\\367&\352 \326\363\277\2159\371\332\276?\275\277\203\222\326\367I,\305\277\236\004m\352 \214\367?\2664\237\020\372\256\327\277\340/EF5\036\302?\215{]\247\274|\357\277;\2100\202\264\270\313\277\202\263\010\336\310J\366\277\0236r;\256\247\364\2776;E\366xa\361\277o7Efb\240\341?\0236r;\256\247\364\277\202\263\010\336\310J\366\277\0236r;\256\247\364\277\0236r;\256\247\364\277\312t\275\214;y\365\277\023NE\306\351&\260\277\250\022\023\360\314\300\340\277\215{]\247\274|\357\277\203\222\326\367I,\305\277\202\263\010\336\310J\366\277\010(\3145\002s\353?\260\2000b\2076\354\277\202\263\010\336\310J\366\277\322\205\003\035R\360\350\277\\\367&\352 \326\363\277\233\372\371\\`\257\000@\2664\237\020\372\256\327\277\2159\371\332\276?\275\277\346\"\371z7\271\356?!y0BZ\264\334?\355y\220G\0063\362\277\2159\371\332\276?\275\277\231M^\261C\321\361?;\2100\202\264\270\313\277\355y\220G\0063\362\277\213\210\251r\272\341\322?s*\371\232d;\336\277\206\r@5\002\007\344\277\202\263\010\336\310J\366\277y\365&\242\225\365\003@\0236r;\256\247\364\277\341\016\023`\266\377\360?\203\222\326\367I,\305\277\203\222\326\367I,\305\277\202\263\010\336\310J\366\277\010(\3145\002s\353?\3339r\313\304h\324\277\3339r\313\304h\324\277)-\237\360\314,\350?\231M^\261C\321\361?\312t\275\214;y\365\277\341\016\023`\266\377\360?\374>E\206\217\"\321\277\202\263\010\336\310J\366\277\3339r\313\304h\324\277\202\263\010\336\310J\366\277\231M^\261C\321\361?z\377\231/V\322\372?\\\367&\352 \326\363\277\341\016\023`\266\377\360?\244\270\333\230\223\004\363\277\000t]\207\217\372\337?Y\033\371Z\n7\317?\023NE\306\351&\260\277\260\2000b\2076\354\277\023NE\306\351&\260\277Y\033\371Z\n7\317?N2r\253\227\346\344?\310w]\027\246\273\377?B\003\232\277l\223\352\277P\214\251\002\321\242\362?\231M^\261C\321\361?\322\205\003\035R\360\350\277\2159\371\332\276?\275\277z\377\231/V\322\372?\235%\237\320\237\252\310?\0209\022\306\030\352\376?Y\033\371Z\n7\317?\010(\3145\002s\353?Et\326w\225#\267?\202\263\010\336\310J\366\277\250\022\023\360\314\300\340\277\322\205\003\035R\360\350\277\037\376\306\004\242\331\355\277\202\263\010\336\310J\366\277\2159\371\332\276?\275\277\225/\314U/\365\332\277\346\"\371z7\271\356?\202\263\010\336\310J\366\277Y\033\371Z\n7\317?Y\033\371Z\n7\317?\310w]\027\246\273\377?N2r\253\227\346\344?\202\263\010\336\310J\366\277Y\033\371Z\n7\317?\260\2000b\2076\354\277\310w]\027\246\273\377?\213\210\251r\272\341\322?z\377\231/V\322\372?\312t\275\214;y\365\277/\207\326G\006\351\365?\340/EF5\036\302?w\245b\330\034\026\355?\250\022\023\360\314\300\340\277!y0BZ\264\334?Y\033\371Z\n7\317?\260\2000b\2076\354\277c\010mz7M\347\277\374>E\206\217\"\321\277;\2100\202\264\270\313\277\202\263\010\336\310J\366\277\312t\275\214;y\365\277\010(\3145\002s\353?\231M^\261C\321\361?\203\222\326\367I,\305\277\374>E\206\217\"\321\277\336\264\333\010}C\343?Y\033\371Z\n7\317?\027\220\251\222\347c\342\277\202\263\010\336\310J\366\277N2r\253\227\346\344?6;E\366xa\361\277\366\231\237\005\'\030\001@o7Efb\240\341?)-\237\360\314,\350?@[T\264\231F\000@\\\367&\352 \326\363\277\215{]\247\274|\357\277\346\305!\231\223\272\366?\203\222\326\367I,\305\277\225/\314U/\365\332\277\213\210\251r\272\341\322?*\320\307\016).\360?\250\022\023\360\314\300\340\277wH\213\366x\027\365?N2r\253\227\346\344?N2r\253\227\346\344?\231M^\261C\321\361?\300\021E\306\200\025\244?\2664\237\020\372\256\327\277\037\376\306\004\242\331\355\277\336\264\333\010}C\343?!y0BZ\264\334?*\320\307\016).\360?\312t\275\214;y\365\277\0236r;\256\247\364\277\000t]\207\217\372\337?\\\367&\352 \326\363\277\241\273{#\376F\375?\300\021E\306\200\025\244?\231M^\261C\321\361?\374>E\206\217\"\321\277Y\033\371Z\n7\317?\010\313\364S^t\363?c\010mz7M\347\277o7Efb\240\341?N2r\253\227\346\344?w\245b\330\034\026\355?\355y\220G\0063\362\277\236\004m\352 \214\367?6;E\366xa\361\277\312t\275\214;y\365\277\231M^\261C\321\361?\346\305!\231\223\272\366?\203\222\326\367I,\305\277\202\263\010\336\310J\366\277~\374\371\244\353\217\360\277!y0BZ\264\334?\202\263\010\336\310J\366\277\202\263\010\336\310J\366\277\023NE\306\351&\260\277\010(\3145\002s\353?/\207\326G\006\351\365?\202\263\010\336\310J\366\277SC\270;\256]\370?\231M^\261C\321\361?\300\t@\245\353E\364?\010(\3145\002s\353?\023NE\306\351&\260\277\2159\371\332\276?\275\277\2664\237\020\372\256\327\277\346\"\371z7\271\356?\300\t@\245\353E\364?\213\210\251r\272\341\322?B\003\232\277l\223\352\277\0209\022\306\030\352\376?;\2100\202\264\270\313\277\336\264\333\010}C\343?\364\212\326\327\034\252\345\277\244\270\333\230\223\004\363\277\300\021E\306\200\025\244?\2664\237\020\372\256\327\277\231M^\261C\321\361?\241\273{#\376F\375?s*\371\232d;\336\277)-\237\360\314,\350?\2159\371\332\276?\275\277\315\024\213\214\245p\210\277s*\371\232d;\336\277\225/\314U/\365\332\277;\2100\202\264\270\313\277Y\033\371Z\n7\317?\312t\275\214;y\365\277\215{]\247\274|\357\277\213\210\251r\272\341\322?\336\264\333\010}C\343?\3339r\313\304h\324\277s*\371\232d;\336\277\364\212\326\327\034\252\345\277\272\257\010N\262\211\346?\037\376\306\004\242\331\355\277\315\024\213\214\245p\210\277\244\270\333\230\223\004\363\277/\207\326G\006\351\365?C~\003\375$n\331?\023NE\306\351&\260\277;\2100\202\264\270\313\277\235%\237\320\237\252\310?\203\222\326\367I,\305\277\312t\275\214;y\365\277\231M^\261C\321\361?j\203\326\267\357\'\326?\\\367&\352 \326\363\277\341\016\023`\266\377\360?B\003\232\277l\223\352\277\231M^\261C\321\361?\260\2000b\2076\354\277;\2100\202\264\270\313\277\000t]\207\217\372\337?\027\220\251\222\347c\342\277y\365&\242\225\365\003@j\203\326\267\357\'\326?2>\345\200\343\243\373?\312t\275\214;y\365\277wH\213\366x\027\365?\0236r;\256\247\364\277\312t\275\214;y\365\277\233\372\371\\`\257\000@\250\022\023\360\314\300\340\277P\214\251\002\321\242\362?\037\376\306\004\242\331\355\277\203\222\326\367I,\305\277\355y\220G\0063\362\277\\\367&\352 \326\363\277P\214\251\002\321\242\362?\023NE\306\351&\260\277\215{]\247\274|\357\277\235%\237\320\237\252\310?)-\237\360\314,\350?"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "AP\262\260s\253\357\277\267%BA\256\'\240\277\334>\276\232\024\364\250?\274\013,\\\252\371\340?`\261\002\351^\031\333?\323\353_\354-N\006\300s(2\236\nA\340\277\235n\250\332^o\321\277\237\353\t\354\365-\272?sPT$\240\376\342\277\327\021\246\241\302#\373\277\226\311\375\223T\"\006\3005\305)O\016\374\356\277\334>\276\232\024\364\250?\213\242\2300\313y\350\277\027e\027s\0144\325\277\216\013\346s\006\222\370\277\031G\255\031i?\324?\237\353\t\354\365-\272?\027\210|K\206\256\306?^\217\177\341EY\360\277W\345&\370Q\200\226? \004U\014\264V\374\277\334>\276\232\024\364\250?\371\251)\230\035\265\344\277\324X\024R\\\220\345\277\230\036l\345\336\256\350?\336\177\253\206\377\013\367?g~\001\207\030\367\354?\202lLO\326\203\366\2779\360\024\203\177\241\364\277sPT$\240\376\342\277\212\345\237\276q\274\003\300\201\327uc\022\204\004@[\313V\237\035\212\351?H\233\361%\224\272\331?X&\326\022\202U\365?\021\324K\036\263r\347\277.S\006\260A\325\323\277\221\343\037y\371\277\320\277\255-\226@>\347\367?ld\255\320Y\206\336?\344\350TU\303\017\362\277\243\270\251\363\225\330\351\277\261\215\000b\3539\t@p\332\200\372|\302\370?\257\177e\236[\244\356\277O\030\254\267\"\035\346?\327\233.\003(\323\373\277\024\304P\376\314\227\310\277\343L\312\r\333\240\367\277Be\001\320\'\260\342?\237\353\t\354\365-\272?\001\tz\320\010#\320?\227-!\2220)\351\277\235\226\312`\364,\324\277\371\201\007\022\210\367\341\277.\314\272\024\025\236s\277\037\201\200\006s\026\004@sPT$\240\376\342\277\024\357CI\351\367\372\277\321EI\002&\222\302?\325q\201+\240\323\347?\031G\255\031i?\324?\277\277a\225\227\250\365\277\371\201\007\022\210\367\341\277Q\314\341\360\017\314\372\277\305\223\353\0174\301\376?\r\224\0022n\322\320?s(2\236\nA\340\277[\313V\237\035\212\351?\002oz\332\022\366\366?\232\335\373i\006Y\225\277\310\206\301\264\324\210\357?\322\314\000\237\004\237\363?\001\302\257\224\346\312\312?%E\241\216\270\241\274\277|\215+\342w/\374?\037\201\200\006s\026\004@\245\332Uz\360\314\005@\333\247q\201\014\336\336?\031G\255\031i?\324?\310\315\213\360\366\340\344\277\216\225n\325kA\371\277\265\324\375\251TI\330\277\336\007%\013\035\034\360?%\372W\001d\254\327?\r\224\0022n\322\320?`\261\002\351^\031\333?O\030\254\267\"\035\346?\204\024@v1\324\232\2775\305)O\016\374\356\277\312y\300\330\266\204\001@\232\322\241\036\314]\375\277\334>\276\232\024\364\250?\371\251)\230\035\265\344\277^\217\177\341EY\360\277\2324\010\372\233O\373\277%E\241\216\270\241\274\277\360\375e\030\216n\363\277\273\n\356\377\300S\357\277\010\021\246\026\322*\305\277\255\3351K\361\264\363?\350\361\354\337\231\333\255\277\345\227.x7\332\305\277\372\273r\n\316\344\r@!w\373\345\307\004\314\277\002\347\000V\365\345\375?\022g\243Y5\365\261?\355\346\213\247\347\'\357\277\345(B\266\177\304\335\277!<j\233\2044\361\277\3663Vn\372x\372?\301\207\250\221O\266\333\277!w\373\345\307\004\314\277\305\031V\267\t2\360?\350\361\354\337\231\333\255\277\002\347\000V\365\345\375?\315\0221\363\264e\334\277g~\001\207\030\367\354?\362J\331_2G\311\277\235\226\312`\364,\324\277`\261\002\351^\031\333?\331\235\271T\032\025\335\277\265\324\375\251TI\330\277%\372W\001d\254\327?\221\013B\377\216}\323\277B\210\307?D\211\344\277\311\276\326C\245f\344?gj\360\303M\230\353?O\030\254\267\"\035\346?\235\226\312`\364,\324\277\226\215:Vc\252\002\300\305\031V\267\t2\360?\021\324K\036\263r\347\277\302\366gMC;x?\037\201\200\006s\026\004@\033I8k[\201\365?Ls++\207\350\361?\001\302\257\224\346\312\312?Be\001\320\'\260\342?\334>\276\232\024\364\250?)&\220*\336\355\354\277\305\031V\267\t2\360?\311\276\326C\245f\344?\010\021\246\026\322*\305\277N\023P\241\2518\345\277\331\305\333\332\257\322\337\277*+\354@W\322\355?\202lLO\326\203\366\277:\227\002\247?o\256?\371\201\007\022\210\367\341\277\206\200\271\235)\316\322\277\031G\255\031i?\324?\311\276\326C\245f\344?p\332\200\372|\302\370?\031G\255\031i?\324?\305\031V\267\t2\360?^\217\177\341EY\360\277\360\375e\030\216n\363\277\002\347\000V\365\345\375?\301\207\250\221O\266\333\277\315\352\016m\037\250\331\277\257kT\333\220E\355\277ld\255\320Y\206\336?\237\353\t\354\365-\272?\005\332\326\372\225\255\356?g\261\272\377o\360\340\277O\030\254\267\"\035\346?\322Bx=\237\357\362?\374]\373.\327\275\301\277\235n\250\332^o\321\277%\372W\001d\254\327?|\215+\342w/\374?.\314\272\024\025\236s\277\305\031V\267\t2\360?\007\315\325\036x\251\000@\343J\2730\223\001\360\277\3663Vn\372x\372?\301_\206\013\272\370\330\277\273\366\334<\366\364\355\277\005!\2416\270\005\344\277\331\235\271T\032\025\335\277$\030\302Z\007\241\330\277\211\323\235\330\356\374\t\300\363\276\300\240\300\342\301?\327\2550\351\252\222\365\277\035s\345B\343\200\351\277|\215+\342w/\374?.S\006\260A\325\323\277\252q\227\316\204W\332\277\322\314\000\237\004\237\363?\344G\352k\014_\300\277ld\255\320Y\206\336?\340\037\320\374!\\\352\277|\215+\342w/\374?\002\347\000V\365\345\375?\253S-u\341b\331?g~\001\207\030\367\354?\311\322\347\006p\305\345?\027=\365\354vv\322\277\334>\276\232\024\364\250?\033\323\300\314\3000\366?ld\255\320Y\206\336?-e\214!\032\362\363\277%E\241\216\270\241\274\277\257kT\333\220E\355\277\371\251)\230\035\265\344\277\265\254\333#\277\213\325\277O\030\254\267\"\035\346?\312\3355\221\316\025\007@\243\270\251\363\225\330\351\277\327\2550\351\252\222\365\2779\004&FJ\000\366\277\010\021\246\026\322*\305\277O\030\254\267\"\035\346?ld\255\320Y\206\336?\327\207\035@]t\372\277G\271[\1777\257\332\277\341\020\033P\320\341\351?~\346y\216\351x\243?\216\251\177\2306\240\372\277\322O\325\244E\337\013\300%\372W\001d\254\327?\266\374\0370\352\006\333\277[\313V\237\035\212\351?\031G\255\031i?\324?\215&\253\222\365_\002@ld\255\320Y\206\336?|\215+\342w/\374?\302\366gMC;x?+4+\356m\203\007@\331\235\271T\032\025\335\277\277\323rXb\007\367\277\010\021\246\026\322*\305\277\010\021\246\026\322*\305\277\350[Z\305\360\360\303?\213\216\207m\000\033\347\277!<j\233\2044\361\277\257kT\333\220E\355\277\273\n\356\377\300S\357\277\r\224\0022n\322\320?\370I\362\202\267\031\355\277L\375\263\214\354\227\362?\3210vW\0340\371?\374\234\377<\276|\365\277\r\224\0022n\322\320?\005I\303\274M\303\346\277\303\036\267\331\234\211\306\277\235n\250\332^o\321\277\345(B\266\177\304\335\2770\313lB\002\016\334\277\001\302\257\224\346\312\312?@\034k\004}\373\233?\253S-u\341b\331?\3663Vn\372x\372?\265\324\375\251TI\330\277\227-!\2220)\351\277\365^I\271\026\331\314?-e\214!\032\362\363\277\260)\177\010#\344\271\277\215&\253\222\365_\002@\030\330\300W\261)\314?0\356\321\032|\210\315?\257WC\030\306\346\353\277\227-!\2220)\351\277ld\255\320Y\206\336?\221\343\037y\371\277\320\277[\313V\237\035\212\351?\350[Z\305\360\360\303?\344\350TU\303\017\362\277?:\026\234\266\n\375?\227\005\377\013\233k\346\277\213\242\2300\313y\350\277\227\005\377\013\233k\346\277\341$,\023\233@\353?%\3225{\316\356\324?\316:SyJ#\337\277\2324\010\372\233O\373\2776\306g\253\367\241\340?\r\337K\277\302\307\265\277_\367\216\310\227\313\336\277\035\207\366\005\256\337\352\277\213fe\347j]\344\277?:\026\234\266\n\375?\r\224\0022n\322\320?\311\276\326C\245f\344?sPT$\240\376\342\277\350[Z\305\360\360\303?)\022\177g\023\217\353\277\235n\250\332^o\321\277\251!S\302Y\334\324\277\260\243ija#\342\277\243\270\251\363\225\330\351\277\375CN\370 \251\277?\265\324\375\251TI\330\277\316:SyJ#\337\277\214\177\322\300\256\240\346?\3663Vn\372x\372?\227\005\377\013\233k\346\277\360\021w\333X\315\364\277`\261\002\351^\031\333?\030\330\300W\261)\314?)\022\177g\023\217\353\277L\375\263\214\354\227\362?\235n\250\332^o\321\277|\215+\342w/\374?H\233\361%\224\272\331?j\270\241g\333\026\363\277\313\350\203\033-f\370\277\235n\250\332^o\321\277\r\224\0022n\322\320?\311\276\326C\245f\344?\355\366~\260\"H\341\277\237\240\202\215\346\365\325?\210\306@qH\r\361?.\314\272\024\025\236s\277%\3225{\316\356\324?!w\373\345\307\004\314\277\336\177\253\206\377\013\367?O\030\254\267\"\035\346?\273\n\356\377\300S\357\277\213\216\207m\000\033\347\277\207\205\264\034\000T\263?\351\253\236\321\033l\311?\001\302\257\224\346\312\312?ld\255\320Y\206\336?\236\276\354\346\211\352\326\2778\336\022\235\374\341\372\277\ta\352\"\375\245\312\277\336\177\253\206\377\013\367?-*\246\315\302q\317\277\031G\255\031i?\324?5\261\030\214C\235\355\277\r\224\0022n\322\320?\337\tr\"\272\214\004\300!w\373\345\307\004\314\277%\372W\001d\254\327?X&\326\022\202U\365?O\030\254\267\"\035\346?ld\255\320Y\206\336?3\207k\264\273\235\371?%\372W\001d\254\327?\302\366gMC;x?ld\255\320Y\206\336?\037\201\200\006s\026\004@\237\353\t\354\365-\272?\350\361\354\337\231\333\255\277\204k\342\353&\005\221?\010\021\246\026\322*\305\277\344\350TU\303\017\362\277C\215#V\275m\345?vC*\311@\306\363\277\351\253\236\321\033l\311?Q\270\320-Em\371\277\305\031V\267\t2\360?j\244\220\244\020\270\361\277\3701\365\326vO\000\300\305\031V\267\t2\360?\031G\255\031i?\324?ld\255\320Y\206\336?Q\314\341\360\017\314\372\277\210@\326\311r\234\377?\227-!\2220)\351\277%\372W\001d\254\327?.\314\272\024\025\236s\277\2753N\342?\267\343?g\261\272\377o\360\340\277\350\361\354\337\231\333\255\277.\314\272\024\025\236s\277\004\r\220s\355\246\342\277`\261\002\351^\031\333?\206\200\271\235)\316\322\277\215&\253\222\365_\002@Be\001\320\'\260\342?X&\326\022\202U\365?\331\305\333\332\257\322\337\277\3324\310\234g\350\307\277\237\353\t\354\365-\272?\010\021\246\026\322*\305\277\316\201\035\265l{\304\277Be\001\320\'\260\342?ld\255\320Y\206\336?\237\240\202\215\346\365\325?G\271[\1777\257\332\277\350\361\354\337\231\333\255\277\210,\305\006\250=\376?\177\333\334\205\005\256\343\277p\277\347e`p\267?\r\224\0022n\322\320?\350\361\354\337\231\333\255\277\235n\250\332^o\321\277\005!\2416\270\005\344\277\350\361\354\337\231\333\255\277O\030\254\267\"\035\346?\356\347\311\003\321\315\340?\004\r\220s\355\246\342\277\235n\250\332^o\321\277\322\314\000\237\004\237\363?\343N\331\352\"@\377\277%E\241\216\270\241\274\277W\345&\370Q\200\226?\325q\201+\240\323\347?\257\177e\236[\244\356\277Ls++\207\350\361?\334>\276\232\024\364\250?\274\013,\\\252\371\340?ld\255\320Y\206\336?\302\316r\315q\016\301\277\301\207\250\221O\266\333\277\215&\253\222\365_\002@\037\201\200\006s\026\004@\350[Z\305\360\360\303?p\332\200\372|\302\370?\350[Z\305\360\360\303?0]\276\3343\236\325?X&\326\022\202U\365?Ls++\207\350\361?M\327N)c\357\004\300[\313V\237\035\212\351?[\313V\237\035\212\351?5\261\030\214C\235\355\277ld\255\320Y\206\336?\334\250\257\335\365\203\300?^\031\010C\253\010\361\277\244\004\320E1\025\340\2775\017\223~\235#\000\300^\031\010C\253\010\361\277-e\214!\032\362\363\277\277\323rXb\007\367\277\334>\276\232\024\364\250?\244\004\320E1\025\340\277\310\252\305\200\332\007\343?9\004&FJ\000\366\277\325q\201+\240\323\347?g~\001\207\030\367\354?\267\336\265\326F\022\332?\307/\264\221q\001\006\300\261\224\264\275\017\251\341?\310\206\301\264\324\210\357?R\321:\374\367h\264\2775\305)O\016\374\356\277N;r\'?\366\347\277\261\224\264\275\017\251\341?%E\241\216\270\241\274\277g~\001\207\030\367\354?\265\324\375\251TI\330\277\216\225n\325kA\371\277\025\024\225\n\370\022\316\277\035s\345B\343\200\351\277\334>\276\232\024\364\250?\007\315\325\036x\251\000@\204\024@v1\324\232\277\334>\276\232\024\364\250?\277o\375\237Jv\361\277-*\246\315\302q\317\277\302\257\312\027\345s\336\277\271|\313o!\303\365?\251!S\302Y\334\324\277sPT$\240\376\342\277fQ\203\352\tU\351\277\235\226\312`\364,\324\277i\227\007\263\227L\260\277\001\302\257\224\346\312\312?\240bd\307C\345\242\277`\261\002\351^\031\333?\035s\345B\343\200\351\277!<j\233\2044\361\277sPT$\240\376\342\277O\030\254\267\"\035\346?j.\031\006vg\362\277|\215+\342w/\374?\030\037\213\223\323\201\321?Ls++\207\350\361?!w\373\345\307\004\314\277Be\001\320\'\260\342?\350\361\354\337\231\333\255\277\355\303\3057\313N\355?\341$,\023\233@\353?E+9\357\227\036\361\277\316\027,r\213\353\274?e\342\277\247\223s\002\3009\362#`\307@\374\277\000rk\210\273O\305?\237\240\202\215\346\365\325?\334>\276\232\024\364\250?\336\177\253\206\377\013\367?\235n\250\332^o\321\277Tq\303\024N_\277\277\341$,\023\233@\353?\205X\227\027\224\020\320\277.\314\272\024\025\236s\277*J\224\366\343l\340\277#\310}N\334%\323\277\t\313W\010T\273\240?\001\302\257\224\346\312\312?\215&\253\222\365_\002@g~\001\207\030\367\354?\334>\276\232\024\364\250?\311\276\326C\245f\344?\226\2049\343\241\312\005\300.\314\272\024\025\236s\277\355\346\213\247\347\'\357\277g\261\272\377o\360\340\277Be\001\320\'\260\342?\375CN\370 \251\277?\350[Z\305\360\360\303?Be\001\320\'\260\342?\024y\314\252N\247\373\277\r\224\0022n\322\320?\010\021\246\026\322*\305\277\r\224\0022n\322\320?\350\361\354\337\231\333\255\277\3663Vn\372x\372?.\314\272\024\025\236s\277\371\201\007\022\210\367\341\277\213\242\2300\313y\350\277%\372W\001d\254\327?sPT$\240\376\342\277R\321:\374\367h\264\277\334>\276\232\024\364\250?O\030\254\267\"\035\346?\344\324C\222\370\260\360\277\207\205\264\034\000T\263?\225y\353XCz\364?\r\224\0022n\322\320?s\035\233\253H\005\357?\r\224\0022n\322\320?@\034k\004}\373\233?tA\237wN\204\342?o>\366\262\224S\376?\345\335\370(+\317\270?\351\344 ?\027\235\374?\350[Z\305\360\360\303?\301\207\250\221O\266\333\277\355\366~\260\"H\341\277\010\306!\303S:\370\277\371\225\030\325RV\343\277O\030\254\267\"\035\346? \004U\014\264V\374\277\237\240\202\215\346\365\325?\301\207\250\221O\266\333\277\334>\276\232\024\364\250?\210@\326\311r\234\377?XY\222\226j\226\260?\3324\310\234g\350\307\277\005I\303\274M\303\346\277P\351E\341\327\224\013@p\332\200\372|\302\370?\235n\250\332^o\321\277\277\277a\225\227\250\365\277R\321:\374\367h\264\277\001\tz\320\010#\320?Tq\303\024N_\277\277p\332\200\372|\302\370?ld\255\320Y\206\336?\216\251\177\2306\240\372\277\210\306@qH\r\361?\006:\016\020\374H\346?\ta\352\"\375\245\312\277\355\366~\260\"H\341\277O\030\254\267\"\035\346?\265\324\375\251TI\330\277Uv\276\223$\345\337?\271\340@(9T\373?\305\031V\267\t2\360?\3663Vn\372x\372?g\261\272\377o\360\340\277^\217\177\341EY\360\277\334>\276\232\024\364\250?\243\270\251\363\225\330\351\277\331\235\271T\032\025\335\277e\342\277\247\223s\002\300\024e\273\347\203H\372\277\235n\250\332^o\321\277\334>\276\232\024\364\250?\230\036l\345\336\256\350?\327\207\035@]t\372\277\265\324\375\251TI\330\277\017 \026\345\305\303\362?\252\003\351h\266\347\323?\001\302\257\224\346\312\312?\r\224\0022n\322\320?M\327N)c\357\004\300Be\001\320\'\260\342?\260)\177\010#\344\271\277%\372W\001d\254\327?Hs\317\237\376\374\326?\036d0\226\221\006\351?g\261\272\377o\360\340\277Ls++\207\350\361?\232\276\220[\001\377\373\277H\233\361%\224\272\331?A\223\305\337\312\262\264?%\372W\001d\254\327?Be\001\320\'\260\342?\361\372\224S\007\314\303\277\311\276\326C\245f\344?@\034k\004}\373\233?gV\337\000\2039\352?\247\367\245\352\321\334\360\277!w\373\345\307\004\314\277g~\001\207\030\367\354?3\207k\264\273\235\371?\350[Z\305\360\360\303?\316:SyJ#\337\277\361\372\224S\007\314\303\277\333\204\014\251\222c\315\277[\313V\237\035\212\351?\302\031\372+\201F\325?\r\337K\277\302\307\265\277\3663Vn\372x\372?\010\021\246\026\322*\305\277O\030\254\267\"\035\346?g~\001\207\030\367\354??:\026\234\266\n\375?$\213k?\254\226\317?!w\373\345\307\004\314\277\313r\014}\222\025\371\277\370m\366N\275\230\340\277\260\217X\247\226\304\340\277\221\013B\377\216}\323\277\033\323\300\314\3000\366?\t\313W\010T\273\240?*:\241\355\250L\356\277\217\307n\273\266\273\217\277%\372W\001d\254\327?\243\270\251\363\225\330\351\277\343\260?\306\3621\375\277\350[Z\305\360\360\303?\350[Z\305\360\360\303?\211%=5VJ\276?\334>\276\232\024\364\250?Ls++\207\350\361?\325q\201+\240\323\347?v\341\303\355p\324\365\277\350\361\354\337\231\333\255\277i\227\007\263\227L\260\277[\313V\237\035\212\351?\210\306@qH\r\361?Ls++\207\350\361?\303\036\267\331\234\211\306\277\253S-u\341b\331?\021\350\\\341}\321\350\277\344G\352k\014_\300\277\336\177\253\206\377\013\367?r\030?\225\317 \356\277\376\375\203G-\264\314\277\r\224\0022n\322\320?\000rk\210\273O\305?QVjRu{\373\277\325q\201+\240\323\347?\r\337K\277\302\307\265\277O\030\254\267\"\035\346?\004\r\220s\355\246\342\277\334>\276\232\024\364\250?Be\001\320\'\260\342?`\261\002\351^\031\333?\253S-u\341b\331?\350[Z\305\360\360\303?!w\373\345\307\004\314\277\005I\303\274M\303\346\277[\313V\237\035\212\351?\260\243ija#\342\277\301\207\250\221O\266\333\277\324X\024R\\\220\345\277<\300$\270\003\220\323?\237\353\t\354\365-\272?\261\224\264\275\017\251\341?s(2\236\nA\340\277\235n\250\332^o\321\277s\365x%\263G\354?\334>\276\232\024\364\250?\350[Z\305\360\360\303?\351\253\236\321\033l\311?\243\314\272\266`7\353\277\3007d\205$;\326\277sPT$\240\376\342\277\001\302\257\224\346\312\312?[\313V\237\035\212\351?\257kT\333\220E\355\277\232c\262Q\203\000\276\277!w\373\345\307\004\314\2775\261\030\214C\235\355\277g~\001\207\030\367\354?\273TW/P{\000\300\025\024\225\n\370\022\316\277\301_\206\013\272\370\330\277\301\207\250\221O\266\333\277\247\013\267\255\234;\362\277ld\255\320Y\206\336?\235n\250\332^o\321\277O\030\254\267\"\035\346?\024\357CI\351\367\372\277\r\224\0022n\322\320?\r\224\0022n\322\320?\236P>\201\273z\320?\251!S\302Y\334\324\277%\372W\001d\254\327?\274\013,\\\252\371\340?\274Y\346\242`\305\204\277N\023P\241\2518\345\277\2753N\342?\267\343?\301\207\250\221O\266\333\277O\030\254\267\"\035\346?-\307\362\374\351\343\361\277O\030\254\267\"\035\346?\265\324\375\251TI\330\277\201\375\\\202\215&\267\277\035_\324\177\030\"\350\277\210\306@qH\r\361?\336\177\253\206\377\013\367?`\331$o\364\326\335?\r\224\0022n\322\320?\371\251)\230\035\265\344\277!w\373\345\307\004\314\277\343:\310\'X\341\375\277\232F\n\340\036\017\365\277s(2\236\nA\340\277\210\306@qH\r\361?\336\177\253\206\377\013\367?i\200\214\330\n9\376\277\200\314\'\331\2633\343?!w\373\345\307\004\314\277\322\225\215\016Q\r\310?\235n\250\332^o\321\277\227A2U\373\207\352\277\266k\014\362\241\034\303\277\235n\250\332^o\321\277\312y\300\330\266\204\001@H\233\361%\224\272\331?j\244\220\244\020\270\361\277\242z\231\236\007\360\001\300\334>\276\232\024\364\250?\r\224\0022n\322\320?gV\337\000\2039\352?/{(6\327\222\326\277\313\374\224\336\367\304\371\277\2302}\250\251\r\352?\344\324C\222\370\260\360\277\237x`\007Q8\323?Be\001\320\'\260\342?O\030\254\267\"\035\346?\243\270\251\363\225\330\351\277\336\177\253\206\377\013\367?R\321:\374\367h\264\277)\376m\244H0\352\277\202\200]\022\241\342\367\277\0055\262\371\202d\345\277\003@\024\004\310m\014\300\001\302\257\224\346\312\312?5\305)O\016\374\356\277\217\307n\273\266\273\217\277B\210\307?D\211\344\277\273\n\356\377\300S\357\277<\350F>\231M\326?Be\001\320\'\260\342?\310\341\234\263\301?\346\277\336\177\253\206\377\013\367?\177\307\313\302:O\342\277\324X\024R\\\220\345\277\336\177\253\206\377\013\367?G\004\343\335F\347\316?\030\330\300W\261)\314?\316:SyJ#\337\277\336\177\253\206\377\013\367?f\215\2663jq\355\277|\215+\342w/\374?\035_\324\177\030\"\350\277%\372W\001d\254\327?\371\251)\230\035\265\344\277\274\032\341\010\374s\341\277\376\375\203G-\264\314\277\006:\016\020\374H\346?Ls++\207\350\361?\237\353\t\354\365-\272?\340\013\2779W\375\350\277Ls++\207\350\361?ld\255\320Y\206\336?\311\276\326C\245f\344?[\313V\237\035\212\351?\253S-u\341b\331?\202\366\324\260;3\367\277\325q\201+\240\323\347?\274Y\346\242`\305\204\277\033\277\257\t\366\321\364?[\313V\237\035\212\351? \242\3560\344d\376\277\007\315\325\036x\251\000@\310\365\255v\214\236\347\277\r\224\0022n\322\320?\243\314\272\266`7\353\277[\313V\237\035\212\351?\251!S\302Y\334\324\277\311\322\347\006p\305\345?\227A2U\373\207\352\277\334>\276\232\024\364\250?\345\227.x7\332\305\277O\030\254\267\"\035\346?)\022\177g\023\217\353\277\237\353\t\354\365-\272?q\225j\217\216\340\005\300\313\204\016c\025\325\362\277H\341}\005\315l\335\277\035\207\366\005\256\337\352\277%\372W\001d\254\327?\263\252P\322\314I\364\277\0055\262\371\202d\345\277g~\001\207\030\367\354?\251!S\302Y\334\324\277\371\251)\230\035\265\344\277\225y\353XCz\364?\251!S\302Y\334\324\277^\031\010C\253\010\361\277r\030?\225\317 \356\277\336\177\253\206\377\013\367?Q\314\341\360\017\314\372\277\210\306@qH\r\361?\237\353\t\354\365-\272?%\372W\001d\254\327?\005I\303\274M\303\346\277\010\021\246\026\322*\305\277Hs\317\237\376\374\326?\227\031\020\317e\312\347\277\315\0221\363\264e\334\277<V\365\243g\275\334\277\357a\333\320\245\377\370\277\277I\352\366\374W\366\277Be\001\320\'\260\342?\001\302\257\224\346\312\312?\334>\276\232\024\364\250?\010\021\246\026\322*\305\277\322\314\000\237\004\237\363?\371^A\242k\036\340?\260\243ija#\342\277ld\255\320Y\206\336?\035s\345B\343\200\351\277\356\347\311\003\321\315\340?Ls++\207\350\361?\344\324C\222\370\260\360\277\277o\375\237Jv\361\277\2753N\342?\267\343?\232H\031\275f\256\374\277\341$,\023\233@\353?\226 \304*\2129\000\300\005I\303\274M\303\346\277\242\004\"\000m\237\002\300\024\357CI\351\367\372\277\r\224\0022n\322\320?\310\271z-,\202\343\277\201\375\\\202\215&\267\277\257kT\333\220E\355\277\035\207\366\005\256\337\352\277\334>\276\232\024\364\250?\r\224\0022n\322\320?Tq\303\024N_\277\277.\314\272\024\025\236s\277)\376m\244H0\352\277Ls++\207\350\361?\341$,\023\233@\353?sPT$\240\376\342\277\341$,\023\233@\353?\r\224\0022n\322\320?\350[Z\305\360\360\303?O\030\254\267\"\035\346?\317\321a\301\227\366\311\277\303\036\267\331\234\211\306\277Be\001\320\'\260\342?\206\200\271\235)\316\322\277\252\333\306\342 *\321?\350\361\354\337\231\333\255\277\336\177\253\206\377\013\367?~F\006\232A\256\001\300\265\324\375\251TI\330\277\267\266\223P\261T\327?5\017\223~\235#\000\300ld\255\320Y\206\336?\210@\326\311r\234\377?\310\271z-,\202\343\277\031G\255\031i?\324?\010\021\246\026\322*\305\277\033\323\300\314\3000\366?\322\314\000\237\004\237\363?*:\241\355\250L\356\277s\326\312Y\004\036\253\277\010\021\246\026\322*\305\277\0055\262\371\202d\345\277Be\001\320\'\260\342?XY\222\226j\226\260?\251!S\302Y\334\324\277[\313V\237\035\212\351?(\217\252a\322N\003\300\355\303\3057\313N\355?\305\342\342&V\240\304?\210@\326\311r\234\377?H\341}\005\315l\335\277s<Ca\325\237\341\277\r\224\0022n\322\320?\010\021\246\026\322*\305\277\213fe\347j]\344\277\202\010\327\226\276\362\360\277\355\366~\260\"H\341\277\302\366gMC;x?\224\335`\021[\013\372?%\372W\001d\254\327?;\006\261\227<B\327\277\312y\300\330\266\204\001@%E\241\216\270\241\274\277\010\021\246\026\322*\305\277\237\353\t\354\365-\272?\001\302\257\224\346\312\312?\035_\324\177\030\"\350\277\341\374\t\215\005\203\350?\013\325\321c\213A\303?Ls++\207\350\361?Y\210\3523\026\275\000\300\005\332\326\372\225\255\356?%E\241\216\270\241\274\277\334>\276\232\024\364\250?\265\324\375\251TI\330\277\000rk\210\273O\305?\360\375e\030\216n\363\277\337W7F.\304\001\300!w\373\345\307\004\314\277\365^I\271\026\331\314?ld\255\320Y\206\336?j\270\241g\333\026\363\277\'^I.&\340\366?<\300$\270\003\220\323?X&\326\022\202U\365?\310\252\305\200\332\007\343?\3007d\205$;\326\277\205X\227\027\224\020\320\277\316:SyJ#\337\277[\313V\237\035\212\351?\213W\260:\031\343\343?[\337gb\350\350\352?H\233\361%\224\272\331??:\026\234\266\n\375?\327\233.\003(\323\373\277\225y\353XCz\364?O\030\254\267\"\035\346?O\030\254\267\"\035\346?s(2\236\nA\340\277\253S-u\341b\331?g~\001\207\030\367\354?\341$,\023\233@\353?ld\255\320Y\206\336?\257kT\333\220E\355\277\357\353c2\013\257\371\277\021\300:[\350\023\346\277\002\347\000V\365\345\375?\265\324\375\251TI\330\277\317\321a\301\227\366\311\277\305\031V\267\t2\360?\333\204\014\251\222c\315\277-Q{^O\223\362\277\235\226\312`\364,\324\277!\262\3419\037\205\360\277-*\246\315\302q\317\277\336\177\253\206\377\013\367?\344^\314\363]`\361\2775\235\007\311x>\354\277Ls++\207\350\361?\316\314\244\023|\263\330?]k{\025@\332\374\277=8\213J\304\310\333?Cy\022\223\362\016\344?\350\361\354\337\231\333\255\277g~\001\207\030\367\354?<\350F>\231M\326?\325\205\222\356j2\351?ld\255\320Y\206\336?\355\257\264t\000\360\353?\007\315\325\036x\251\000@ld\255\320Y\206\336?\317\321a\301\227\366\311\277*:\241\355\250L\356\277E\241\260\2152o\360\277\374\236\016\032\006\034\375\277\253S-u\341b\331?\316:SyJ#\337\277\004\321\216\373\246]\002\300\235n\250\332^o\321\277QT[u-\334\363\277*J\224\366\343l\340\277\210@\326\311r\234\377?\031G\255\031i?\324?\274\013,\\\252\371\340?.\314\272\024\025\236s\277O\030\254\267\"\035\346?\"\240[\310Fh\320\277vC*\311@\306\363\277Be\001\320\'\260\342?\027\210|K\206\256\306?|\215+\342w/\374?\235n\250\332^o\321\277\237\353\t\354\365-\272?\374\234\377<\276|\365\277\035\207\366\005\256\337\352\277\322\314\000\237\004\237\363?p\332\200\372|\302\370?\207\205\264\034\000T\263?~\243\307\3664\320\356\277\207\205\264\034\000T\263?\236\276\354\346\211\352\326\277Be\001\320\'\260\342?\371b_\\\373\\\357?\325q\201+\240\323\347?s\365x%\263G\354?3\207k\264\273\235\371?B\210\307?D\211\344\277/{(6\327\222\326\277\311\276\326C\245f\344?s<Ca\325\237\341\277\336\177\253\206\377\013\367?#;\'3\201\033\312?#\310}N\334%\323\277\001\302\257\224\346\312\312?\301\207\250\221O\266\333\277ld\255\320Y\206\336?\325\205\222\356j2\351?\371\251)\230\035\265\344\277ld\255\320Y\206\336?A\223\305\337\312\262\264?\227A2U\373\207\352\277\007*\227{k\313\375\277\273\336\337\220\265*\001\300\334>\276\232\024\364\250?O\030\254\267\"\035\346?\305\031V\267\t2\360?\315\0221\363\264e\334\277\r\224\0022n\322\320?\2634\33132\371\364\277\215&\253\222\365_\002@\010\021\246\026\322*\305\277\366\317\340\265\342\347\364?\305\031V\267\t2\360?\031G\255\031i?\324?g~\001\207\030\367\354? \004U\014\264V\374\277\265\254\333#\277\213\325\277\334>\276\232\024\364\250?!<j\233\2044\361\277\350\361\354\337\231\333\255\2776\306g\253\367\241\340?$\252\023\36581\322?#\245\030vb\253\261\277\313\372\205\001\260%\362\277^\217\177\341EY\360\277\3324\310\234g\350\307\277N;r\'?\366\347\277\277]\373\271\307\266\367\277\301\207\250\221O\266\333\277\315\0221\363\264e\334\277\211%=5VJ\276?\020?u2\357r\005\300A&\263\036\260!\t\300[\313V\237\035\212\351?\227A2U\373\207\352\277\331\305\333\332\257\322\337\277\311\276\326C\245f\344?\334>\276\232\024\364\250?\235n\250\332^o\321\277\253S-u\341b\331?p\332\200\372|\302\370?\204k\342\353&\005\221?\371\251)\230\035\265\344\277\006\225\300\217\247\313\013@@^\032h\274\211\360?\350[Z\305\360\360\303?\371\251)\230\035\265\344\277 \004U\014\264V\374\277vC*\311@\306\363\277s<Ca\325\237\341\277\260)\177\010#\344\271\277\246]*\2001\r\376\277\305\223\353\0174\301\376?$\252\023\36581\322?\r\224\0022n\322\320?\301\207\250\221O\266\333\277\266\374\0370\352\006\333\2770]\276\3343\236\325?\206\200\271\235)\316\322\277\274B\003\217\2211\344\277\355\366~\260\"H\341\277\202\200]\022\241\342\367\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "$b\321\346\213\271\325?\2220y\310}\206\357\277\322\021\2222\347\326\353\277\217\265\334p#\310\340\277#\360\034\212\354\321\322\277\311\325\n\020l\"\367\277P\324\303\006\272w\344\277\361D\320\273\356\237\342\277,_C\324\'d\340?\217\265\334p#\310\340\277$b\321\346\213\271\325?\370\332R\341~m\377\277o\202\236\347\033\377\351\277\237\324\001\312HN\260\277\271~\235\037\273^\364\277P\324\303\006\272w\344\277\370_\266\211$\257\360\277\210\323PQ\275,\364?\322\021\2222\347\326\353\277\224\3566\037\363;\342?\271~\235\037\273^\364\277P\324\303\006\272w\344\277I\023\331;\231\201\376\277\322\021\2222\347\326\353\277\244-\353\265\0311\332\277\232*\276An\360\366?\270\0138J\220U\305?\2220y\310}\206\357\277#\360\034\212\354\321\322\277A\226U&\347\376x\277)e\376Z7\372\370\277\322\021\2222\347\326\353\277\231K_\226\263\225\375\2770\332\337+\202\"\357?I\3627\347S\334\367?P\324\303\006\272w\344\277\225\337\374.\246\211\000@\322\021\2222\347\326\353\277Ae\235\274~\345\306\277#\360\034\212\354\321\322\277\2446j\037WM\003@\221O\236!\243\014\277\277\010\267#z\325r\363\2771I\006v\275\264\314?7\233\312\366\242\030\365?,_C\324\'d\340?aL\322K\260\340\335\277P\r\036\265\211\353\345?)e\376Z7\372\370\277aL\322K\260\340\335\2779\274kK\350\275\373\277P\r\036\265\211\353\345?gC\352P\365\t\322?\2220y\310}\206\357\2770\241\205}\262\256\355\277Ae\235\274~\345\306\277\361D\320\273\356\237\342\277P\324\303\006\272w\344\277\005\306]j\"%\005@Y\357\251\324\357\206\362\277\244-\353\265\0311\332\277$b\321\346\213\271\325?#\360\034\212\354\321\322\277#\360\034\212\354\321\322\277\237\324\001\312HN\260\277\361D\320\273\356\237\342\277Ae\235\274~\345\306\277h\240\022\310\265c\375?aL\322K\260\340\335\277\361D\320\273\356\237\342\277h\240\022\310\265c\375?|\032\'\362I\303\003@,_C\324\'d\340?\221O\236!\243\014\277\277\234\237\237\022\271\030\335?\244-\353\265\0311\332\277aL\322K\260\340\335\277\033\2133\247~\353\001@\270\0138J\220U\305?\024\035\313Z\323\350\007@P\324\303\006\272w\344\277\362}*j\276\023\344?hF\027\305\240J\365\277\027\016\221j\2066\366\277\272\242k\350\253D\316\277P\r\036\265\211\353\345?\337\016\004 \203\201\326\277P\324\303\006\272w\344\277gC\352P\365\t\322?v|\343`\014i\361?\217\265\334p#\310\340\277\010\267#z\325r\363\277\315R\255Ld\327\002@\262c\267Q\205O\346\277\224\3566\037\363;\342?\337\016\004 \203\201\326\2770\241\205}\262\256\355\277\271~\235\037\273^\364\277\322\021\2222\347\326\353\277A\226U&\347\376x\277Y\357\251\324\357\206\362\277\244-\353\265\0311\332\277\234\237\237\022\271\030\335?0\332\337+\202\"\357?\362}*j\276\023\344?v|\343`\014i\361?\272\242k\350\253D\316\277=9\016\210\340r\007@P\324\303\006\272w\344\277\370_\266\211$\257\360\277\361D\320\273\356\237\342\277P\324\303\006\272w\344\277*D]\006\362T\362?\217\265\334p#\310\340\2771I\006v\275\264\314?7\233\312\366\242\030\365?\021\363\252\234P\'\350\2771I\006v\275\264\314?\247\'0/\n\233\361\277#\360\034\212\354\321\322\277\262c\267Q\205O\346\277Ae\235\274~\345\306\277\340\200\270|\"i\331?P\324\303\006\272w\344\277#\360\034\212\354\321\322\277A\226U&\347\376x\277v|\343`\014i\361?\247\'0/\n\233\361\277\270\0138J\220U\305?\331\013\327\253\327@\363?P\r\036\265\211\353\345?aL\322K\260\340\335\277\272\242k\350\253D\316\277$b\321\346\213\271\325?\322J\354\340\266J\355?\307\264i\273&}\360?L\220{x\2216\n@,_C\324\'d\340?\2446j\037WM\003@\337\016\004 \203\201\326\277\021\363\252\234P\'\350\277\221O\236!\243\014\277\277\244-\353\265\0311\332\277$b\321\346\213\271\325?\014,\005K \233\351?\244-\353\265\0311\332\277o\202\236\347\033\377\351\2770\332\337+\202\"\357?o\202\236\347\033\377\351\277\237\324\001\312HN\260\277\033Cn\312\327\\\252?\177\234\323<\306\354\273?aL\322K\260\340\335\2770\241\205}\262\256\355\277A\226U&\347\376x\277l\303\271\001\231\377\000@\262c\267Q\205O\346\277\247\201+2\037\264\371?$b\321\346\213\271\325?\350\203\345\360\315\251\374\277\365n\360yqa\002@\244-\353\265\0311\332\277\337\016\004 \203\201\326\277#\360\034\212\354\321\322\277\362}*j\276\023\344?\262c\267Q\205O\346\277Ae\235\274~\345\306\277hF\027\305\240J\365\277\362}*j\276\023\344?aL\322K\260\340\335\277\217\265\334p#\310\340\277\362}*j\276\023\344?\322J\354\340\266J\355?\271\330\230\"\320w\374?\272\242k\350\253D\316\277\275\373?\\\263\023\000@\225\337\374.\246\211\000@\322J\354\340\266J\355?\331\013\327\253\327@\363?\210\323PQ\275,\364?hF\027\305\240J\365\277\370_\266\211$\257\360\277P\324\303\006\272w\344\277\237\324\001\312HN\260\2770\241\205}\262\256\355\277\337\016\004 \203\201\326\277\272\242k\350\253D\316\277o\202\236\347\033\377\351\277D\247v\324\213u\001@\237\324\001\312HN\260\277\237\324\001\312HN\260\277\033Cn\312\327\\\252?hF\027\305\240J\365\277\340\200\270|\"i\331?\262c\267Q\205O\346\277\331\013\327\253\327@\363?\275\373?\\\263\023\000@v|\343`\014i\361?t\273\370\225\353r\353?\221O\236!\243\014\277\2771I\006v\275\264\314?\221O\236!\243\014\277\277o\202\236\347\033\377\351\277*D]\006\362T\362?o\202\236\347\033\377\351\277aL\322K\260\340\335\277aL\322K\260\340\335\2770\241\205}\262\256\355\277P\324\303\006\272w\344\277\177\234\323<\306\354\273?\334\251\032=\025\233\005@\361D\320\273\356\237\342\277\217\265\334p#\310\340\277P\324\303\006\272w\344\2771I\006v\275\264\314?VI\245\327\004\240\372?Ae\235\274~\345\306\277\271~\235\037\273^\364\277\262c\267Q\205O\346\277\270\0138J\220U\305?\221O\236!\243\014\277\277Ae\235\274~\345\306\277I\023\331;\231\201\376\277#\360\034\212\354\321\322\277aL\322K\260\340\335\277t\273\370\225\353r\353?P\324\303\006\272w\344\277|\032\'\362I\303\003@\210\323PQ\275,\364?VI\245\327\004\240\372?aL\322K\260\340\335\277-\342\240\227/\257\004@P\324\303\006\272w\344\277\271~\235\037\273^\364\277\272\242k\350\253D\316\277#\360\034\212\354\321\322\2777\233\312\366\242\030\365?\237\324\001\312HN\260\277\337\016\004 \203\201\326\277\247\'0/\n\233\361\277gC\352P\365\t\322?\370_\266\211$\257\360\277Ae\235\274~\345\306\277\234\237\237\022\271\030\335?0\332\337+\202\"\357?)e\376Z7\372\370\277Ae\235\274~\345\306\277\244-\353\265\0311\332\277\210\323PQ\275,\364?\337\016\004 \203\201\326\277\021\363\252\234P\'\350\277\244-\353\265\0311\332\277$b\321\346\213\271\325?\322J\354\340\266J\355?P\324\303\006\272w\344\277\234\237\237\022\271\030\335?\021\363\252\234P\'\350\277\177\234\323<\306\354\273?\217\265\334p#\310\340\277o\202\236\347\033\377\351\277Ae\235\274~\345\306\277\307\264i\273&}\360?o\202\236\347\033\377\351\277\272\242k\350\253D\316\277o\202\236\347\033\377\351\277\322\021\2222\347\326\353\277\270\0138J\220U\305?\256\234\021\000U\303\347?gC\352P\365\t\322?#\360\034\212\354\321\322\277\361D\320\273\356\237\342\277h\240\022\310\265c\375?1I\006v\275\264\314?\217\265\334p#\310\340\277\322\021\2222\347\326\353\277\361D\320\273\356\237\342\277#\360\034\212\354\321\322\2770\241\205}\262\256\355\277\2220y\310}\206\357\277\262c\267Q\205O\346\277\2220y\310}\206\357\277\033Cn\312\327\\\252?\021\363\252\234P\'\350\2770\241\205}\262\256\355\277\232*\276An\360\366?\262c\267Q\205O\346\277\217\265\334p#\310\340\277\2220y\310}\206\357\277#\360\034\212\354\321\322\277\337\016\004 \203\201\326\277\361D\320\273\356\237\342\277o\202\236\347\033\377\351\277\337\016\004 \203\201\326\277\2220y\310}\206\357\277gC\352P\365\t\322?#\360\034\212\354\321\322\2770\241\205}\262\256\355\277A\226U&\347\376x\277,_C\324\'d\340?)e\376Z7\372\370\277\010\267#z\325r\363\277\337\016\004 \203\201\326\277\262c\267Q\205O\346\277aL\322K\260\340\335\277,_C\324\'d\340?\237\324\001\312HN\260\2770\332\337+\202\"\357?\262c\267Q\205O\346\277\010\267#z\325r\363\277\033Cn\312\327\\\252?P\324\303\006\272w\344\277A\226U&\347\376x\277\270\0138J\220U\305?aL\322K\260\340\335\277#\360\034\212\354\321\322\277\234\237\237\022\271\030\335?\177\234\323<\306\354\273?\370_\266\211$\257\360\277\244-\353\265\0311\332\277-\342\240\227/\257\004@\361D\320\273\356\237\342\277\370_\266\211$\257\360\277\033Cn\312\327\\\252?o\202\236\347\033\377\351\277\217\265\334p#\310\340\277v|\343`\014i\361?1I\006v\275\264\314?\340\200\270|\"i\331?\311\325\n\020l\"\367\277\262c\267Q\205O\346\277\221O\236!\243\014\277\277#\360\034\212\354\321\322\277\262c\267Q\205O\346\277A\226U&\347\376x\277\270\0138J\220U\305?x\235\204\265Q\016\370\277\2220y\310}\206\357\2770\332\337+\202\"\357?1I\006v\275\264\314?\362}*j\276\023\344?\337\016\004 \203\201\326\277l\303\271\001\231\377\000@\337\016\004 \203\201\326\277\237\324\001\312HN\260\277\033Cn\312\327\\\252?\303\344D\000\271\324\010@\010\267#z\325r\363\277\361D\320\273\356\237\342\2770\332\337+\202\"\357?\033Cn\312\327\\\252?Ae\235\274~\345\306\277\014,\005K \233\351?\027\016\221j\2066\366\2777\233\312\366\242\030\365?\2220y\310}\206\357\277\235\310\001\323\253J\t@\271~\235\037\273^\364\277\370_\266\211$\257\360\277P\r\036\265\211\353\345?\272\242k\350\253D\316\277\234\237\237\022\271\030\335?\2220y\310}\206\357\277\346bD\234\210\004\366?\177\234\323<\306\354\273?\237\324\001\312HN\260\277aL\322K\260\340\335\277aL\322K\260\340\335\277\370_\266\211$\257\360\277\322\021\2222\347\326\353\277\221O\236!\243\014\277\277\361D\320\273\356\237\342\277#\360\034\212\354\321\322\277A\226U&\347\376x\277\177\234\323<\306\354\273?\315R\255Ld\327\002@|\032\'\362I\303\003@\010\267#z\325r\363\277\021\363\252\234P\'\350\277\361D\320\273\356\237\342\277\272\242k\350\253D\316\277P\324\303\006\272w\344\277\224\3566\037\363;\342?,_C\324\'d\340?Ae\235\274~\345\306\277A\226U&\347\376x\277P\324\303\006\272w\344\277\027h\214m\233O\376?\021\363\252\234P\'\350\277Ae\235\274~\345\306\277\221O\236!\243\014\277\277\021\363\252\234P\'\350\277\322\021\2222\347\326\353\277A\226U&\347\376x\277\362}*j\276\023\344?\234\237\237\022\271\030\335?\234\237\237\022\271\030\335?$b\321\346\213\271\325?\2220y\310}\206\357\277*D]\006\362T\362?Y\357\251\324\357\206\362\277\272\242k\350\253D\316\277Ae\235\274~\345\306\277\361D\320\273\356\237\342\277\021\363\252\234P\'\350\277P\r\036\265\211\353\345?Ae\235\274~\345\306\277\2220y\310}\206\357\2771I\006v\275\264\314?\010\267#z\325r\363\2770\241\205}\262\256\355\277\2446j\037WM\003@eUQ\265\355\374\006@\262c\267Q\205O\346\277\2446j\037WM\003@P\324\303\006\272w\344\2771I\006v\275\264\314?P\r\036\265\211\353\345?\237\324\001\312HN\260\2779\274kK\350\275\373\277\217\265\334p#\310\340\277gC\352P\365\t\322?)e\376Z7\372\370\277A\226U&\347\376x\277\256\234\021\000U\303\347?0\241\205}\262\256\355\277\224\3566\037\363;\342?\247\'0/\n\233\361\277P\324\303\006\272w\344\277\322\021\2222\347\326\353\277\210\364\361\245\002\322\372\277#\360\034\212\354\321\322\277\346bD\234\210\004\366?P\r\036\265\211\353\345?\340\200\270|\"i\331?\2446j\037WM\003@h\240\022\310\265c\375?\237\324\001\312HN\260\277\231K_\226\263\225\375\277\331\013\327\253\327@\363?\262c\267Q\205O\346\277\244-\353\265\0311\332\277\247\'0/\n\233\361\277\370_\266\211$\257\360\277\307\264i\273&}\360?\244-\353\265\0311\332\277A\226U&\347\376x\277\237\324\001\312HN\260\277\237\324\001\312HN\260\277\262c\267Q\205O\346\277hF\027\305\240J\365\277v|\343`\014i\361?\213q\224\342\372\206\006@\270\0138J\220U\305?\337\016\004 \203\201\326\277\370_\266\211$\257\360\277\272\242k\350\253D\316\277\2220y\310}\206\357\277l\303\271\001\231\377\000@o\202\236\347\033\377\351\277\361D\320\273\356\237\342\277\234\237\237\022\271\030\335?o\202\236\347\033\377\351\277#\360\034\212\354\321\322\277\322J\354\340\266J\355?\331\013\327\253\327@\363?\237\324\001\312HN\260\277\262c\267Q\205O\346\277gC\352P\365\t\322?P\324\303\006\272w\344\277\244-\353\265\0311\332\277\177\234\323<\306\354\273?\307/\006\023\201;\377?\256\234\021\000U\303\347?h\240\022\310\265c\375?0\332\337+\202\"\357?\217\265\334p#\310\340\277\262c\267Q\205O\346\277o\202\236\347\033\377\351\277aL\322K\260\340\335\277\322\021\2222\347\326\353\277\340\200\270|\"i\331?\231K_\226\263\225\375\277\027\016\221j\2066\366\277\224\3566\037\363;\342?\027h\214m\233O\376?#\360\034\212\354\321\322\277\331\013\327\253\327@\363?#\360\034\212\354\321\322\277\177\234\323<\306\354\273?gC\352P\365\t\322?\262c\267Q\205O\346\277\244-\353\265\0311\332\277\021\363\252\234P\'\350\277\021\363\252\234P\'\350\277\272\242k\350\253D\316\277\322J\354\340\266J\355?\027h\214m\233O\376?\014,\005K \233\351?\244-\353\265\0311\332\277\021\363\252\234P\'\350\277\247\'0/\n\233\361\277\234\237\237\022\271\030\335?0\241\205}\262\256\355\277\322\021\2222\347\326\353\277\322J\354\340\266J\355?\262c\267Q\205O\346\2777\233\312\366\242\030\365?v|\343`\014i\361?\010\267#z\325r\363\277A\226U&\347\376x\277\362}*j\276\023\344?\217\265\334p#\310\340\277o\202\236\347\033\377\351\277$b\321\346\213\271\325?\221O\236!\243\014\277\277v|\343`\014i\361?\237\324\001\312HN\260\277\247\'0/\n\233\361\277Ae\235\274~\345\306\277#\360\034\212\354\321\322\277\361D\320\273\356\237\342\277\225\337\374.\246\211\000@\244-\353\265\0311\332\277P\324\303\006\272w\344\2771I\006v\275\264\314?A\226U&\347\376x\277h\240\022\310\265c\375?\232*\276An\360\366?7\233\312\366\242\030\365?\340\200\270|\"i\331?\221O\236!\243\014\277\277\247\'0/\n\233\361\277\274v\334\263\r\322\016@0\241\205}\262\256\355\277o\202\236\347\033\377\351\277\2220y\310}\206\357\277\217\265\334p#\310\340\277\021\363\252\234P\'\350\277\370\271\261\2149\310\370?\005\031\340\350\227\030\001\300\270\0138J\220U\305?\021\363\252\234P\'\350\277aL\322K\260\340\335\277\014,\005K \233\351?\307\264i\273&}\360?\337\016\004 \203\201\326\277\010\267#z\325r\363\277\372t\306\350\345\217\020@VI\245\327\004\240\372?\244-\353\265\0311\332\277\361D\320\273\356\237\342\277Ae\235\274~\345\306\277\244-\353\265\0311\332\277\361D\320\273\356\237\342\277\225\337\374.\246\211\000@l\303\271\001\231\377\000@\2220y\310}\206\357\277|\032\'\362I\303\003@Ae\235\274~\345\306\277aL\322K\260\340\335\277\244-\353\265\0311\332\277\244-\353\265\0311\332\277\217\265\334p#\310\340\277\237\324\001\312HN\260\277\2446j\037WM\003@eUQ\265\355\374\006@\331\013\327\253\327@\363?\021\363\252\234P\'\350\277o\202\236\347\033\377\351\277$b\321\346\213\271\325?\337\016\004 \203\201\326\277$b\321\346\213\271\325?)e\376Z7\372\370\277\272\242k\350\253D\316\277\337\016\004 \203\201\326\277aL\322K\260\340\335\277\340\200\270|\"i\331?\027\016\221j\2066\366\2770\241\205}\262\256\355\277t\273\370\225\353r\353?t\273\370\225\353r\353?\337\016\004 \203\201\326\277P\r\036\265\211\353\345?9\274kK\350\275\373\277\361D\320\273\356\237\342\277\224\3566\037\363;\342?A\226U&\347\376x\277gC\352P\365\t\322?\270\0138J\220U\305?0\241\205}\262\256\355\277\331\013\327\253\327@\363?\262c\267Q\205O\346\2771I\006v\275\264\314?\307/\006\023\201;\377?\021\363\252\234P\'\350\277\224\3566\037\363;\342?\n\021\037}\352\213\373?\033Cn\312\327\\\252?\021\363\252\234P\'\350\277$b\321\346\213\271\325?aL\322K\260\340\335\277\262c\267Q\205O\346\277\362}*j\276\023\344?-\342\240\227/\257\004@\256\234\021\000U\303\347?\010\267#z\325r\363\277#\360\034\212\354\321\322\277#\360\034\212\354\321\322\277gC\352P\365\t\322?\177\234\323<\306\354\273?#\360\034\212\354\321\322\277$b\321\346\213\271\325?\237\324\001\312HN\260\277\224\3566\037\363;\342?\340\200\270|\"i\331?\362}*j\276\023\344?Ae\235\274~\345\306\277\021\363\252\234P\'\350\277)e\376Z7\372\370\277Y\357\251\324\357\206\362\277P\324\303\006\272w\344\277gC\352P\365\t\322?\365n\360yqa\002@)e\376Z7\372\370\2770\241\205}\262\256\355\277o\202\236\347\033\377\351\277#\360\034\212\354\321\322\277\021\363\252\234P\'\350\277\217\265\334p#\310\340\277$b\321\346\213\271\325?\337\016\004 \203\201\326\277\262c\267Q\205O\346\277\272\242k\350\253D\316\277\256\234\021\000U\303\347?\362}*j\276\023\344?\021\363\252\234P\'\350\277\244-\353\265\0311\332\277\256\234\021\000U\303\347?v|\343`\014i\361?\362}*j\276\023\344?gC\352P\365\t\322?\361D\320\273\356\237\342\277\262c\267Q\205O\346\277\224\3566\037\363;\342?\217\265\334p#\310\340\2770\332\337+\202\"\357?aL\322K\260\340\335\277\021\363\252\234P\'\350\277$b\321\346\213\271\325?\177\234\323<\306\354\273?\361D\320\273\356\237\342\2777\233\312\366\242\030\365?\217\265\334p#\310\340\277\337\016\004 \203\201\326\277\322\021\2222\347\326\353\277\221O\236!\243\014\277\277\272\242k\350\253D\316\277o\202\236\347\033\377\351\277P\324\303\006\272w\344\277\021\363\252\234P\'\350\277\247\'0/\n\233\361\2770\241\205}\262\256\355\277\232*\276An\360\366?v|\343`\014i\361?\337\016\004 \203\201\326\277\322\021\2222\347\326\353\277v|\343`\014i\361?\221O\236!\243\014\277\277\234\237\237\022\271\030\335?,_C\324\'d\340?\237\324\001\312HN\260\277\340\200\270|\"i\331?o\202\236\347\033\377\351\277\331\013\327\253\327@\363?\224\3566\037\363;\342?\027\016\221j\2066\366\277\021\363\252\234P\'\350\277\021\363\252\234P\'\350\277#\360\034\212\354\321\322\277\256\234\021\000U\303\347?$b\321\346\213\271\325?\014,\005K \233\351?\237\324\001\312HN\260\277\224\3566\037\363;\342?\340\200\270|\"i\331?Ae\235\274~\345\306\277\2220y\310}\206\357\2770\241\205}\262\256\355\277#\360\034\212\354\321\322\277\337\016\004 \203\201\326\277A\226U&\347\376x\277\272\242k\350\253D\316\277*D]\006\362T\362?\237\324\001\312HN\260\277\270\0138J\220U\305?\346bD\234\210\004\366?P\324\303\006\272w\344\277\217\265\334p#\310\340\277#\360\034\212\354\321\322\277\234\237\237\022\271\030\335?\247\'0/\n\233\361\277\027\016\221j\2066\366\277\256\234\021\000U\303\347?o\202\236\347\033\377\351\277\346bD\234\210\004\366?o\202\236\347\033\377\351\277\027h\214m\233O\376?\272\242k\350\253D\316\277\340\200\270|\"i\331?1I\006v\275\264\314?o\202\236\347\033\377\351\277S\376\343\304<9\004@\247\201+2\037\264\371?\361D\320\273\356\237\342\277\271~\235\037\273^\364\277\337\016\004 \203\201\326\277o\202\236\347\033\377\351\277\010\267#z\325r\363\277\361D\320\273\356\237\342\277\340\200\270|\"i\331?$b\321\346\213\271\325?\262c\267Q\205O\346\277\262c\267Q\205O\346\277\337\016\004 \203\201\326\277\244-\353\265\0311\332\277#\360\034\212\354\321\322\277\270\0138J\220U\305?\307\264i\273&}\360?Ae\235\274~\345\306\277\325;\262\360i\230\013@P\324\303\006\272w\344\277\271~\235\037\273^\364\277\262c\267Q\205O\346\277\337\016\004 \203\201\326\277\021\363\252\234P\'\350\277\322\021\2222\347\326\353\277\177\234\323<\306\354\273?)e\376Z7\372\370\277gC\352P\365\t\322?\021\363\252\234P\'\350\277\272\242k\350\253D\316\277A\226U&\347\376x\277\021\363\252\234P\'\350\277\2220y\310}\206\357\277*D]\006\362T\362?\221O\236!\243\014\277\277\177\234\323<\306\354\273?\033Cn\312\327\\\252?gC\352P\365\t\322?Ae\235\274~\345\306\277gC\352P\365\t\322?\337\016\004 \203\201\326\277Ae\235\274~\345\306\277gC\352P\365\t\322?\262c\267Q\205O\346\277\217\265\334p#\310\340\277\217\265\334p#\310\340\277\370_\266\211$\257\360\277A\226U&\347\376x\277P\324\303\006\272w\344\277\322\021\2222\347\326\353\2770\332\337+\202\"\357?\244-\353\265\0311\332\277P\r\036\265\211\353\345?\244-\353\265\0311\332\277\234\237\237\022\271\030\335?aL\322K\260\340\335\277\225\337\374.\246\211\000@\322\021\2222\347\326\353\277\307\264i\273&}\360?\244-\353\265\0311\332\277\272\242k\350\253D\316\277\2220y\310}\206\357\277\033Cn\312\327\\\252?P\r\036\265\211\353\345?\361D\320\273\356\237\342\277#\360\034\212\354\321\322\277,_C\324\'d\340?v|\343`\014i\361?0\332\337+\202\"\357?\244-\353\265\0311\332\277\262c\267Q\205O\346\277x\235\204\265Q\016\370\277\027h\214m\233O\376?0\241\205}\262\256\355\2770\332\337+\202\"\357?*D]\006\362T\362?\272\242k\350\253D\316\277\271\330\230\"\320w\374?\244-\353\265\0311\332\277\337\016\004 \203\201\326\277\270\0138J\220U\305?\340\200\270|\"i\331?\361D\320\273\356\237\342\277\210\323PQ\275,\364?\234\237\237\022\271\030\335?\244-\353\265\0311\332\277\337\016\004 \203\201\326\277l\303\271\001\231\377\000@\262c\267Q\205O\346\277\272\242k\350\253D\316\277\350\203\345\360\315\251\374\2770\332\337+\202\"\357?0\332\337+\202\"\357?\247\'0/\n\233\361\277#\360\034\212\354\321\322\277\177\234\323<\306\354\273?P\324\303\006\272w\344\2777\233\312\366\242\030\365?\021\363\252\234P\'\350\277\2220y\310}\206\357\277\210\323PQ\275,\364?\217\265\334p#\310\340\277\271~\235\037\273^\364\277\234\237\237\022\271\030\335?\315R\255Ld\327\002@\271~\235\037\273^\364\2777\233\312\366\242\030\365?\021\363\252\234P\'\350\277\217\265\334p#\310\340\277\322\021\2222\347\326\353\277\244-\353\265\0311\332\277\224\3566\037\363;\342?Ae\235\274~\345\306\277\021\363\252\234P\'\350\277P\324\303\006\272w\344\277Y\357\251\324\357\206\362\277\272\242k\350\253D\316\277\027h\214m\233O\376?\244-\353\265\0311\332\277\2220y\310}\206\357\277#\360\034\212\354\321\322\277\331\013\327\253\327@\363?\361D\320\273\356\237\342\277\021\363\252\234P\'\350\277gC\352P\365\t\322?o\202\236\347\033\377\351\277\340\200\270|\"i\331?,_C\324\'d\340?aL\322K\260\340\335\277hF\027\305\240J\365\277\232*\276An\360\366?\271~\235\037\273^\364\277\340\200\270|\"i\331?hF\027\305\240J\365\277aL\322K\260\340\335\277hF\027\305\240J\365\277P\324\303\006\272w\344\277P\324\303\006\272w\344\277\370_\266\211$\257\360\277\2220y\310}\206\357\277P\324\303\006\272w\344\277\361D\320\273\356\237\342\277P\324\303\006\272w\344\277Ae\235\274~\345\306\2770\241\205}\262\256\355\277\361D\320\273\356\237\342\277o\202\236\347\033\377\351\277\307\264i\273&}\360?A\226U&\347\376x\277\021\363\252\234P\'\350\277aL\322K\260\340\335\277\272\242k\350\253D\316\277\370\271\261\2149\310\370?\177\234\323<\306\354\273?\271~\235\037\273^\364\277\322J\354\340\266J\355?aL\322K\260\340\335\277gC\352P\365\t\322?\027\016\221j\2066\366\277\361D\320\273\356\237\342\277\331\013\327\253\327@\363?)e\376Z7\372\370\277P\324\303\006\272w\344\277$b\321\346\213\271\325?\247\'0/\n\233\361\277\262c\267Q\205O\346\277l\303\271\001\231\377\000@aL\322K\260\340\335\277\247\201+2\037\264\371?aL\322K\260\340\335\277VI\245\327\004\240\372?\340\200\270|\"i\331?P\324\303\006\272w\344\277\247\'0/\n\233\361\277\272\242k\350\253D\316\277\272\242k\350\253D\316\277\340\200\270|\"i\331?o\202\236\347\033\377\351\277#\360\034\212\354\321\322\277A\226U&\347\376x\277Y\357\251\324\357\206\362\277o\202\236\347\033\377\351\277gC\352P\365\t\322?\225\337\374.\246\211\000@\014,\005K \233\351?P\324\303\006\272w\344\277aL\322K\260\340\335\277#\360\034\212\354\321\322\277\234\237\237\022\271\030\335?\237\324\001\312HN\260\277\217\265\334p#\310\340\277\361D\320\273\356\237\342\277\224\3566\037\363;\342?#\360\034\212\354\321\322\277\033Cn\312\327\\\252?\027h\214m\233O\376?\033Cn\312\327\\\252?$b\321\346\213\271\325?\033\2133\247~\353\001@\244-\353\265\0311\332\277\322\021\2222\347\326\353\277\262c\267Q\205O\346\277,_C\324\'d\340?\225\337\374.\246\211\000@\322\021\2222\347\326\353\277\232*\276An\360\366?A\226U&\347\376x\277#\360\034\212\354\321\322\277#\360\034\212\354\321\322\277\217\265\334p#\310\340\277\2220y\310}\206\357\277)e\376Z7\372\370\277\322J\354\340\266J\355?\217\265\334p#\310\340\277\331\013\327\253\327@\363?hF\027\305\240J\365\277aL\322K\260\340\335\277\361D\320\273\356\237\342\277\225\337\374.\246\211\000@\270\0138J\220U\305?\021\363\252\234P\'\350\277\237\324\001\312HN\260\277aL\322K\260\340\335\277P\r\036\265\211\353\345?o\202\236\347\033\377\351\277\237\324\001\312HN\260\277\2220y\310}\206\357\277\247\201+2\037\264\371?\021\363\252\234P\'\350\277\322J\354\340\266J\355?\270\0138J\220U\305?A\226U&\347\376x\277\234\237\237\022\271\030\335?\270\0138J\220U\305?A\226U&\347\376x\277A\226U&\347\376x\277\237\324\001\312HN\260\277hF\027\305\240J\365\277\337\016\004 \203\201\326\277\221O\236!\243\014\277\277I\3627\347S\334\367?P\324\303\006\272w\344\277\010\267#z\325r\363\277\346bD\234\210\004\366?aL\322K\260\340\335\277Ae\235\274~\345\306\277\244-\353\265\0311\332\277\340\200\270|\"i\331?Ae\235\274~\345\306\277\225\337\374.\246\211\000@1I\006v\275\264\314?\237\324\001\312HN\260\277\n\021\037}\352\213\373?P\324\303\006\272w\344\2770\241\205}\262\256\355\277\322J\354\340\266J\355?,_C\324\'d\340?\217\265\334p#\310\340\2770\332\337+\202\"\357?\247\201+2\037\264\371?gC\352P\365\t\322?Ae\235\274~\345\306\277\307\264i\273&}\360?0\332\337+\202\"\357?7\233\312\366\242\030\365?\021\363\252\234P\'\350\277aL\322K\260\340\335\277\021\363\252\234P\'\350\277\361D\320\273\356\237\342\277\033Cn\312\327\\\252?\361D\320\273\356\237\342\277\262c\267Q\205O\346\277\322\021\2222\347\326\353\277P\324\303\006\272w\344\277Ae\235\274~\345\306\277\365n\360yqa\002@Ae\235\274~\345\306\277\331\013\327\253\327@\363?\270\0138J\220U\305?t\273\370\225\353r\353?1I\006v\275\264\314?#\360\034\212\354\321\322\277\237\324\001\312HN\260\277\027h\214m\233O\376?S\376\343\304<9\004@Ae\235\274~\345\306\277\177\234\323<\306\354\273?\262c\267Q\205O\346\277\262c\267Q\205O\346\277t\273\370\225\353r\353?\331\013\327\253\327@\363?Ae\235\274~\345\306\277\322\021\2222\347\326\353\277\262c\267Q\205O\346\277\270\0138J\220U\305?\237\324\001\312HN\260\277\221O\236!\243\014\277\277#\360\034\212\354\321\322\277\027h\214m\233O\376?\2446j\037WM\003@\370_\266\211$\257\360\277aL\322K\260\340\335\277\237\324\001\312HN\260\277\340\200\270|\"i\331?*D]\006\362T\362?\322J\354\340\266J\355?\337\016\004 \203\201\326\277\322\021\2222\347\326\353\277\322J\354\340\266J\355?,_C\324\'d\340?\232*\276An\360\366?\370_\266\211$\257\360\277\252<@\216\313{\021@\272\242k\350\253D\316\277\270\0138J\220U\305?P\324\303\006\272w\344\277\350\203\345\360\315\251\374\277\221O\236!\243\014\277\277,_C\324\'d\340?\247\201+2\037\264\371?Ae\235\274~\345\306\277\221O\236!\243\014\277\277A\226U&\347\376x\277t\273\370\225\353r\353?P\324\303\006\272w\344\277aL\322K\260\340\335\277$b\321\346\213\271\325?\237\324\001\312HN\260\277\340\200\270|\"i\331?9\274kK\350\275\373\277\262c\267Q\205O\346\277\272\242k\350\253D\316\277t\273\370\225\353r\353?\272\242k\350\253D\316\277\361D\320\273\356\237\342\277A\226U&\347\376x\277gC\352P\365\t\322?\247\'0/\n\233\361\2770\241\205}\262\256\355\277\2220y\310}\206\357\277\307\264i\273&}\360?gC\352P\365\t\322?\237\324\001\312HN\260\277\361D\320\273\356\237\342\277\244-\353\265\0311\332\277I\023\331;\231\201\376\277I\023\331;\231\201\376\277\234\237\237\022\271\030\335?\234\237\237\022\271\030\335?\244-\353\265\0311\332\277\370\271\261\2149\310\370?\177\234\323<\306\354\273?\021\363\252\234P\'\350\2771I\006v\275\264\314?\256\234\021\000U\303\347?\346bD\234\210\004\366?\271~\235\037\273^\364\277\346\346$R\337\312\020@t\273\370\225\353r\353?\033Cn\312\327\\\252?\262c\267Q\205O\346\277\247\'0/\n\233\361\277\311\325\n\020l\"\367\277\337\016\004 \203\201\326\277\234\237\237\022\271\030\335?,5#\026\245\242\000\300h\240\022\310\265c\375?\247\'0/\n\233\361\277\221O\236!\243\014\277\277\272\242k\350\253D\316\277aL\322K\260\340\335\277\n\021\037}\352\213\373?\217\265\334p#\310\340\277\322\021\2222\347\326\353\277$b\321\346\213\271\325?\234\237\237\022\271\030\335?"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "\335\247\277l\362\333\327\277Vn\004\373\2164\307\277rT\361\301\034\322\311?\335\247\277l\362\333\327\277\177\307g\245\343 \273?\300\010U\350\334\300\363\277\231S\032\377\303\234\365?H\214\376\255\316\016\342\277H\214\376\255\316\016\342\277rT\361\301\034\322\311?\315\240l\341\016@\353\277\3310g7n\354\204?\316\305\271\0372\266\342?\223\254\205,r\260\360\277\'~X\227\007\327\350?H\214\376\255\316\016\342\277\241D\235%\244/\350\277\372\374;\235yP\356\277\3310g7n\354\204?\372\374;\235yP\356\277\372\374;\235yP\356\277Vn\004\373\2164\307\277\306\257\351\272.\255\370?rT\361\301\034\322\311?D\323\324\307\216K\337?\222b\227\330\343\t\323?\241D\235%\244/\350\277\272\212\337\373+\365\023@\223\254\205,r\260\360\277\372\374;\235yP\356\277\3310g7n\354\204?rT\361\301\034\322\311?rT\361\301\034\322\311?\204\357 \365\034\273\321\277\372\374;\235yP\356\277\177\307g\245\343 \273?\315\240l\341\016@\353\277\251Zm\212\2478\362\277T\332\'Sr\347\353?\257\001\002]\371$\367?T\332\'Sr\347\353?\223\254\205,r\260\360\277\222b\227\330\343\t\323?\037h\2102\004\316\376?\372\374;\235yP\356\277\306\257\351\272.\255\370?\363\013\271v\231\275\373?\372\374;\235yP\356\277\177\307g\245\343 \273?\316\305\271\0372\266\342?\315\240l\341\016@\353\277\257\001\002]\371$\367?H\214\376\255\316\016\342\277\315\240l\341\016@\353\277\037h\2102\004\316\376?\223\254\205,r\260\360\277\257\001\002]\371$\367?\204\357 \365\034\273\321\277\223\254\205,r\260\360\277I\373\215\027\310\345\265\277\2006\367\016\335\367\356?\300\010U\350\334\300\363\277\373!\211\333\234\306\345?rT\361\301\034\322\311?\223\254\205,r\260\360\277\257\001\002]\371$\367?\223\254\205,r\260\360\277H\214\376\255\316\016\342\277\241D\235%\244/\350\277H\214\376\255\316\016\342\277Vn\004\373\2164\307\277\222b\227\330\343\t\323?\223\254\205,r\260\360\277\251Zm\212\2478\362\277\354d$\244G\321\366\277T\332\'Sr\347\353?rT\361\301\034\322\311?\222b\227\330\343\t\323?\257\001\002]\371$\367?\373!\211\333\234\306\345?\335\247\277l\362\333\327\277H\214\376\255\316\016\342\277rT\361\301\034\322\311?\3310g7n\354\204?&\342+w7\357\000@rT\361\301\034\322\311?I\373\215\027\310\345\265\277\204\357 \365\034\273\321\2771\271\037&R\263\001@H\214\376\255\316\016\342\277\222b\227\330\343\t\323?\306\257\351\272.\255\370?m\367JCY\214\362?\177\307g\245\343 \273?\372\374;\235yP\356\277I\373\215\027\310\345\265\277rT\361\301\034\322\311?\3310g7n\354\204?\241D\235%\244/\350\277\177\307g\245\343 \273?I\373\215\027\310\345\265\277D\323\324\307\216K\337?\300\010U\350\334\300\363\277I\373\215\027\310\345\265\277\300\010U\350\334\300\363\277\343)]\025\375\364\r@\177\307g\245\343 \273?\372\374;\235yP\356\277H\214\376\255\316\016\342\277\203\2452\241\216\024\364?\177\307g\245\343 \273?I\373\215\027\310\345\265\277\372\374;\235yP\356\277\335\247\277l\362\333\327\277t\350\315i9\037\345\277\315\240l\341\016@\353\277\204\357 \365\034\273\321\277\373!\211\333\234\306\345?6`^\344\307\374\335\277Vn\004\373\2164\307\277VIc\345#\004\361?\222b\227\330\343\t\323?\372\374;\235yP\356\277Gg\007\204\207;\003@\372\374;\235yP\356\2776`^\344\307\374\335\277Vn\004\373\2164\307\277\372\374;\235yP\356\277\3310g7n\354\204?\363\013\271v\231\275\373?Vn\004\373\2164\307\277\'~X\227\007\327\350?\241D\235%\244/\350\277\223\254\205,r\260\360\277\300\010U\350\334\300\363\277t\350\315i9\037\345\277\372\374;\235yP\356\277rT\361\301\034\322\311?\372\374;\235yP\356\277\373!\211\333\234\306\345?\241D\235%\244/\350\277\306\257\351\272.\255\370?\223\254\205,r\260\360\277\302\244\201\010\255\250\013@\316\305\271\0372\266\342?\315\240l\341\016@\353\277\204\357 \365\034\273\321\277\241D\235%\244/\350\277\241D\235%\244/\350\277^\025\357\341\274\303\004@\251Zm\212\2478\362\277\300\010U\350\334\300\363\277\177\307g\245\343 \273?I\373\215\027\310\345\265\277\'~X\227\007\327\350?\335\247\277l\362\333\327\277m\367JCY\214\362?\372\374;\235yP\356\277\372\374;\235yP\356\277I\373\215\027\310\345\265\277\223\254\205,r\260\360\277\315\240l\341\016@\353\277\222b\227\330\343\t\323?\300\010U\350\334\300\363\277t\350\315i9\037\345\277\335\247\277l\362\333\327\277\335\247\277l\362\333\327\277\372\374;\235yP\356\277\223\254\205,r\260\360\277\231S\032\377\303\234\365?\2006\367\016\335\367\356?\372\374;\235yP\356\277\372\374;\235yP\356\277\372\374;\235yP\356\2776`^\344\307\374\335\277\223\254\205,r\260\360\277\372\374;\235yP\356\277t\350\315i9\037\345\277\203\2452\241\216\024\364?Vn\004\373\2164\307\277t\350\315i9\037\345\277\231S\032\377\303\234\365?\204\357 \365\034\273\321\2776`^\344\307\374\335\277\037h\2102\004\316\376?\222b\227\330\343\t\323?\223\254\205,r\260\360\277Vn\004\373\2164\307\277I\373\215\027\310\345\265\277H\214\376\255\316\016\342\277\3310g7n\354\204?6`^\344\307\374\335\277\204\357 \365\034\273\321\277\223\254\205,r\260\360\277\315\240l\341\016@\353\2776`^\344\307\374\335\277\330Rif\3420\r@6`^\344\307\374\335\277\241D\235%\244/\350\277\335\247\277l\362\333\327\277\306\257\351\272.\255\370?t\350\315i9\037\345\277<\220\023\325lw\002@\223\254\205,r\260\360\277\204\357 \365\034\273\321\277\'~X\227\007\327\350?T\332\'Sr\347\353?\177\307g\245\343 \273?\251Zm\212\2478\362\277\306\257\351\272.\255\370?\372\374;\235yP\356\277D\323\324\307\216K\337?\177\307g\245\343 \273?\363\013\271v\231\275\373?H\214\376\255\316\016\342\277\177\307g\245\343 \273?6`^\344\307\374\335\277\204\357 \365\034\273\321\277\353\0326P\271*\331?\177\307g\245\343 \273?\335]\321\030d5\372?\3310g7n\354\204?\203\2452\241\216\024\364?D\323\324\307\216K\337?Vn\004\373\2164\307\277I\373\215\027\310\345\265\277\223\254\205,r\260\360\277H\214\376\255\316\016\342\277\372\374;\235yP\356\277\372\374;\235yP\356\277\372\374;\235yP\356\277\315\240l\341\016@\353\277\315\240l\341\016@\353\277rT\361\301\034\322\311?I\373\215\027\310\345\265\277\335\247\277l\362\333\327\277\372\374;\235yP\356\277\372\374;\235yP\356\277I\373\215\027\310\345\265\277VIc\345#\004\361?\353\0326P\271*\331?t\350\315i9\037\345\277m\367JCY\214\362?6`^\344\307\374\335\277Vn\004\373\2164\307\277\223\254\205,r\260\360\277\3310g7n\354\204?\372\374;\235yP\356\277t\350\315i9\037\345\277\177\307g\245\343 \273?\251Zm\212\2478\362\277\177\307g\245\343 \273?\223\254\205,r\260\360\277\257\001\002]\371$\367?rT\361\301\034\322\311?\204\357 \365\034\273\321\277VIc\345#\004\361?\372\374;\235yP\356\277\222b\227\330\343\t\323?\306\257\351\272.\255\370?6`^\344\307\374\335\2776`^\344\307\374\335\277rT\361\301\034\322\311?D\323\324\307\216K\337?\315\240l\341\016@\353\277I\373\215\027\310\345\265\277\231S\032\377\303\234\365?\177\307g\245\343 \273?\'~X\227\007\327\350?I\373\215\027\310\345\265\277I\373\215\027\310\345\265\277\203\2452\241\216\024\364?\'~X\227\007\327\350?\363\013\271v\231\275\373?\204\357 \365\034\273\321\277\372\374;\235yP\356\277\241D\235%\244/\350\277\177\307g\245\343 \273?D\323\324\307\216K\337?rT\361\301\034\322\311?t\350\315i9\037\345\277\372\374;\235yP\356\277I\373\215\027\310\345\265\277rT\361\301\034\322\311?\223\254\205,r\260\360\277Vn\004\373\2164\307\2776`^\344\307\374\335\277\241D\235%\244/\350\277\315\240l\341\016@\353\277\222b\227\330\343\t\323?t\350\315i9\037\345\277\372\374;\235yP\356\277m\367JCY\214\362?\177\307g\245\343 \273?\3310g7n\354\204?6`^\344\307\374\335\277\335\247\277l\362\333\327\277\177\307g\245\343 \273?\335\247\277l\362\333\327\277\335\247\277l\362\333\327\277Vn\004\373\2164\307\277\372\374;\235yP\356\277\222b\227\330\343\t\323?\251Zm\212\2478\362\277\335\247\277l\362\333\327\277H\214\376\255\316\016\342\277\204\357 \365\034\273\321\277\353\0326P\271*\331?\251Zm\212\2478\362\277\251Zm\212\2478\362\277\251Zm\212\2478\362\2776`^\344\307\374\335\277\335\247\277l\362\333\327\277H\214\376\255\316\016\342\277\372\374;\235yP\356\277\373!\211\333\234\306\345?\223\254\205,r\260\360\277t\350\315i9\037\345\277\372\374;\235yP\356\277t\350\315i9\037\345\277\300\010U\350\334\300\363\2776`^\344\307\374\335\277Vn\004\373\2164\307\277H\214\376\255\316\016\342\277rT\361\301\034\322\311?\251Zm\212\2478\362\277\315\240l\341\016@\353\277\372\374;\235yP\356\277I\373\215\027\310\345\265\277D\323\324\307\216K\337?rT\361\301\034\322\311?\2006\367\016\335\367\356?\203\2452\241\216\024\364?6`^\344\307\374\335\277\353\0326P\271*\331?6`^\344\307\374\335\277\372\374;\235yP\356\277t\350\315i9\037\345\277\204\357 \365\034\273\321\277Vn\004\373\2164\307\277t\350\315i9\037\345\277T\332\'Sr\347\353?\241D\235%\244/\350\277\257\001\002]\371$\367?H\214\376\255\316\016\342\277\177\307g\245\343 \273?I\373\215\027\310\345\265\277H\214\376\255\316\016\342\277\251Zm\212\2478\362\277Vn\004\373\2164\307\277\316\305\271\0372\266\342?\335\247\277l\362\333\327\277\300\010U\350\334\300\363\277\363\013\271v\231\275\373?\033\0138\310\034+\000@\372\374;\235yP\356\277\223\254\205,r\260\360\277\335\247\277l\362\333\327\277\372\374;\235yP\356\277I\373\215\027\310\345\265\277\335\247\277l\362\333\327\277\204\357 \365\034\273\321\277\177\307g\245\343 \273?t\303\326?\362K\006@\241D\235%\244/\350\277\203\2452\241\216\024\364?\203\2452\241\216\024\364?\373!\211\333\234\306\345?Vn\004\373\2164\307\277\335\247\277l\362\333\327\277\251Zm\212\2478\362\277\300\010U\350\334\300\363\277t\350\315i9\037\345\277\363\013\271v\231\275\373?\222b\227\330\343\t\323?\241D\235%\244/\350\277\306\257\351\272.\255\370?H\214\376\255\316\016\342\277\3310g7n\354\204?R>\3732\242\377\003@\2006\367\016\335\367\356?\363\013\271v\231\275\373?\373!\211\333\234\306\345?\335\247\277l\362\333\327\277\372\374;\235yP\356\277^\025\357\341\274\303\004@T\332\'Sr\347\353?\'~X\227\007\327\350?\204\357 \365\034\273\321\277T\332\'Sr\347\353?\204\357 \365\034\273\321\2776`^\344\307\374\335\277\'~X\227\007\327\350?\204\357 \365\034\273\321\277\251Zm\212\2478\362\277t\303\326?\362K\006@H\214\376\255\316\016\342\277\372\374;\235yP\356\277\t\272\240\324\316E\375?\335\247\277l\362\333\327\277VIc\345#\004\361?\177\307g\245\343 \273?\t\272\240\324\316E\375?I\373\215\027\310\345\265\277\372\374;\235yP\356\277\231S\032\377\303\234\365?\203\2452\241\216\024\364?\353\0326P\271*\331?6`^\344\307\374\335\277I\373\215\027\310\345\265\277\223\254\205,r\260\360\277\177\307g\245\343 \273?\204\357 \365\034\273\321\277\257\001\002]\371$\367?\t\272\240\324\316E\375?\177\307g\245\343 \273?D\323\324\307\216K\337?\306\257\351\272.\255\370?\3310g7n\354\204?\037h\2102\004\316\376?\177\307g\245\343 \273?\372\374;\235yP\356\277\3310g7n\354\204?t\350\315i9\037\345\277\203\2452\241\216\024\364?\300\010U\350\334\300\363\277\335\247\277l\362\333\327\277I\373\215\027\310\345\265\277\204\357 \365\034\273\321\277\3310g7n\354\204?t\350\315i9\037\345\277\203\2452\241\216\024\364?\373!\211\333\234\306\345?I\373\215\027\310\345\265\277\2006\367\016\335\367\356?\372\374;\235yP\356\277\223\254\205,r\260\360\277rT\361\301\034\322\311?\372\374;\235yP\356\277\241D\235%\244/\350\277\373!\211\333\234\306\345?\222b\227\330\343\t\323?\3310g7n\354\204?H\214\376\255\316\016\342\277t\350\315i9\037\345\277\372\374;\235yP\356\277\241D\235%\244/\350\277t\350\315i9\037\345\277\372\374;\235yP\356\277\316\305\271\0372\266\342?H\214\376\255\316\016\342\277\223\254\205,r\260\360\277\223\254\205,r\260\360\277\241D\235%\244/\350\277t\350\315i9\037\345\277rT\361\301\034\322\311?\315\240l\341\016@\353\277\372\374;\235yP\356\277\222b\227\330\343\t\323?\177\307g\245\343 \273?H\214\376\255\316\016\342\277\020\253#\373\256\330\357\277\315\240l\341\016@\353\277\231S\032\377\303\234\365?\372\374;\235yP\356\2776`^\344\307\374\335\277\2006\367\016\335\367\356?\315\240l\341\016@\353\277H\214\376\255\316\016\342\277\241D\235%\244/\350\277\2006\367\016\335\367\356?\223\254\205,r\260\360\277\2006\367\016\335\367\356?\204\357 \365\034\273\321\2776`^\344\307\374\335\2776`^\344\307\374\335\277I\373\215\027\310\345\265\277\3310g7n\354\204?H\214\376\255\316\016\342\277\3310g7n\354\204?H\214\376\255\316\016\342\277\3310g7n\354\204?\371\327Ds2}\017@\300\010U\350\334\300\363\277\316\305\271\0372\266\342?\'~X\227\007\327\350?\223\254\205,r\260\360\277I\373\215\027\310\345\265\277t\350\315i9\037\345\277T\332\'Sr\347\353?I\373\215\027\310\345\265\277\223\254\205,r\260\360\277\177\307g\245\343 \273?Vn\004\373\2164\307\277H\214\376\255\316\016\342\277\223\254\205,r\260\360\277\335]\321\030d5\372?m\367JCY\214\362?H\214\376\255\316\016\342\277<\220\023\325lw\002@\315\240l\341\016@\353\277\2006\367\016\335\367\356?\2006\367\016\335\367\356?\3310g7n\354\204?\372\374;\235yP\356\277\257\001\002]\371$\367?\372\374;\235yP\356\277H\214\376\255\316\016\342\277\372\374;\235yP\356\277\177\307g\245\343 \273?\372\374;\235yP\356\277Vn\004\373\2164\307\277\316\305\271\0372\266\342?\231S\032\377\303\234\365?6`^\344\307\374\335\277\315\240l\341\016@\353\277\203\2452\241\216\024\364?D\323\324\307\216K\337?\372\374;\235yP\356\277Vn\004\373\2164\307\277I\373\215\027\310\345\265\277\223\254\205,r\260\360\277\223\254\205,r\260\360\277\257\001\002]\371$\367?\223\254\205,r\260\360\277VIc\345#\004\361?\241D\235%\244/\350\277\353\0326P\271*\331?\372\374;\235yP\356\277t\350\315i9\037\345\277\2006\367\016\335\367\356?\335\247\277l\362\333\327\277H\214\376\255\316\016\342\277\241D\235%\244/\350\277\335\247\277l\362\333\327\277\316\305\271\0372\266\342?Vn\004\373\2164\307\277\353\0326P\271*\331?\315\240l\341\016@\353\277\241D\235%\244/\350\277\241D\235%\244/\350\277\316\305\271\0372\266\342?\241D\235%\244/\350\277\353\0326P\271*\331?\223\254\205,r\260\360\277\373!\211\333\234\306\345?I\373\215\027\310\345\265\277H\214\376\255\316\016\342\277\223\254\205,r\260\360\277\251Zm\212\2478\362\277\267\315\215Y\222\344\n@\3310g7n\354\204?\222b\227\330\343\t\323?VIc\345#\004\361?\315\240l\341\016@\353\277H\214\376\255\316\016\342\277\223\254\205,r\260\360\277\372\374;\235yP\356\277\2006\367\016\335\367\356?\223\254\205,r\260\360\277\372\374;\235yP\356\277\3310g7n\354\204?\223\254\205,r\260\360\277\3310g7n\354\204?\223\254\205,r\260\360\277\373!\211\333\234\306\345?\223\254\205,r\260\360\277I\373\215\027\310\345\265\277\335\247\277l\362\333\327\277\203\2452\241\216\024\364?rT\361\301\034\322\311?\300\010U\350\334\300\363\277\335\247\277l\362\333\327\277Vn\004\373\2164\307\277\251Zm\212\2478\362\2776`^\344\307\374\335\277\222b\227\330\343\t\323?Vn\004\373\2164\307\277\372\374;\235yP\356\277D\323\324\307\216K\337?m\367JCY\214\362?Vn\004\373\2164\307\277\t\272\240\324\316E\375?\3310g7n\354\204?\335\247\277l\362\333\327\277Gg\007\204\207;\003@\241D\235%\244/\350\277\335\247\277l\362\333\327\277\300\010U\350\334\300\363\277\316\305\271\0372\266\342?\223\254\205,r\260\360\277\241D\235%\244/\350\277\'~X\227\007\327\350?\177\307g\245\343 \273?\2006\367\016\335\367\356?&\342+w7\357\000@\300\010U\350\334\300\363\277t\350\315i9\037\345\277\335\247\277l\362\333\327\277t\350\315i9\037\345\277\335\247\277l\362\333\327\277t\350\315i9\037\345\277\372\374;\235yP\356\277\204\357 \365\034\273\321\277T\332\'Sr\347\353?\300\010U\350\334\300\363\277D\323\324\307\216K\337?\353\0326P\271*\331?rT\361\301\034\322\311?\373!\211\333\234\306\345?\'~X\227\007\327\350?\3310g7n\354\204?\300\010U\350\334\300\363\277\372\374;\235yP\356\277\'~X\227\007\327\350?rT\361\301\034\322\311?\306\257\351\272.\255\370?\300\010U\350\334\300\363\277\300\010U\350\334\300\363\277\203\2452\241\216\024\364?rT\361\301\034\322\311?\315\240l\341\016@\353\277m\367JCY\214\362?\373!\211\333\234\306\345?\'~X\227\007\327\350?D\323\324\307\216K\337?t\350\315i9\037\345\277D\323\324\307\216K\337?rT\361\301\034\322\311?T\332\'Sr\347\353?\316\305\271\0372\266\342?\t\272\240\324\316E\375?\177\307g\245\343 \273?\223\254\205,r\260\360\277T\332\'Sr\347\353?t\350\315i9\037\345\277\315\240l\341\016@\353\277\223\254\205,r\260\360\277\223\254\205,r\260\360\277\223\254\205,r\260\360\277\223\254\205,r\260\360\277I\373\215\027\310\345\265\277D\323\324\307\216K\337?D\323\324\307\216K\337?\315\240l\341\016@\353\277\300\010U\350\334\300\363\277\372\374;\235yP\356\277T\332\'Sr\347\353?\373!\211\333\234\306\345?\3310g7n\354\204?\'~X\227\007\327\350?\2006\367\016\335\367\356?I\373\215\027\310\345\265\277\373!\211\333\234\306\345?\372\374;\235yP\356\277\3310g7n\354\204?\353\0326P\271*\331?\t\272\240\324\316E\375?\177\307g\245\343 \273?t\350\315i9\037\345\277\241D\235%\244/\350\2776`^\344\307\374\335\277VIc\345#\004\361?\372\374;\235yP\356\277\241D\235%\244/\350\277\3310g7n\354\204?6`^\344\307\374\335\277\033\0138\310\034+\000@\241D\235%\244/\350\277H\214\376\255\316\016\342\277\315\240l\341\016@\353\277\241D\235%\244/\350\277D\323\324\307\216K\337?\372\374;\235yP\356\277t\350\315i9\037\345\2771\271\037&R\263\001@\241D\235%\244/\350\277H\214\376\255\316\016\342\277H\214\376\255\316\016\342\277\3310g7n\354\204?\204\357 \365\034\273\321\277\223\254\205,r\260\360\2776`^\344\307\374\335\277\222b\227\330\343\t\323?t\350\315i9\037\345\277\300\010U\350\334\300\363\277I\373\215\027\310\345\265\277\353\0326P\271*\331?\241D\235%\244/\350\277\251Zm\212\2478\362\2776`^\344\307\374\335\277\335]\321\030d5\372?\223\254\205,r\260\360\277\251Zm\212\2478\362\277\222b\227\330\343\t\323?\223\254\205,r\260\360\277\300\010U\350\334\300\363\277\'~X\227\007\327\350?\316\305\271\0372\266\342?\223\254\205,r\260\360\277VIc\345#\004\361?\306\257\351\272.\255\370?H\214\376\255\316\016\342\277\231S\032\377\303\234\365?I\373\215\027\310\345\265\277\251Zm\212\2478\362\277\223\254\205,r\260\360\277I\373\215\027\310\345\265\277\306\257\351\272.\255\370?T\332\'Sr\347\353?\315\240l\341\016@\353\277\223\254\205,r\260\360\277Vn\004\373\2164\307\277\372\374;\235yP\356\277\372\374;\235yP\356\2776`^\344\307\374\335\277\241D\235%\244/\350\277\315\240l\341\016@\353\277m\367JCY\214\362?D\323\324\307\216K\337?\251Zm\212\2478\362\277\372\374;\235yP\356\277\177\307g\245\343 \273?\372\374;\235yP\356\277VIc\345#\004\361?\177\307g\245\343 \273?Vn\004\373\2164\307\277\372\374;\235yP\356\277\300\010U\350\334\300\363\277\372\374;\235yP\356\277I\373\215\027\310\345\265\277\251Zm\212\2478\362\277Vn\004\373\2164\307\277\353\0326P\271*\331?\241D\235%\244/\350\277\2006\367\016\335\367\356?\372\374;\235yP\356\277\177\307g\245\343 \273?\335]\321\030d5\372?rT\361\301\034\322\311?\326\266<F\022I\365\2776`^\344\307\374\335\277\3310g7n\354\204?\306\257\351\272.\255\370?\372\374;\235yP\356\277H\214\376\255\316\016\342\277rT\361\301\034\322\311?\373!\211\333\234\306\345?\353\0326P\271*\331?\037h\2102\004\316\376?\251Zm\212\2478\362\277\353\0326P\271*\331?\363\013\271v\231\275\373?\335\247\277l\362\333\327\277t\350\315i9\037\345\277\3310g7n\354\204?\204\357 \365\034\273\321\277\225H\262LB\230\010@\335\247\277l\362\333\327\277\3310g7n\354\204?Vn\004\373\2164\307\277\2006\367\016\335\367\356?\2006\367\016\335\367\356?\204\357 \365\034\273\321\277\204\357 \365\034\273\321\2776`^\344\307\374\335\277^\025\357\341\274\303\004@H\214\376\255\316\016\342\2776`^\344\307\374\335\277\223\254\205,r\260\360\277\335]\321\030d5\372?\372\374;\235yP\356\277D\323\324\307\216K\337?\257\001\002]\371$\367?\223\254\205,r\260\360\277\335]\321\030d5\372?\316\305\271\0372\266\342?\203\2452\241\216\024\364?\223\254\205,r\260\360\277\315\240l\341\016@\353\277\373!\211\333\234\306\345?\177\307g\245\343 \273?\315\240l\341\016@\353\277\300\010U\350\334\300\363\277\315\240l\341\016@\353\277VIc\345#\004\361?D\323\324\307\216K\337?\240\366\261\037*\215\000@\251Zm\212\2478\362\277\231S\032\377\303\234\365?\223\254\205,r\260\360\277\300\010U\350\334\300\363\277Gg\007\204\207;\003@\315\240l\341\016@\353\277\'~X\227\007\327\350?\204\357 \365\034\273\321\277I\373\215\027\310\345\265\277\315\240l\341\016@\353\277\373!\211\333\234\306\345?I\373\215\027\310\345\265\277\177\307g\245\343 \273?VIc\345#\004\361?R>\3732\242\377\003@\372\374;\235yP\356\277I\373\215\027\310\345\265\277H\214\376\255\316\016\342\277\335\247\277l\362\333\327\277\335\247\277l\362\333\327\277\2006\367\016\335\367\356?\3310g7n\354\204?\177\307g\245\343 \273?Vn\004\373\2164\307\277\241D\235%\244/\350\277\223\254\205,r\260\360\277D\323\324\307\216K\337?\372\374;\235yP\356\277\2006\367\016\335\367\356?\372\374;\235yP\356\277\315\240l\341\016@\353\277\372\374;\235yP\356\277I\373\215\027\310\345\265\277\353\0326P\271*\331?\223\254\205,r\260\360\277Vn\004\373\2164\307\277I\373\215\027\310\345\265\277\315\240l\341\016@\353\277\2006\367\016\335\367\356?\315\240l\341\016@\353\277\372\374;\235yP\356\277\203\2452\241\216\024\364?\335\247\277l\362\333\327\277\241D\235%\244/\350\277&\342+w7\357\000@rT\361\301\034\322\311?\335\247\277l\362\333\327\277\177\307g\245\343 \273?\037h\2102\004\316\376?\241D\235%\244/\350\277\353\0326P\271*\331?\223\254\205,r\260\360\277I\373\215\027\310\345\265\277\315\240l\341\016@\353\277Vn\004\373\2164\307\277m\367JCY\214\362?I\373\215\027\310\345\265\277\204\357 \365\034\273\321\277&\342+w7\357\000@\373!\211\333\234\306\345?\3310g7n\354\204?\300\010U\350\334\300\363\277\372\374;\235yP\356\277H\214\376\255\316\016\342\277t\350\315i9\037\345\277\335]\321\030d5\372?\372\374;\235yP\356\277\222b\227\330\343\t\323?rT\361\301\034\322\311?D\323\324\307\216K\337?\316\305\271\0372\266\342?t\303\326?\362K\006@1\271\037&R\263\001@\253\366\231\252w \n@\251Zm\212\2478\362\277H\214\376\255\316\016\342\277rT\361\301\034\322\311?\373!\211\333\234\306\345?H\214\376\255\316\016\342\277\177\307g\245\343 \273?\223\254\205,r\260\360\277\3208\307Ya}\025@1\271\037&R\263\001@rT\361\301\034\322\311?\222b\227\330\343\t\323?\300\010U\350\334\300\363\277I\373\215\027\310\345\265\277\177\307g\245\343 \273?\177\307g\245\343 \273?\315\240l\341\016@\353\2776`^\344\307\374\335\277\315\240l\341\016@\353\277I\373\215\027\310\345\265\277\3310g7n\354\204?\222b\227\330\343\t\323?\316\305\271\0372\266\342?\2006\367\016\335\367\356?\177\232\312\356\014\020\007@\241D\235%\244/\350\277\2006\367\016\335\367\356?<\220\023\325lw\002@Vn\004\373\2164\307\277\372\374;\235yP\356\277VIc\345#\004\361?\3310g7n\354\204?\241D\235%\244/\350\277\335\247\277l\362\333\327\277\223\254\205,r\260\360\277\315\240l\341\016@\353\277\316\305\271\0372\266\342?\177\307g\245\343 \273?\372\374;\235yP\356\277\251Zm\212\2478\362\277\3310g7n\354\204?\353\0326P\271*\331?T\332\'Sr\347\353?\203\2452\241\216\024\364?\241D\235%\244/\350\277H\214\376\255\316\016\342\277\3310g7n\354\204?VIc\345#\004\361?\300\010U\350\334\300\363\277\335\247\277l\362\333\327\277\203\2452\241\216\024\364?\177\307g\245\343 \273?6`^\344\307\374\335\277\315\240l\341\016@\353\277\251Zm\212\2478\362\277\3310g7n\354\204?\335\247\277l\362\333\327\277T\332\'Sr\347\353?D\323\324\307\216K\337?\251Zm\212\2478\362\277t\350\315i9\037\345\277\315\240l\341\016@\353\277\335\247\277l\362\333\327\277\222b\227\330\343\t\323?\372\374;\235yP\356\277I\373\215\027\310\345\265\277\204\357 \365\034\273\321\277\257\001\002]\371$\367?\372\374;\235yP\356\277\3310g7n\354\204?t\350\315i9\037\345\277\'~X\227\007\327\350?\223\254\205,r\260\360\277\335\247\277l\362\333\327\277\257\263\353L\0211\023@H\214\376\255\316\016\342\277\241D\235%\244/\350\277D\323\324\307\216K\337?\372\374;\235yP\356\277\3310g7n\354\204?D\323\324\307\216K\337?\372\374;\235yP\356\277\251Zm\212\2478\362\277\300\010U\350\334\300\363\277Vn\004\373\2164\307\277H\214\376\255\316\016\342\277Vn\004\373\2164\307\277<\220\023\325lw\002@\257\001\002]\371$\367?\372\374;\235yP\356\277H\214\376\255\316\016\342\277\223\254\205,r\260\360\277D\323\324\307\216K\337?\241D\235%\244/\350\277\315\240l\341\016@\353\277\300\010U\350\334\300\363\277\335]\321\030d5\372?T\332\'Sr\347\353?\335\247\277l\362\333\327\277\177\307g\245\343 \273?H\214\376\255\316\016\342\277\300\010U\350\334\300\363\277\372\374;\235yP\356\277\3310g7n\354\204?\241D\235%\244/\350\277\'~X\227\007\327\350?m\367JCY\214\362?\3310g7n\354\204?m\367JCY\214\362?t\350\315i9\037\345\277T\332\'Sr\347\353?rT\361\301\034\322\311?\204\357 \365\034\273\321\277H\214\376\255\316\016\342\277rT\361\301\034\322\311?\335\247\277l\362\333\327\277\037h\2102\004\316\376?H\214\376\255\316\016\342\277\315\240l\341\016@\353\277I\373\215\027\310\345\265\277\223\254\205,r\260\360\2776`^\344\307\374\335\277\223\254\205,r\260\360\2776`^\344\307\374\335\277H\214\376\255\316\016\342\277\372\374;\235yP\356\277D\323\324\307\216K\337?\372\374;\235yP\356\277\315\240l\341\016@\353\277\t\272\240\324\316E\375?\335\247\277l\362\333\327\277\177\307g\245\343 \273?\335\247\277l\362\333\327\277\372\374;\235yP\356\2776`^\344\307\374\335\277\241D\235%\244/\350\277\t\272\240\324\316E\375?\223\254\205,r\260\360\277\'~X\227\007\327\350?\223\254\205,r\260\360\277\316\305\271\0372\266\342?H\214\376\255\316\016\342\277\306\257\351\272.\255\370?\3310g7n\354\204?\315{u\267\307l\014@\204\357 \365\034\273\321\277\223\254\205,r\260\360\277\373!\211\333\234\306\345?\037h\2102\004\316\376?\335\247\277l\362\333\327\277\372\374;\235yP\356\277\223\254\205,r\260\360\277\212q\276\235\'\324\007@\223\254\205,r\260\360\277\223\254\205,r\260\360\277\315\240l\341\016@\353\277\203\2452\241\216\024\364?6`^\344\307\374\335\277\2006\367\016\335\367\356?Vn\004\373\2164\307\277\353\0326P\271*\331?\204\357 \365\034\273\321\277\316\305\271\0372\266\342?\373!\211\333\234\306\345?\372\374;\235yP\356\277I\373\215\027\310\345\265\277\222b\227\330\343\t\323?\204\357 \365\034\273\321\277I\373\215\027\310\345\265\277\3310g7n\354\204?\3310g7n\354\204?\204\357 \365\034\273\321\277t\350\315i9\037\345\277\t\272\240\324\316E\375?\335\247\277l\362\333\327\277VIc\345#\004\361?\267\315\215Y\222\344\n@Vn\004\373\2164\307\277D\323\324\307\216K\337?\223\254\205,r\260\360\277R>\3732\242\377\003@I\373\215\027\310\345\265\277\300\010U\350\334\300\363\277H\214\376\255\316\016\342\277\335\247\277l\362\333\327\277\204\357 \365\034\273\321\277\315\240l\341\016@\353\277I\373\215\027\310\345\265\277\'~X\227\007\327\350?\335\247\277l\362\333\327\277\315\240l\341\016@\353\277\204\357 \365\034\273\321\277m\367JCY\214\362?\t\272\240\324\316E\375?\251Zm\212\2478\362\277\222b\227\330\343\t\323?\2006\367\016\335\367\356?&\342+w7\357\000@\335\247\277l\362\333\327\277VIc\345#\004\361?\372\374;\235yP\356\277t\350\315i9\037\345\277\335]\321\030d5\372?\251Zm\212\2478\362\277\033\0138\310\034+\000@\177\307g\245\343 \273?6`^\344\307\374\335\277\372\374;\235yP\356\277H\214\376\255\316\016\342\277\204\357 \365\034\273\321\277VIc\345#\004\361?\222b\227\330\343\t\323?D\323\324\307\216K\337?\335\247\277l\362\333\327\277rT\361\301\034\322\311?\177\307g\245\343 \273?\222b\227\330\343\t\323?\363\013\271v\231\275\373?\223\254\205,r\260\360\277\204\357 \365\034\273\321\277VIc\345#\004\361?\353\0326P\271*\331?\177\307g\245\343 \273?rT\361\301\034\322\311?\335\247\277l\362\333\327\277t\350\315i9\037\345\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "h%\025\266\"n\320\277\342\005\003\245\350\342\352?\342\005\003\245\350\342\352?\340\2358\0077\243\363?\364\374\305hR\322\350?\n\331\321w\371\217\340?\342\005\003\245\350\342\352?\212\276\2332u*\260\277p\376$\261\242\263\006\300*\216\257\376\231\335\330?RI\t\247{\260\330\277\020\276\334?\260\250\004@\377\352K\360%\261\344?\201\321\265\000-\253\346\277\305\312i4&\366\375?\373\002B\212\223W\300\277\223\310x\304\226\232\344\277)\232\252\313\320\260\366\277\031\'6{\354\231\310\277h%\025\266\"n\320\277AFK\026\333\355\374?*\216\257\376\231\335\330?\317\204\n\355 5\006@AFK\026\333\355\374?\252\014Oq\357\227\363\277\031\'6{\354\231\310\277\031\'6{\354\231\310\277o\020\335\254U\212\360?*\216\257\376\231\335\330?w7\217.O\217\324\277\312\301,\370\217\345\373?c\260\202*)\364\310?\263\250\376\335yw\016@k\365\251\361\205\355\356\277\212\276\2332u*\260\277W\"W%\202\253\364?}\354l\265\357\334\354\277\006\240)w\306\376\334?\212\276\2332u*\260\277\223\310x\304\226\232\344\2779\177\363\026\016\177\360\277\212\276\2332u*\260\277G=\016\332D\335\372?\201\321\265\000-\253\346\277\252\014Oq\357\227\363\277\233[\353\364\212i\r\300c\260\202*)\364\310?v\343/yY\314\352\277X\367\256\222?\034\003@\006\240)w\306\376\334?\340iS8^\003\000@-[\203\037\250\321\334\277\210\332\362<\303\273\350\277@j\273\rA\233\320?\245\025\214\255\205\250\365\277*\216\257\376\231\335\330?\036\3214\221\356\336\260?\373\002B\212\223W\300\277\201\321\265\000-\253\346\277\320\270\357\273\371\324\371?\214\277;\210\000\212\342\277\252\014Oq\357\227\363\277\364\374\305hR\322\350?\237\036\311\351\033\271\367\277\031\'6{\354\231\310\277\036\3214\221\356\336\260?9\177\363\026\016\177\360\277\036\3214\221\356\336\260?\312\301,\370\217\345\373?-[\203\037\250\321\334\277\030\265a\200\223\342\374\277\223\310x\304\226\232\344\277\201\321\265\000-\253\346\277\034|5\206m\274\324?\377\352K\360%\261\344?Sl\"\323+\217V?\036\3214\221\356\336\260?\245\025\214\255\205\250\365\277\036\3214\221\356\336\260?v\343/yY\314\352\277\333\246uC\315\263\365?c\260\202*)\364\310?\n\331\321w\371\217\340?\320\270\357\273\371\324\371?\255\214\2169\320\261\300?\373\002B\212\223W\300\277w7\217.O\217\324\277\346\224\373\312\240\222\361?\2240CbH\332\373\277\236\266\376Kjy\340\277\370\341\016\264\217\240\342?\351\016@\341~\363\354?k\365\251\361\205\355\356\277@j\273\rA\233\320?\214\277;\210\000\212\342\277\034|5\206m\274\324?\n\331\321w\371\217\340?\327\027}\035\025\004\357?\351\016@\341~\363\354?Sl\"\323+\217V?\305\312i4&\366\375?\036\3214\221\356\336\260?v\343/yY\314\352\2779\177\363\026\016\177\360\277h%\025\266\"n\320\277v\343/yY\314\352\277c\260\202*)\364\310?k\365\251\361\205\355\356\277*\216\257\376\231\335\330?\006\240)w\306\376\334?\031\'6{\354\231\310\277\236\266\376Kjy\340\277\252\014Oq\357\227\363\277\036\254$D\375\321\372\277\245\025\214\255\205\250\365\277\2240CbH\332\373\277\n\331\321w\371\217\340?\346\224\373\312\240\222\361?R+\224a\030\274\366?\364\374\305hR\322\350?j\031\032\351\353\232\362?\212\276\2332u*\260\277h%\025\266\"n\320\277*\216\257\376\231\335\330?\031\'6{\354\231\310\277\223\310x\304\226\232\344\277\236\266\376Kjy\340\277\320\270\357\273\371\324\371?\030\265a\200\223\342\374\277\006\240)w\306\376\334?\252\014Oq\357\227\363\277\212\276\2332u*\260\277\201\321\265\000-\253\346\277*\216\257\376\231\335\330?9\177\363\026\016\177\360\277-[\203\037\250\321\334\277\023\276\236\274)\363\376\2779\177\363\026\016\177\360\277\200\343m\374\337\201\000\300\377\352K\360%\261\344?\346\224\373\312\240\222\361?}\354l\265\357\334\354\277\036\3214\221\356\336\260?k\365\251\361\205\355\356\277\373\002B\212\223W\300\277\031\'6{\354\231\310\277\006\240)w\306\376\334?4\274\025\"}/\006\300X\367\256\222?\034\003@\236\266\376Kjy\340\277w7\217.O\217\324\277\031\'6{\354\231\310\277w7\217.O\217\324\277<O\210Rq\376\376?Sl\"\323+\217V?v\343/yY\314\352\277\355\363\210,\274\301\346?}\354l\265\357\334\354\277@j\273\rA\233\320?\303\215G)\267E\010@\210\332\362<\303\273\350\277\201\321\265\000-\253\346\277k\365\251\361\205\355\356\277k\365\251\361\205\355\356\277\252\014Oq\357\227\363\277\346\224\373\312\240\222\361?\364\374\305hR\322\350?\212\276\2332u*\260\277\214\277;\210\000\212\342\277\201\321\265\000-\253\346\277\n\331\321w\371\217\340?\201\321\265\000-\253\346\277)\232\252\313\320\260\366\277}\354l\265\357\334\354\277\036\3214\221\356\336\260?.\221m\217:\240\364\277\252\014Oq\357\227\363\277\210\332\362<\303\273\350\277-[\203\037\250\321\334\277\232\'\006&\262\311\371\277\333\246uC\315\263\365?\034|5\206m\274\324?w7\217.O\217\324\277h%\025\266\"n\320\277w7\217.O\217\324\277\n\331\321w\371\217\340?h%\025\266\"n\320\277c\260\202*)\364\310?\030\265a\200\223\342\374\277RI\t\247{\260\330\277\370\341\016\264\217\240\342?*\216\257\376\231\335\330?\327\027}\035\025\004\357?\373\002B\212\223W\300\277\370\341\016\264\217\240\342?k\365\251\361\205\355\356\277\212\276\2332u*\260\277\373\002B\212\223W\300\277\236\266\376Kjy\340\277\006\240)w\306\376\334?\255\214\2169\320\261\300?\212\276\2332u*\260\277\351\016@\341~\363\354?\236\266\376Kjy\340\277\370\341\016\264\217\240\342?c\260\202*)\364\310?@j\273\rA\233\320?L4\321\235\256\314\370?\n\331\321w\371\217\340?\255\214\2169\320\261\300?\212\276\2332u*\260\277@j\273\rA\233\320?-[\203\037\250\321\334\277h%\025\266\"n\320\277\255\214\2169\320\261\300?k\365\251\361\205\355\356\277\342\005\003\245\350\342\352?G=\016\332D\335\372?\210\332\362<\303\273\350\277\255\214\2169\320\261\300?w7\217.O\217\324\277\031\'6{\354\231\310\277j\031\032\351\353\232\362?RI\t\247{\260\330\277\212\276\2332u*\260\277\355\363\210,\274\301\346?\036\3214\221\356\336\260?}\354l\265\357\334\354\277\223\310x\304\226\232\344\277}\354l\265\357\334\354\277c\260\202*)\364\310?#\243\347\007g\301\370\277\364\374\305hR\322\350?\351\016@\341~\363\354?\212\276\2332u*\260\277\210\332\362<\303\273\350\277\232\'\006&\262\311\371\277Sl\"\323+\217V?*\216\257\376\231\335\330?<O\210Rq\376\376?w7\217.O\217\324\277\327\027}\035\025\004\357?\034|5\206m\274\324?Sl\"\323+\217V?\034|5\206m\274\324?R\000\354\316\325,\005@Sl\"\323+\217V?\342\005\003\245\350\342\352?\236\266\376Kjy\340\277\036\3214\221\356\336\260?@j\273\rA\233\320?*\216\257\376\231\335\330?\211B\275\332t\373\377\277w7\217.O\217\324\277R+\224a\030\274\366?\031\'6{\354\231\310\277\031\'6{\354\231\310\277\212\276\2332u*\260\277k\365\251\361\205\355\356\277\036\3214\221\356\336\260?\373\002B\212\223W\300\277\364\374\305hR\322\350?\370\341\016\264\217\240\342?Sl\"\323+\217V?\351\016@\341~\363\354?\377\352K\360%\261\344?\212\276\2332u*\260\277\236\266\376Kjy\340\277w7\217.O\217\324\277w7\217.O\217\324\277\n\331\321w\371\217\340?w7\217.O\217\324\277h%\025\266\"n\320\277\364\374\305hR\322\350?\355\363\210,\274\301\346?<O\210Rq\376\376?\255\214\2169\320\261\300?@j\273\rA\233\320?\342\005\003\245\350\342\352?\342\005\003\245\350\342\352?@j\273\rA\233\320?)\232\252\313\320\260\366\277\342\005\003\245\350\342\352?\255\214\2169\320\261\300?\036\254$D\375\321\372\277o\020\335\254U\212\360?\364\374\305hR\322\350?\370\341\016\264\217\240\342?*\216\257\376\231\335\330?9\177\363\026\016\177\360\277\377\352K\360%\261\344?\370\341\016\264\217\240\342?\237\036\311\351\033\271\367\277\370\341\016\264\217\240\342?\036\3214\221\356\336\260?c\260\202*)\364\310?\006\240)w\306\376\334?\373\002B\212\223W\300\277\346\224\373\312\240\222\361?\036\3214\221\356\336\260?\351\016@\341~\363\354?\212\276\2332u*\260\277\342\005\003\245\350\342\352?\370\341\016\264\217\240\342?Sl\"\323+\217V?w7\217.O\217\324\277\031\'6{\354\231\310\277L4\321\235\256\314\370?\342\005\003\245\350\342\352?h%\025\266\"n\320\277\377\352K\360%\261\344?\370\341\016\264\217\240\342?\370\341\016\264\217\240\342?\n\331\321w\371\217\340?\373\002B\212\223W\300\277\006\240)w\306\376\334?\201\321\265\000-\253\346\277\332r\220t\364\023\002@\342\005\003\245\350\342\352?\201\321\265\000-\253\346\277j\031\032\351\353\232\362?\351\016@\341~\363\354?\214\277;\210\000\212\342\277\327\027}\035\025\004\357?\255\214\2169\320\261\300?\2240CbH\332\373\277h%\025\266\"n\320\2773\2100S\244\217\362\277\332r\220t\364\023\002@\373\002B\212\223W\300\277\364\374\305hR\322\350?\373\002B\212\223W\300\277\355\363\210,\274\301\346?h%\025\266\"n\320\277\370p\311V\301\232\003\300\351\016@\341~\363\354?\333\246uC\315\263\365?3\2100S\244\217\362\277\034|5\206m\274\324?\210\332\362<\303\273\350\277\n\331\321w\371\217\340?\245\025\214\255\205\250\365\277h%\025\266\"n\320\277R+\224a\030\274\366?\214\277;\210\000\212\342\277\232\'\006&\262\311\371\277\327\027}\035\025\004\357?\n\331\321w\371\217\340?\255\214\2169\320\261\300?9\177\363\026\016\177\360\277\006\240)w\306\376\334?w7\217.O\217\324\277\346\224\373\312\240\222\361?\236\266\376Kjy\340\277@j\273\rA\233\320?\2179\200\236\336\352\375\277\034|5\206m\274\324?\255\214\2169\320\261\300?\236\266\376Kjy\340\277@j\273\rA\233\320?v\343/yY\314\352\277\370\341\016\264\217\240\342?\031\'6{\354\231\310\277\255\214\2169\320\261\300?\214\277;\210\000\212\342\277*\216\257\376\231\335\330?\260\003\0225Y\207\361\277\312\301,\370\217\345\373?\333\246uC\315\263\365?\373\002B\212\223W\300\277\212\276\2332u*\260\277\355\363\210,\274\301\346?9\177\363\026\016\177\360\277Sl\"\323+\217V?\2179\200\236\336\352\375\277#\243\347\007g\301\370\277\255\214\2169\320\261\300?R+\224a\030\274\366?k\365\251\361\205\355\356\277\236\266\376Kjy\340\277RI\t\247{\260\330\277\260\003\0225Y\207\361\277\236\266\376Kjy\340\277\034|5\206m\274\324?RI\t\247{\260\330\277\036\3214\221\356\336\260?3\2100S\244\217\362\277\370\341\016\264\217\240\342?-[\203\037\250\321\334\277\237\036\311\351\033\271\367\277\333\246uC\315\263\365?\377\352K\360%\261\344?c\260\202*)\364\310?#\243\347\007g\301\370\277\373\002B\212\223W\300\277\342\005\003\245\350\342\352?\370\341\016\264\217\240\342?\342\005\003\245\350\342\352?\031\'6{\354\231\310\277L4\321\235\256\314\370?\034|5\206m\274\324?w7\217.O\217\324\277*\216\257\376\231\335\330?@j\273\rA\233\320?w7\217.O\217\324\277-[\203\037\250\321\334\277\373\002B\212\223W\300\277c\260\202*)\364\310?\320\270\357\273\371\324\371?\031\'6{\354\231\310\277RI\t\247{\260\330\277\036\254$D\375\321\372\277\342\005\003\245\350\342\352?\245\025\214\255\205\250\365\277\342\005\003\245\350\342\352?w7\217.O\217\324\277\327\027}\035\025\004\357?c\260\202*)\364\310?\325\257\262\177c\304\367?*\216\257\376\231\335\330?\373\002B\212\223W\300\277\332r\220t\364\023\002@h%\025\266\"n\320\277\214\277;\210\000\212\342\277\212\276\2332u*\260\277\236\266\376Kjy\340\277\034|5\206m\274\324?\236\266\376Kjy\340\277\377\352K\360%\261\344?\026\265\237\003\032\230\002@\034|5\206m\274\324?9\177\363\026\016\177\360\277h%\025\266\"n\320\277\214\277;\210\000\212\342\277\036\254$D\375\321\372\277\023\276\236\274)\363\376\2773\2100S\244\217\362\277X\367\256\222?\034\003@\214\277;\210\000\212\342\277\026\265\237\003\032\230\002@\006\240)w\306\376\334?j\031\032\351\353\232\362?\034|5\206m\274\324?\214\277;\210\000\212\342\277}\354l\265\357\334\354\277Sl\"\323+\217V?-[\203\037\250\321\334\277\223\310x\304\226\232\344\277\351\016@\341~\363\354?\n\331\321w\371\217\340?k\365\251\361\205\355\356\277\302%}\213\005\006\001\300\201\321\265\000-\253\346\277\232\'\006&\262\311\371\277\340\2358\0077\243\363?\373\002B\212\223W\300\277R+\224a\030\274\366?\260\003\0225Y\207\361\277\377\352K\360%\261\344?*\216\257\376\231\335\330?h%\025\266\"n\320\277\370\341\016\264\217\240\342?w7\217.O\217\324\277\210\332\362<\303\273\350\277\252\014Oq\357\227\363\277R+\224a\030\274\366?\355\363\210,\274\301\346?\036\3214\221\356\336\260?\355\363\210,\274\301\346?o\020\335\254U\212\360?\006\240)w\306\376\334?\210\332\362<\303\273\350\277v\343/yY\314\352\277v\343/yY\314\352\277\236\266\376Kjy\340\277W\"W%\202\253\364?h%\025\266\"n\320\277R+\224a\030\274\366?\351\016@\341~\363\354?\036\3214\221\356\336\260?\373\002B\212\223W\300\277\327\027}\035\025\004\357?\036\3214\221\356\336\260?h%\025\266\"n\320\277\2179\200\236\336\352\375\277RI\t\247{\260\330\277k\365\251\361\205\355\356\277\255\214\2169\320\261\300?\034|5\206m\274\324?\n\331\321w\371\217\340?\034|5\206m\274\324?\n\331\321w\371\217\340?\034|5\206m\274\324?c\260\202*)\364\310?\373\002B\212\223W\300\277w7\217.O\217\324\277\201\321\265\000-\253\346\277\031\'6{\354\231\310\277.\221m\217:\240\364\277\305\312i4&\366\375?o\020\335\254U\212\360?\036\3214\221\356\336\260?\n\331\321w\371\217\340?\373\002B\212\223W\300\277c\260\202*)\364\310?\351\016@\341~\363\354?w7\217.O\217\324\277\260\003\0225Y\207\361\277G=\016\332D\335\372?Sl\"\323+\217V?9\177\363\026\016\177\360\277c\260\202*)\364\310?\327\027}\035\025\004\357?h%\025\266\"n\320\277\034|5\206m\274\324?\260\003\0225Y\207\361\277\036\3214\221\356\336\260?G=\016\332D\335\372?\212\276\2332u*\260\277)\232\252\313\320\260\366\277\327\027}\035\025\004\357?)\232\252\313\320\260\366\277\340\2358\0077\243\363?\355\363\210,\274\301\346?\036\3214\221\356\336\260?k\365\251\361\205\355\356\277)\232\252\313\320\260\366\2773\2100S\244\217\362\277\260\003\0225Y\207\361\277\236\266\376Kjy\340\277\305\312i4&\366\375?\312\301,\370\217\345\373?#\243\347\007g\301\370\277\333\246uC\315\263\365?\355\363\210,\274\301\346?\036\3214\221\356\336\260?@j\273\rA\233\320?\370\341\016\264\217\240\342?Sl\"\323+\217V?\263\250\376\335yw\016@\236\266\376Kjy\340\277c\260\202*)\364\310?\223\310x\304\226\232\344\277\260\003\0225Y\207\361\277}\354l\265\357\334\354\277w7\217.O\217\324\277G=\016\332D\335\372?:\263\330\345\346\036\004\300\214\277;\210\000\212\342\277\031\'6{\354\231\310\277c\260\202*)\364\310?h%\025\266\"n\320\277\370\341\016\264\217\240\342?\305\312i4&\366\375?-[\203\037\250\321\334\277\302%}\213\005\006\001\300\340\2358\0077\243\363?4\274\025\"}/\006\300\214\277;\210\000\212\342\277\006\240)w\306\376\334?\212\276\2332u*\260\277\346\224\373\312\240\222\361?\n\331\321w\371\217\340?c\260\202*)\364\310?\237\036\311\351\033\271\367\277\2240CbH\332\373\277w7\217.O\217\324\277\006\240)w\306\376\334?W\"W%\202\253\364?\n\331\321w\371\217\340?\031\'6{\354\231\310\277\223\310x\304\226\232\344\277\320\270\357\273\371\324\371?\377\352K\360%\261\344?\370\341\016\264\217\240\342?\355\363\210,\274\301\346?\036\3214\221\356\336\260?\340iS8^\003\000@L4\321\235\256\314\370?*\216\257\376\231\335\330?k\365\251\361\205\355\356\277-[\203\037\250\321\334\277\031\'6{\354\231\310\277\325\257\262\177c\304\367?\255\214\2169\320\261\300?o\020\335\254U\212\360?w7\217.O\217\324\277\260\003\0225Y\207\361\277h%\025\266\"n\320\277\355\363\210,\274\301\346?RI\t\247{\260\330\277\n\331\321w\371\217\340?\245\025\214\255\205\250\365\2779\177\363\026\016\177\360\277c\260\202*)\364\310?\214\277;\210\000\212\342\277\201\321\265\000-\253\346\277\232\'\006&\262\311\371\277Sl\"\323+\217V?c\260\202*)\364\310?w7\217.O\217\324\277\031\'6{\354\231\310\277\210\332\362<\303\273\350\277\245\025\214\255\205\250\365\277\201\321\265\000-\253\346\277\377\352K\360%\261\344?k\365\251\361\205\355\356\277\370\341\016\264\217\240\342?\212\276\2332u*\260\2773\2100S\244\217\362\277\212\276\2332u*\260\277\006\240)w\306\376\334?R+\224a\030\274\366?\031\'6{\354\231\310\277Sl\"\323+\217V?Sl\"\323+\217V?\n\331\321w\371\217\340?RI\t\247{\260\330\277\020\276\334?\260\250\004@\355\363\210,\274\301\346?\223\310x\304\226\232\344\277Sl\"\323+\217V?\201\321\265\000-\253\346\277\n\331\321w\371\217\340?c\260\202*)\364\310?o\020\335\254U\212\360?w7\217.O\217\324\277\340\2358\0077\243\363?\006\240)w\306\376\334?v\343/yY\314\352\277RI\t\247{\260\330\277\342\005\003\245\350\342\352?\201\321\265\000-\253\346\277\260\003\0225Y\207\361\277\260\003\0225Y\207\361\277\031\'6{\354\231\310\277\034|5\206m\274\324?9\177\363\026\016\177\360\277}\354l\265\357\334\354\277\373\002B\212\223W\300\277\034|5\206m\274\324?Sl\"\323+\217V?\340\2358\0077\243\363?-[\203\037\250\321\334\277\036\3214\221\356\336\260?\201\321\265\000-\253\346\277\342\005\003\245\350\342\352?c\260\202*)\364\310?\252\014Oq\357\227\363\277\030\265a\200\223\342\374\277\006\240)w\306\376\334?k\365\251\361\205\355\356\277j\031\032\351\353\232\362?\355\363\210,\274\301\346?W\"W%\202\253\364?.\221m\217:\240\364\277\370\341\016\264\217\240\342?G=\016\332D\335\372?R+\224a\030\274\366?o\020\335\254U\212\360?\320\270\357\273\371\324\371?\034|5\206m\274\324?}\354l\265\357\334\354\277\214\277;\210\000\212\342\277\236\266\376Kjy\340\277\034|5\206m\274\324?k\365\251\361\205\355\356\277\223\310x\304\226\232\344\277\036\3214\221\356\336\260?9\177\363\026\016\177\360\277w7\217.O\217\324\277\255\214\2169\320\261\300?\364\374\305hR\322\350?\210\332\362<\303\273\350\277\031\'6{\354\231\310\277\333\246uC\315\263\365?*\216\257\376\231\335\330?\370\341\016\264\217\240\342?v\343/yY\314\352\277\210\332\362<\303\273\350\277\036\3214\221\356\336\260?h%\025\266\"n\320\277\201\321\265\000-\253\346\277v\343/yY\314\352\277\n\331\321w\371\217\340?\214\277;\210\000\212\342\277\325\257\262\177c\304\367?\305\312i4&\366\375?Sl\"\323+\217V?k\365\251\361\205\355\356\277Sl\"\323+\217V?RI\t\247{\260\330\277\031\'6{\354\231\310\277\255\214\2169\320\261\300?\370p\311V\301\232\003\3009\177\363\026\016\177\360\277\255\214\2169\320\261\300?\355\363\210,\274\301\346?3\2100S\244\217\362\277v\343/yY\314\352\277\036\3214\221\356\336\260?G=\016\332D\335\372?-[\203\037\250\321\334\277w7\217.O\217\324\277\030\265a\200\223\342\374\277\342\005\003\245\350\342\352?\223\310x\304\226\232\344\277h%\025\266\"n\320\277c\260\202*)\364\310?-[\203\037\250\321\334\277\2239\276!e\240\003@\260\003\0225Y\207\361\277RI\t\247{\260\330\277\370\341\016\264\217\240\342?\355\363\210,\274\301\346?w7\217.O\217\324\277\006\240)w\306\376\334?<O\210Rq\376\376?\364\374\305hR\322\350?@j\273\rA\233\320?\342\005\003\245\350\342\352?@j\273\rA\233\320?\351\016@\341~\363\354?\373\002B\212\223W\300\277\377\352K\360%\261\344?\036\3214\221\356\336\260?v\343/yY\314\352\277\214\277;\210\000\212\342\277\355\363\210,\274\301\346?\261@4@\3107\007\300W\"W%\202\253\364?\034|5\206m\274\324?\212\276\2332u*\260\277\223\310x\304\226\232\344\277o\020\335\254U\212\360?\006\240)w\306\376\334?\333\246uC\315\263\365?\033\254b\307\203\207\000@\210\332\362<\303\273\350\277\n\331\321w\371\217\340?Sl\"\323+\217V?\n\331\321w\371\217\340?L4\321\235\256\314\370?\333\246uC\315\263\365?\210\332\362<\303\273\350\277RI\t\247{\260\330\277k\365\251\361\205\355\356\277.\221m\217:\240\364\2779\177\363\026\016\177\360\277\362y\006\223W\253\005\3009\177\363\026\016\177\360\277\373\002B\212\223W\300\277\210\332\362<\303\273\350\277\223\310x\304\226\232\344\277\355\363\210,\274\301\346?\312\301,\370\217\345\373?W\"W%\202\253\364?<O\210Rq\376\376?W\"W%\202\253\364?\006\240)w\306\376\334?\034|5\206m\274\324?v\343/yY\314\352\277\327\027}\035\025\004\357?RI\t\247{\260\330\277w7\217.O\217\324\277\034|5\206m\274\324?\245\025\214\255\205\250\365\2779\177\363\026\016\177\360\277o\020\335\254U\212\360?\2240CbH\332\373\277}\354l\265\357\334\354\277\364\374\305hR\322\350?\351\016@\341~\363\354?9\177\363\026\016\177\360\277\223\310x\304\226\232\344\277\377\352K\360%\261\344?W\"W%\202\253\364?\031\'6{\354\231\310\277\036\254$D\375\321\372\277w7\217.O\217\324\277\333\246uC\315\263\365?\346\224\373\312\240\222\361?\340\2358\0077\243\363?\260\003\0225Y\207\361\277\327\027}\035\025\004\357?9\177\363\026\016\177\360\277k\365\251\361\205\355\356\277\023\276\236\274)\363\376\2773\2100S\244\217\362\277\346\224\373\312\240\222\361?RI\t\247{\260\330\277h%\025\266\"n\320\277\237\036\311\351\033\271\367\277\255\214\2169\320\261\300?\223\310x\304\226\232\344\277w7\217.O\217\324\277\223\310x\304\226\232\344\277\006\240)w\306\376\334?:\263\330\345\346\036\004\300\373\002B\212\223W\300\277\2240CbH\332\373\277X\367\256\222?\034\003@\302%}\213\005\006\001\300\236\266\376Kjy\340\277\342\005\003\245\350\342\352?-[\203\037\250\321\334\277\260\003\0225Y\207\361\277\373\002B\212\223W\300\277\237\036\311\351\033\271\367\277c\260\202*)\364\310?\312\301,\370\217\345\373?\212\276\2332u*\260\277\212\276\2332u*\260\277\333\246uC\315\263\365?v\343/yY\314\352\277\2240CbH\332\373\277o\020\335\254U\212\360?w7\217.O\217\324\277\346\224\373\312\240\222\361?\006\240)w\306\376\334?\342\005\003\245\350\342\352?\223\310x\304\226\232\344\277RI\t\247{\260\330\277c\260\202*)\364\310?\214\277;\210\000\212\342\277c\260\202*)\364\310?W\"W%\202\253\364?\031\'6{\354\231\310\277\036\254$D\375\321\372\277\351\016@\341~\363\354?j\031\032\351\353\232\362?\006\240)w\306\376\334?}\354l\265\357\334\354\277\377\352K\360%\261\344?@j\273\rA\233\320?w7\217.O\217\324\277R+\224a\030\274\366?h%\025\266\"n\320\277w7\217.O\217\324\277\223\310x\304\226\232\344\277\312\301,\370\217\345\373?\200\343m\374\337\201\000\300\006\240)w\306\376\334?\245\025\214\255\205\250\365\277\312\301,\370\217\345\373?\034|5\206m\274\324?\212\276\2332u*\260\277c\260\202*)\364\310?\342\005\003\245\350\342\352?\340iS8^\003\000@\006\240)w\306\376\334?\327\027}\035\025\004\357?@j\273\rA\233\320?\370\341\016\264\217\240\342?\373\002B\212\223W\300\277\333\246uC\315\263\365?w7\217.O\217\324\277\377\352K\360%\261\344?\036\3214\221\356\336\260?\346\224\373\312\240\222\361?\n\331\321w\371\217\340?w7\217.O\217\324\277\034|5\206m\274\324?v\343/yY\314\352\277c\260\202*)\364\310?\355\363\210,\274\301\346?v\343/yY\314\352\277@j\273\rA\233\320?\212\276\2332u*\260\277\255\214\2169\320\261\300?\034|5\206m\274\324?\214\277;\210\000\212\342\277\320\270\357\273\371\324\371?\236\266\376Kjy\340\277\201\321\265\000-\253\346\277\255\214\2169\320\261\300?\327\027}\035\025\004\357?\214\277;\210\000\212\342\277\034|5\206m\274\324?\214\277;\210\000\212\342\277\211B\275\332t\373\377\277\232\'\006&\262\311\371\277@j\273\rA\233\320?\212\276\2332u*\260\277o\020\335\254U\212\360?h%\025\266\"n\320\277@j\273\rA\233\320?\236\266\376Kjy\340\277\370\341\016\264\217\240\342?\210\332\362<\303\273\350\277w7\217.O\217\324\277\351\016@\341~\363\354?R+\224a\030\274\366?Sl\"\323+\217V?k\365\251\361\205\355\356\277\212\276\2332u*\260\277@j\273\rA\233\320?\036\3214\221\356\336\260?\255\214\2169\320\261\300?\236\266\376Kjy\340\277\212\276\2332u*\260\2779\177\363\026\016\177\360\277@j\273\rA\233\320?-[\203\037\250\321\334\277Sl\"\323+\217V?\n\331\321w\371\217\340?RI\t\247{\260\330\277\210\332\362<\303\273\350\277\2240CbH\332\373\2773\2100S\244\217\362\277\034|5\206m\274\324?c\260\202*)\364\310?\006\240)w\306\376\334?-[\203\037\250\321\334\277\232\'\006&\262\311\371\277\034|5\206m\274\324?\214\277;\210\000\212\342\277\351\016@\341~\363\354?\201\321\265\000-\253\346\277\n\331\321w\371\217\340?w7\217.O\217\324\277\355\363\210,\274\301\346?\333\246uC\315\263\365?\2240CbH\332\373\277k\365\251\361\205\355\356\277RI\t\247{\260\330\277\034|5\206m\274\324?\351\016@\341~\363\354?\212\276\2332u*\260\277\036\254$D\375\321\372\277\212\276\2332u*\260\277c\260\202*)\364\310?h%\025\266\"n\320\277\325\257\262\177c\304\367?}\354l\265\357\334\354\277\214\277;\210\000\212\342\277\n\331\321w\371\217\340?\2239\276!e\240\003@3\2100S\244\217\362\277\255\214\2169\320\261\300?\n\331\321w\371\217\340?)\232\252\313\320\260\366\277v\343/yY\314\352\277\212\276\2332u*\260\277Sl\"\323+\217V?}\354l\265\357\334\354\277*\216\257\376\231\335\330?\031\'6{\354\231\310\277\325\257\262\177c\304\367?\377\352K\360%\261\344?@j\273\rA\233\320?#\243\347\007g\301\370\277\255\214\2169\320\261\300?\333\246uC\315\263\365?\362y\006\223W\253\005\300-[\203\037\250\321\334\277\214\277;\210\000\212\342\277Sl\"\323+\217V?\201\321\265\000-\253\346\277*\216\257\376\231\335\330?\245\025\214\255\205\250\365\277\212\276\2332u*\260\277h%\025\266\"n\320\277\214\277;\210\000\212\342\277R+\224a\030\274\366?\364\374\305hR\322\350?@j\273\rA\233\320?\223\310x\304\226\232\344\277*\216\257\376\231\335\330?\214\277;\210\000\212\342\277-[\203\037\250\321\334\277\236\266\376Kjy\340\277*\216\257\376\231\335\330?\214\277;\210\000\212\342\277\346\224\373\312\240\222\361?\260\003\0225Y\207\361\277\036\3214\221\356\336\260?\245\025\214\255\205\250\365\277\364\374\305hR\322\350?\373\002B\212\223W\300\277Sl\"\323+\217V?\255\214\2169\320\261\300?\n\331\321w\371\217\340?\346\224\373\312\240\222\361?\333\246uC\315\263\365?c\260\202*)\364\310?k\365\251\361\205\355\356\277\214\277;\210\000\212\342\277v\343/yY\314\352\277\201\321\265\000-\253\346\277RI\t\247{\260\330\277\211B\275\332t\373\377\277-[\203\037\250\321\334\277\212\276\2332u*\260\277#\243\347\007g\301\370\277\211B\275\332t\373\377\277c\260\202*)\364\310?\212\276\2332u*\260\277}\354l\265\357\334\354\277\370\341\016\264\217\240\342?Sl\"\323+\217V?9\177\363\026\016\177\360\277@j\273\rA\233\320?\364\374\305hR\322\350?\006\240)w\306\376\334?o\020\335\254U\212\360?*\216\257\376\231\335\330?\034|5\206m\274\324?\377\352K\360%\261\344?\006\240)w\306\376\334?.\221m\217:\240\364\277\320\270\357\273\371\324\371?\034|5\206m\274\324?\006\240)w\306\376\334?Sl\"\323+\217V?\210\332\362<\303\273\350\277\274.\272\307\233\026\003\300*\216\257\376\231\335\330?\325\257\262\177c\304\367?v\343/yY\314\352\277@j\273\rA\233\320?-[\203\037\250\321\334\277c\260\202*)\364\310?\302%}\213\005\006\001\300\223\310x\304\226\232\344\277@j\273\rA\233\320?@j\273\rA\233\320?\325\257\262\177c\304\367?\236\266\376Kjy\340\277\236\266\376Kjy\340\277\252\014Oq\357\227\363\277\212\276\2332u*\260\277\212\276\2332u*\260\277\006\240)w\306\376\334?\377\352K\360%\261\344?\n\331\321w\371\217\340?\006\240)w\306\376\334?}\354l\265\357\334\354\277\210\332\362<\303\273\350\277\036\3214\221\356\336\260?G=\016\332D\335\372?\355\363\210,\274\301\346?\201\321\265\000-\253\346\277\210\332\362<\303\273\350\277}\354l\265\357\334\354\277\333\246uC\315\263\365?\034|5\206m\274\324?\212\276\2332u*\260\277\355\363\210,\274\301\346?k\365\251\361\205\355\356\277R+\224a\030\274\366?}\354l\265\357\334\354\277\260\003\0225Y\207\361\277\212\276\2332u*\260\277\364\374\305hR\322\350?\214\277;\210\000\212\342\277R\000\354\316\325,\005@\325{\315\260\212$\004@\237\036\311\351\033\271\367\277w7\217.O\217\324\277\342\005\003\245\350\342\352?\212\276\2332u*\260\277}\354l\265\357\334\354\277\n\331\321w\371\217\340?Sl\"\323+\217V?\212\276\2332u*\260\277\252\014Oq\357\227\363\277\355\363\210,\274\301\346?{\354\2528v\222\002\300-[\203\037\250\321\334\277k\365\251\361\205\355\356\277\355\363\210,\274\301\346?*\216\257\376\231\335\330?\325\257\262\177c\304\367?\036\3214\221\356\336\260?\2677\367\0032\'\005\300}]\262\022\276\342\013@w7\217.O\217\324\277\377\352K\360%\261\344?*\216\257\376\231\335\330?\214\277;\210\000\212\342\277\2179\200\236\336\352\375\2779\177\363\026\016\177\360\277\373\002B\212\223W\300\277\212\276\2332u*\260\277}\354l\265\357\334\354\277v\343/yY\314\352\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "*\363i\'3\237\316\277\276\312:r,\003\255?\2410\030?\314}\343\277B\246\330Z\314\037\341\277\274\311k\2263\'\305\277\2410\030?\314}\343\277\016#\263$\231\307\330\277\2410\030?\314}\343\277*\363i\'3\237\316\277B\246\330Z\314\037\341\277\2410\030?\314}\343\277R\0164\\\231\013\324\277*\363i\'3\237\316\277\2410\030?\314}\343\277\31372\355\230\203\335\277\016#\263$\231\307\330\277\226\005\213>\3120\312?\206@\333\nh^\267\277\017)\036z18\356?B\246\330Z\314\037\341\277*\363i\'3\237\316\277\31372\355\230\203\335\277\375\272W#\314\333\345\277\31372\355\230\203\335\277\274\311k\2263\'\305\277\375\272W#\314\333\345\277\016#\263$\231\307\330\277\205\324\022B\213\321\017@H\003\345\305\013\223\004@R\0164\\\231\013\324\277\375\272W#\314\333\345\277R\0164\\\231\013\324\277\027Z\026\320\313\365\354\277n\242\1775\005\025\031@B\246\330Z\314\037\341\277N\266{\243\243\271\221\277\231\377\037\3511\300\344?B\246\330Z\314\037\341\277R\0164\\\231\013\324\277\016#\263$\231\307\330\277\276\312:r,\003\255?B\246\330Z\314\037\341\277*\363i\'3\237\316\277u\344U\264\313S\357\277^\206\262L\3422#@\231\377\037\3511\300\344?\206@\333\nh^\267\277\016#\263$\231\307\330\277R\0164\\\231\013\324\277\375\272W#\314\333\345\277\\E\227\007\3149\350\277\274\311k\2263\'\305\277\206@\333\nh^\267\277\336\345\364\276\213*\005@*\363i\'3\237\316\277\206@\333\nh^\267\277*\363i\'3\237\316\277)\334\214\255\312\270\300?\030>\305\323\013d\003@\337\352\240 2\004\340?N\266{\243\243\271\221\277\375\272W#\314\333\345\277\31372\355\230\203\335\277\2410\030?\314}\343\277\016#\263$\231\307\330\277*\363i\'3\237\316\277R\0164\\\231\013\324\277:u\340\0042b\342?\274\311k\2263\'\305\277\2410\030?\314}\343\277*\363i\'3\237\316\277\226\005\213>\3120\312?\375\272W#\314\333\345\277:u\340\0042b\342?R\0164\\\231\013\324\277)\334\214\255\312\270\300?\206@\333\nh^\267\277\276\312:r,\003\255?\324RD\234\013 \010@\\\310L2\030\362\372?R\0164\\\231\013\324\277\376=\rN\030\224\370?U\024\237\2611|\351?R\0164\\\231\013\324\277*\363i\'3\237\316\2778\327X~E\336\022@)\334\214\255\312\270\300?\016#\263$\231\307\330\277R\0164\\\231\013\324\277\210\227\304\347d\324\321?*\363i\'3\237\316\277\016#\263$\231\307\330\277D\254C\260d\220\326?N\266{\243\243\271\221\277R\0164\\\231\013\324\277\016#\263$\231\307\330\277\2410\030?\314}\343\277N\266{\243\243\271\221\277D\254C\260d\220\326?\206@\333\nh^\267\277\016#\263$\231\307\330\277D\254C\260d\220\326?\203\310\340z\005*\023@\274\311k\2263\'\305\277\376=\rN\030\224\370?\271\215nN\002\r#@N\266{\243\243\271\221\277\276\312:r,\003\255?R\226\225\350\213\235\001@\016#\263$\231\307\330\277\016#\263$\231\307\330\277\016#\263$\231\307\330\277N\266{\243\243\271\221\277*\363i\'3\237\316\277\274\311k\2263\'\305\277*\363i\'3\237\316\277\016#\263$\231\307\330\277D\254C\260d\220\326?*\363i\'3\237\316\277\31372\355\230\203\335\277B\246\330Z\314\037\341\277\016#\263$\231\307\330\277\31372\355\230\203\335\277N\266{\243\243\271\221\277B\246\330Z\314\037\341\277\016#\263$\231\307\330\277*\363i\'3\237\316\277\274\311k\2263\'\305\277\016#\263$\231\307\330\277\\E\227\007\3149\350\277)\334\214\255\312\270\300?\31372\355\230\203\335\277N\266{\243\243\271\221\277\274\311k\2263\'\305\277\016#\263$\231\307\330\277\375\272W#\314\333\345\277\017)\036z18\356?\276\312:r,\003\255?\016#\263$\231\307\330\277B\246\330Z\314\037\341\277B\246\330Z\314\037\341\277B\246\330Z\314\037\341\277\274\311k\2263\'\305\277\017)\036z18\356?N\266{\243\243\271\221\277*\363i\'3\237\316\277\2410\030?\314}\343\277\272\317\326\353\313\227\352\277R\0164\\\231\013\324\277\31372\355\230\203\335\277)\334\214\255\312\270\300?\016\253\024\261\213Y\006@\016#\263$\231\307\330\277\016#\263$\231\307\330\277N\266{\243\243\271\221\277D\254C\260d\220\326?R\226\225\350\213\235\001@\337\352\240 2\004\340?\31372\355\230\203\335\277\366\203\364w\231\255\321\277*\363i\'3\237\316\277\016#\263$\231\307\330\277\2410\030?\314}\343\277\375\272W#\314\333\345\277\226\005\213>\3120\312?*\363i\'3\237\316\277\276\312:r,\003\255?\r\213\226\363D\264\036@*\363i\'3\237\316\277\332L\031\232E\200\020@\276\312:r,\003\255?\206@\333\nh^\267\277\206@\333\nh^\267\277R\0164\\\231\013\324\277\375\272W#\314\333\345\277R\0164\\\231\013\324\277\276\312:r,\003\255?\272R\214\026\030P\375?\226\005\213>\3120\312?*\363i\'3\237\316\277\31372\355\230\203\335\277\016#\263$\231\307\330\277\016#\263$\231\307\330\277\206@\333\nh^\267\277\206@\333\nh^\267\277\016#\263$\231\307\330\277\31372\355\230\203\335\277\206@\333\nh^\267\277\016#\263$\231\307\330\277\274\311k\2263\'\305\277N\266{\243\243\271\221\277H\003\345\305\013\223\004@*\363i\'3\237\316\277D\254C\260d\220\326?*\363i\'3\237\316\277\276\312:r,\003\255?\231\377\037\3511\300\344?\023dn\223\030\251\362?\337\352\240 2\004\340?N\266{\243\243\271\221\277\206@\333\nh^\267\277*\363i\'3\237\316\277\212\316\347?\3051\030@\246\215$\252\013\361\006@\016#\263$\231\307\330\277\375\272W#\314\333\345\277B\246\330Z\314\037\341\277\206@\333\nh^\267\277\016#\263$\231\307\330\277s\336\352^3\343\311\277r\356\255w\030\007\365?N\266{\243\243\271\221\277B\246\330Z\314\037\341\277N\266{\243\243\271\221\277\226\005\213>\3120\312?\31372\355\230\203\335\277\276\312:r,\003\255?\276\312:r,\003\255?B\246\330Z\314\037\341\277\226\005\213>\3120\312?*\363i\'3\237\316\277*\363i\'3\237\316\277r\356\255w\030\007\365?*\363i\'3\237\316\277\276\312:r,\003\255?)\334\214\255\312\270\300?\272\317\326\353\313\227\352\277\276\312:r,\003\255?B\246\330Z\314\037\341\277\274\311k\2263\'\305\277\31372\355\230\203\335\277\030>\305\323\013d\003@D\254C\260d\220\326?\2410\030?\314}\343\277\375\272W#\314\333\345\277B\246\330Z\314\037\341\277\023dn\223\030\251\362?*\363i\'3\237\316\277)\334\214\255\312\270\300?\337\352\240 2\004\340?R\0164\\\231\013\324\277\31372\355\230\203\335\277B\246\330Z\314\037\341\277\226\005\213>\3120\312?\276\312:r,\003\255?\2410\030?\314}\343\277)\334\214\255\312\270\300?)\334\214\255\312\270\300?*\363i\'3\237\316\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277\2410\030?\314}\343\277\2410\030?\314}\343\277\\E\227\007\3149\350\277N\266{\243\243\271\221\277\001\301\302xdL\333?\272\317\326\353\313\227\352\277\2410\030?\314}\343\277\031\335\313\372\027\256\377?\272\317\326\353\313\227\352\277\016#\263$\231\307\330\277\231\377\037\3511\300\344?\31372\355\230\203\335\277*\363i\'3\237\316\277\274\311k\2263\'\305\277\267\331.\257\030K\360?D\254C\260d\220\326?R\0164\\\231\013\324\277)\334\214\255\312\270\300?\274\311k\2263\'\305\277u\344U\264\313S\357\277D\254C\260d\220\326?\272\317\326\353\313\227\352\277\206@\333\nh^\267\277B\246\330Z\314\037\341\277\016#\263$\231\307\330\277)\334\214\255\312\270\300?\206@\333\nh^\267\277B\246\330Z\314\037\341\277\274\311k\2263\'\305\277R\226\225\350\213\235\001@\2410\030?\314}\343\277\2410\030?\314}\343\277R\0164\\\231\013\324\277N\266{\243\243\271\221\277\31372\355\230\203\335\277\206@\333\nh^\267\277*\363i\'3\237\316\277\016#\263$\231\307\330\277\016#\263$\231\307\330\277\206@\333\nh^\267\277\206@\333\nh^\267\277B\246\330Z\314\037\341\277\\E\227\007\3149\350\277\375\272W#\314\333\345\277N\266{\243\243\271\221\277\016#\263$\231\307\330\277\210\227\304\347d\324\321?\276\312:r,\003\255?\272\317\326\353\313\227\352\277\016#\263$\231\307\330\277\276\312:r,\003\255?R\0164\\\231\013\324\277\274\311k\2263\'\305\277D\254C\260d\220\326?\\E\227\007\3149\350\277)\334\214\255\312\270\300?N\266{\243\243\271\221\277R\0164\\\231\013\324\277\016#\263$\231\307\330\277\230 \035G\230+\371?R\0164\\\231\013\324\277\274\311k\2263\'\305\277\31372\355\230\203\335\277\274\311k\2263\'\305\277\206@\333\nh^\267\277R\0164\\\231\013\324\277\206@\333\nh^\267\277\016#\263$\231\307\330\277\276\312:r,\003\255?N\266{\243\243\271\221\277r\356\255w\030\007\365?\001\301\302xdL\333?\276\312:r,\003\255?\276\312:r,\003\255?\231\377\037\3511\300\344?N\266{\243\243\271\221\277\206@\333\nh^\267\277\016#\263$\231\307\330\277\372\264\354\3153k\300\277\226\005\213>\3120\312?B\246\330Z\314\037\341\277R\226\225\350\213\235\001@\017)\036z18\356?\31372\355\230\203\335\277\272\317\326\353\313\227\352\277\355\361\002I\013:\017@\31372\355\230\203\335\277\337\352\240 2\004\340?\226\005\213>\3120\312?\276\312:r,\003\255?\016#\263$\231\307\330\277\206@\333\nh^\267\277N\266{\243\243\271\221\277\016#\263$\231\307\330\277\210\227\304\347d\324\321?\2410\030?\314}\343\277R\0164\\\231\013\324\277\210\227\304\347d\324\321?*\363i\'3\237\316\277\2410\030?\314}\343\277\276\312:r,\003\255?\375\272W#\314\333\345\277\276\312:r,\003\255?\016#\263$\231\307\330\277D\254C\260d\220\326?B\246\330Z\314\037\341\277D\254C\260d\220\326?R\0164\\\231\013\324\277U\024\237\2611|\351?*\363i\'3\237\316\277\206@\333\nh^\267\277)\334\214\255\312\270\300?qk\370L\314N\342\277\350\027\254\010\030\177\376?D\254C\260d\220\326?\264\236\336\2251\332\353?\351x\245\341\0135\002@\206@\333\nh^\267\277R\0164\\\231\013\324\277\276\312:r,\003\255?\206@\333\nh^\267\277*\363i\'3\237\316\277\336\345\364\276\213*\005@\376=\rN\030\224\370?N\266{\243\243\271\221\277R\0164\\\231\013\324\277B\246\330Z\314\037\341\277B\246\330Z\314\037\341\277\31372\355\230\203\335\277\346\236N\241\030z\361?R\0164\\\231\013\324\277\206@\333\nh^\267\277\016#\263$\231\307\330\277\272\317\326\353\313\227\352\277N\266{\243\243\271\221\277\226\005\213>\3120\312?\206@\333\nh^\267\277\274\311k\2263\'\305\277*\363i\'3\237\316\277*\363i\'3\237\316\277H\003\345\305\013\223\004@\206@\333\nh^\267\277*\363i\'3\237\316\277\375\272W#\314\333\345\277\016#\263$\231\307\330\277\276\312:r,\003\255?\375\272W#\314\333\345\277\226\005\213>\3120\312?\375\272W#\314\333\345\277\346\236N\241\030z\361?\337\352\240 2\004\340?a\242\243r\013\255\013@\31372\355\230\203\335\277\31372\355\230\203\335\277\016#\263$\231\307\330\277\355\361\002I\013:\017@N\266{\243\243\271\221\277\242\263\315i\0306\366?B\246\330Z\314\037\341\277r\356\255w\030\007\365?\337\352\240 2\004\340?B\246\330Z\314\037\341\277\276\312:r,\003\255?R\0164\\\231\013\324\277)\334\214\255\312\270\300?\274\311k\2263\'\305\277\276\312:r,\003\255?*\363i\'3\237\316\277\370\204\263k\213D\014@\210\227\304\347d\324\321?\\E\227\007\3149\350\277\231\377\037\3511\300\344?\272\317\326\353\313\227\352\277\31372\355\230\203\335\277\017)\036z18\356?:u\340\0042b\342?\016#\263$\231\307\330\277\274\311k\2263\'\305\277\2410\030?\314}\343\277\016#\263$\231\307\330\277\276\312:r,\003\255?\274\311k\2263\'\305\277\016#\263$\231\307\330\277\320x\355[\030e\367?\242\263\315i\0306\366?\016#\263$\231\307\330\277B\246\330Z\314\037\341\277\016#\263$\231\307\330\277\016#\263$\231\307\330\277\276\312:r,\003\255?R\0164\\\231\013\324\277B\246\330Z\314\037\341\277\31372\355\230\203\335\277\027Z\026\320\313\365\354\277\276\312:r,\003\255?\31372\355\230\203\335\277\31372\355\230\203\335\277B\246\330Z\314\037\341\277\016#\263$\231\307\330\277\210\227\304\347d\324\321?)\334\214\255\312\270\300?\\E\227\007\3149\350\277B\246\330Z\314\037\341\277\375\272W#\314\333\345\277\2410\030?\314}\343\277\274\311k\2263\'\305\277R\0164\\\231\013\324\277*\363i\'3\237\316\277\375\272W#\314\333\345\277\016#\263$\231\307\330\277\206@\333\nh^\267\277\2410\030?\314}\343\277\206@\333\nh^\267\277R\0164\\\231\013\324\277\226\005\213>\3120\312?*\363i\'3\237\316\277\276\312:r,\003\255?*\363i\'3\237\316\277\206@\333\nh^\267\277B\246\330Z\314\037\341\277*\363i\'3\237\316\277\226\005\213>\3120\312?\276\312:r,\003\255?)\334\214\255\312\270\300?\31372\355\230\203\335\277\31372\355\230\203\335\277\023dn\223\030\251\362?\016#\263$\231\307\330\277u\344U\264\313S\357\277\2410\030?\314}\343\277R\0164\\\231\013\324\277\2410\030?\314}\343\277\2410\030?\314}\343\277\\E\227\007\3149\350\277\016#\263$\231\307\330\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277\31372\355\230\203\335\277N\266{\243\243\271\221\277\226\005\213>\3120\312?N\266{\243\243\271\221\277\016#\263$\231\307\330\277\375\272W#\314\333\345\277\016#\263$\231\307\330\277R\0164\\\231\013\324\277:u\340\0042b\342?N\266{\243\243\271\221\277\375\272W#\314\333\345\277\31372\355\230\203\335\277\320\36571\314\254\344\277B\246\330Z\314\037\341\277\31372\355\230\203\335\277\375\272W#\314\333\345\277\274\311k\2263\'\305\277\016#\263$\231\307\330\277*\363i\'3\237\316\277\206@\333\nh^\267\277\375\272W#\314\333\345\277\31372\355\230\203\335\277\226\005\213>\3120\312?\016#\263$\231\307\330\277N\266{\243\243\271\221\277\205\324\022B\213\321\017@*\363i\'3\237\316\277\016#\263$\231\307\330\277N\266{\243\243\271\221\277\31372\355\230\203\335\277\31372\355\230\203\335\277\2410\030?\314}\343\277\206@\333\nh^\267\277\31372\355\230\203\335\277R\0164\\\231\013\324\277B\246\330Z\314\037\341\277N\266{\243\243\271\221\277\\E\227\007\3149\350\277\276\312:r,\003\255?:u\340\0042b\342?\274\311k\2263\'\305\277\226\005\213>\3120\312?:u\340\0042b\342?\375\272W#\314\333\345\277*\363i\'3\237\316\277\31372\355\230\203\335\277\274\311k\2263\'\305\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277\274\311k\2263\'\305\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277:u\340\0042b\342?B\246\330Z\314\037\341\277\276\312:r,\003\255?\210\227\304\347d\324\321?\206@\333\nh^\267\277\31372\355\230\203\335\277N\266{\243\243\271\221\277D)\216\205\030\330\363?\202\372\273\001\230\026\377?B\246\330Z\314\037\341\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277N\266{\243\243\271\221\277\016#\263$\231\307\330\277\31372\355\230\203\335\277B\246\330Z\314\037\341\277*\363i\'3\237\316\277N\266{\243\243\271\221\277N\266{\243\243\271\221\277N\266{\243\243\271\221\277\016#\263$\231\307\330\277\375\272W#\314\333\345\277\016#\263$\231\307\330\277\206@\333\nh^\267\277\226\005\213>\3120\312?\226\005\213>\3120\312?N\266{\243\243\271\221\277R\0164\\\231\013\324\277B\246\330Z\314\037\341\277\016#\263$\231\307\330\277\346\236N\241\030z\361?\272\317\326\353\313\227\352\277\31372\355\230\203\335\277\375\272W#\314\333\345\277\\E\227\007\3149\350\277\226\005\213>\3120\312?\206@\333\nh^\267\277B\246\330Z\314\037\341\277\337\352\240 2\004\340?N\266{\243\243\271\221\277N\266{\243\243\271\221\277\206@\333\nh^\267\277*\363i\'3\237\316\277\261 \325\314\213\373\003@\\E\227\007\3149\350\277\272\317\326\353\313\227\352\277\210\227\304\347d\324\321?\246\215$\252\013\361\006@\226\005\213>\3120\312?)\334\214\255\312\270\300?B\246\330Z\314\037\341\277N\266{\243\243\271\221\277\2410\030?\314}\343\277\351x\245\341\0135\002@N\266{\243\243\271\221\277\206@\333\nh^\267\277B\246\330Z\314\037\341\277\016#\263$\231\307\330\277N\266{\243\243\271\221\277*\363i\'3\237\316\277\016#\263$\231\307\330\277)\334\214\255\312\270\300?\206@\333\nh^\267\277\206@\333\nh^\267\277\375\272W#\314\333\345\277r\356\255w\030\007\365?\31372\355\230\203\335\277\226\005\213>\3120\312?R\0164\\\231\013\324\277\206@\333\nh^\267\277D\254C\260d\220\326?\2410\030?\314}\343\277\016#\263$\231\307\330\277)\334\214\255\312\270\300?\337\352\240 2\004\340?\31372\355\230\203\335\277\016#\263$\231\307\330\277*\363i\'3\237\316\277\274\311k\2263\'\305\277\016#\263$\231\307\330\277\226\005\213>\3120\312?\001\301\302xdL\333?\001\374rh\342\324 @R\0164\\\231\013\324\277\016#\263$\231\307\330\277\375\272W#\314\333\345\277\375\272W#\314\333\345\277B\246\330Z\314\037\341\277\31372\355\230\203\335\277*\363i\'3\237\316\277\375\272W#\314\333\345\277\31372\355\230\203\335\277*\363i\'3\237\316\277\016#\263$\231\307\330\277U\024\237\2611|\351?*\363i\'3\237\316\277\31372\355\230\203\335\277B\246\330Z\314\037\341\277U\024\237\2611|\351?*\363i\'3\237\316\277\206@\333\nh^\267\277\276\312:r,\003\255?\375\272W#\314\333\345\277*\363i\'3\237\316\277*\363i\'3\237\316\277*\363i\'3\237\316\277\375\272W#\314\333\345\277\016#\263$\231\307\330\277\272\317\326\353\313\227\352\277\375\272W#\314\333\345\277\276\312:r,\003\255?B\246\330Z\314\037\341\277R\0164\\\231\013\324\277\016#\263$\231\307\330\277\2410\030?\314}\343\277\276\312:r,\003\255?\274\311k\2263\'\305\277*\363i\'3\237\316\277R\0164\\\231\013\324\277\206@\333\nh^\267\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277\206@\333\nh^\267\277\31372\355\230\203\335\277\\E\227\007\3149\350\277*\363i\'3\237\316\277\016#\263$\231\307\330\277\31372\355\230\203\335\277\375\272W#\314\333\345\277R\0164\\\231\013\324\277\206@\333\nh^\267\277\206@\333\nh^\267\277\264\236\336\2251\332\353?\31372\355\230\203\335\277*\363i\'3\237\316\277R\0164\\\231\013\324\277\016#\263$\231\307\330\277*\363i\'3\237\316\277N\266{\243\243\271\221\277\276\312:r,\003\255?R\0164\\\231\013\324\277\274\311k\2263\'\305\277\\E\227\007\3149\350\277\276\312:r,\003\255?\276\312:r,\003\255?\206@\333\nh^\267\277\016#\263$\231\307\330\277\31372\355\230\203\335\277\\E\227\007\3149\350\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277\320x\355[\030e\367?\206@\333\nh^\267\277\016#\263$\231\307\330\277\276\312:r,\003\255?R\0164\\\231\013\324\277\31372\355\230\203\335\277\31372\355\230\203\335\277\31372\355\230\203\335\277\267\331.\257\030K\360?\016#\263$\231\307\330\277\274\311k\2263\'\305\277N\266{\243\243\271\221\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277R\0164\\\231\013\324\277\016#\263$\231\307\330\277\016#\263$\231\307\330\277w\310\004\270\013\302\005@D\254C\260d\220\326?\226\005\213>\3120\312?*\363i\'3\237\316\277U\024\237\2611|\351?B\246\330Z\314\037\341\277R\0164\\\231\013\324\277qk\370L\314N\342\277\375\272W#\314\333\345\277\016#\263$\231\307\330\277\276\312:r,\003\255?\311\304?\3331\357\345?\206@\333\nh^\267\277\274\311k\2263\'\305\277\206@\333\nh^\267\277\31372\355\230\203\335\277\016#\263$\231\307\330\277\274\311k\2263\'\305\277\206@\333\nh^\267\277B\246\330Z\314\037\341\277B\246\330Z\314\037\341\277)\334\214\255\312\270\300?B\246\330Z\314\037\341\277R\0164\\\231\013\324\277B\246\330Z\314\037\341\277R\0164\\\231\013\324\277\354\345\320\201\205\222\022@\2410\030?\314}\343\277\274\311k\2263\'\305\277N\266{\243\243\271\221\277\274\311k\2263\'\305\277B\246\330Z\314\037\341\277\31372\355\230\203\335\277)\334\214\255\312\270\300?\274\311k\2263\'\305\277\206@\333\nh^\267\277*\363i\'3\237\316\277\31372\355\230\203\335\277R\0164\\\231\013\324\277\016#\263$\231\307\330\277\307A\212\260\3456\363\277\2410\030?\314}\343\277\2410\030?\314}\343\277\231\377\037\3511\300\344?\272\317\326\353\313\227\352\277R\0164\\\231\013\324\277\206@\333\nh^\267\277B\246\330Z\314\037\341\277*\363i\'3\237\316\277\276\312:r,\003\255?\274\311k\2263\'\305\277\274\311k\2263\'\305\277*\363i\'3\237\316\277\2410\030?\314}\343\277\31372\355\230\203\335\277R\0164\\\231\013\324\277\276\312:r,\003\255?B\246\330Z\314\037\341\277\001\301\302xdL\333?R\0164\\\231\013\324\277B\246\330Z\314\037\341\277\226\005\213>\3120\312?\272\317\326\353\313\227\352\277D\254C\260d\220\326?\276\312:r,\003\255?\016\253\024\261\213Y\006@\2410\030?\314}\343\277\31372\355\230\203\335\277)\334\214\255\312\270\300?\276\312:r,\003\255?\231\377\037\3511\300\344?\274\311k\2263\'\305\277N\266{\243\243\271\221\277\\E\227\007\3149\350\277B\246\330Z\314\037\341\277\210\227\304\347d\324\321?\375\272W#\314\333\345\277\016#\263$\231\307\330\277r/)\223\305\027\021@)\334\214\255\312\270\300?R\0164\\\231\013\324\277\367\211_\3151\036\347?*\363i\'3\237\316\277\210\227\304\347d\324\321?\016#\263$\231\307\330\277:u\340\0042b\342?\263\230s@\231i\326\277)\334\214\255\312\270\300?\276\312:r,\003\255?\272\317\326\353\313\227\352\277\2410\030?\314}\343\277B\246\330Z\314\037\341\277B\246\330Z\314\037\341\277\31372\355\230\203\335\277\016#\263$\231\307\330\277*\363i\'3\237\316\277\206@\333\nh^\267\277\274\311k\2263\'\305\277\016#\263$\231\307\330\277\210\227\304\347d\324\321?\375\272W#\314\333\345\277)\334\214\255\312\270\300?R\0164\\\231\013\324\277B\246\330Z\314\037\341\277R\0164\\\231\013\324\277B\246\330Z\314\037\341\277\016#\263$\231\307\330\277\206@\333\nh^\267\277N\266{\243\243\271\221\277N\266{\243\243\271\221\277\242\263\315i\0306\366?)\334\214\255\312\270\300?\274\311k\2263\'\305\277\016#\263$\231\307\330\277\31372\355\230\203\335\277B\246\330Z\314\037\341\277B\246\330Z\314\037\341\277\210\227\304\347d\324\321?B\246\330Z\314\037\341\277\203\331\276\2431\253\352?\31372\355\230\203\335\277R\0164\\\231\013\324\277\016#\263$\231\307\330\277\210a\274\237K\324\007@*\363i\'3\237\316\277\016#\263$\231\307\330\277\226\005\213>\3120\312?\\E\227\007\3149\350\277\016#\263$\231\307\330\277:u\340\0042b\342?\001\301\302xdL\333?\206@\333\nh^\267\277\276\312:r,\003\255?B\246\330Z\314\037\341\277\226\005\213>\3120\312?\274\311k\2263\'\305\277\2410\030?\314}\343\277B\246\330Z\314\037\341\277\226\005\213>\3120\312?N\266{\243\243\271\221\277*\363i\'3\237\316\277R\0164\\\231\013\324\277\31372\355\230\203\335\277B\246\330Z\314\037\341\277B\246\330Z\314\037\341\277\016#\263$\231\307\330\277\274\311k\2263\'\305\277\31372\355\230\203\335\277\226\005\213>\3120\312?\274\311k\2263\'\305\277\276\312:r,\003\255?R\0164\\\231\013\324\277\350\027\254\010\030\177\376?B\246\330Z\314\037\341\277h\357|\240Z&\224?\226\005\213>\3120\312?\274\311k\2263\'\305\277*\363i\'3\237\316\277\336\345\364\276\213*\005@B\246\330Z\314\037\341\277\304 \037q\202\027 @N\266{\243\243\271\221\277)\334\214\255\312\270\300?\206@\333\nh^\267\277\2410\030?\314}\343\277N\266{\243\243\271\221\277B\246\330Z\314\037\341\277\267\331.\257\030K\360?D)\216\205\030\330\363?\276\312:r,\003\255?\\E\227\007\3149\350\277B\246\330Z\314\037\341\277N\266{\243\243\271\221\277\206@\333\nh^\267\277\276\312:r,\003\255?*\363i\'3\237\316\277\31372\355\230\203\335\277\016#\263$\231\307\330\277\206@\333\nh^\267\277\31372\355\230\203\335\277\2410\030?\314}\343\277\276\312:r,\003\255?\272\317\326\353\313\227\352\277\023dn\223\030\251\362?\2410\030?\314}\343\277)\334\214\255\312\270\300?\016#\263$\231\307\330\277\274\311k\2263\'\305\277\276\312:r,\003\255?\2410\030?\314}\343\277\375\272W#\314\333\345\277\226\005\213>\3120\312?\016#\263$\231\307\330\277B\246\330Z\314\037\341\277\231\377\037\3511\300\344?\226\005\213>\3120\312?\2410\030?\314}\343\277*\363i\'3\237\316\277\31372\355\230\203\335\277\016#\263$\231\307\330\277\272\317\326\353\313\227\352\277D\254C\260d\220\326?\016#\263$\231\307\330\277R\0164\\\231\013\324\277\274\311k\2263\'\305\277\366\203\364w\231\255\321\277B\246\330Z\314\037\341\277\375\272W#\314\333\345\277D)\216\205\030\330\363?\276\312:r,\003\255?\375\272W#\314\333\345\277\31372\355\230\203\335\277*\363i\'3\237\316\277N\266{\243\243\271\221\277\016#\263$\231\307\330\277\031\335\313\372\027\256\377?B\246\330Z\314\037\341\277\272\317\326\353\313\227\352\277)\334\214\255\312\270\300?R\0164\\\231\013\324\277N\266{\243\243\271\221\277\276\312:r,\003\255?\31372\355\230\203\335\277N\266{\243\243\271\221\277\001\301\302xdL\333?\274\311k\2263\'\305\277l5T\225\213\267\010@D\254C\260d\220\326?\31372\355\230\203\335\277)\334\214\255\312\270\300?\016#\263$\231\307\330\277\274\311k\2263\'\305\277\210\227\304\347d\324\321?B\246\330Z\314\037\341\277R\0164\\\231\013\324\277\375\272W#\314\333\345\277\210\227\304\347d\324\321?\206@\333\nh^\267\277\231\377\037\3511\300\344?R\0164\\\231\013\324\277R\0164\\\231\013\324\277\\E\227\007\3149\350\277\376=\rN\030\224\370?*\363i\'3\237\316\277B\246\330Z\314\037\341\277*\363i\'3\237\316\277)\334\214\255\312\270\300?\016#\263$\231\307\330\277\2410\030?\314}\343\277\027Z\026\320\313\365\354\277B\246\330Z\314\037\341\277\226\005\213>\3120\312?:u\340\0042b\342?\274\311k\2263\'\305\277\031\335\313\372\027\256\377?\274\311k\2263\'\305\277\341c\376\2071\t\355?\2410\030?\314}\343\277\276\312:r,\003\255?D\254C\260d\220\326?)\334\214\255\312\270\300?\315\216\033\312\225\371\267?\210\227\304\347d\324\321?N\266{\243\243\271\221\277\276\312:r,\003\255?\210\227\304\347d\324\321?*\363i\'3\237\316\277\\\310L2\030\362\372?\2410\030?\314}\343\277\016#\263$\231\307\330\277u\344U\264\313S\357\277\016#\263$\231\307\330\277R\0164\\\231\013\324\277*\363i\'3\237\316\277B\246\330Z\314\037\341\277N\266{\243\243\271\221\277\2410\030?\314}\343\277\274\311k\2263\'\305\277\337\352\240 2\004\340?B\246\330Z\314\037\341\277\016#\263$\231\307\330\277\274\311k\2263\'\305\277\2410\030?\314}\343\277R\0164\\\231\013\324\277N\266{\243\243\271\221\277\272\317\326\353\313\227\352\277\274\311k\2263\'\305\277\31372\355\230\203\335\277B\246\330Z\314\037\341\277\027Z\026\320\313\365\354\277\274\311k\2263\'\305\277\276\312:r,\003\255?\337\352\240 2\004\340?\226\005\213>\3120\312?N\266{\243\243\271\221\277\31372\355\230\203\335\277\31372\355\230\203\335\277*\363i\'3\237\316\277\023dn\223\030\251\362?\016#\263$\231\307\330\277\375\272W#\314\333\345\277\274\311k\2263\'\305\277\274\311k\2263\'\305\277\274\311k\2263\'\305\277\274\311k\2263\'\305\277R\0164\\\231\013\324\277\206@\333\nh^\267\277\016#\263$\231\307\330\277\276\312:r,\003\255?B\246\330Z\314\037\341\277\2410\030?\314}\343\277\274\311k\2263\'\305\277N\266{\243\243\271\221\277B\246\330Z\314\037\341\277\'J\323]\213s\r@\274\311k\2263\'\305\277B\246\330Z\314\037\341\277R\0164\\\231\013\324\277\375\272W#\314\333\345\277R\0164\\\231\013\324\277D\254C\260d\220\326?)\334\214\255\312\270\300?\375\272W#\314\333\345\277\31372\355\230\203\335\277\274\311k\2263\'\305\277N\266{\243\243\271\221\277\276\312:r,\003\255?2\335\203\200\013~\n@\267\331.\257\030K\360?\016#\263$\231\307\330\277\226\005\213>\3120\312?\2410\030?\314}\343\277R\0164\\\231\013\324\277\016#\263$\231\307\330\277\272\317\326\353\313\227\352\277\375\272W#\314\333\345\277R\0164\\\231\013\324\277N\266{\243\243\271\221\277\261 \325\314\213\373\003@\272\317\326\353\313\227\352\277T\003\301\210\005\373\021@*\363i\'3\237\316\277\274\311k\2263\'\305\277\2410\030?\314}\343\277*\363i\'3\237\316\277\274\311k\2263\'\305\277\226\005\213>\3120\312?\016#\263$\231\307\330\277\375\272W#\314\333\345\277\276\312:r,\003\255?\016#\263$\231\307\330\277\016#\263$\231\307\330\277\016#\263$\231\307\330\277\274\311k\2263\'\305\277N\266{\243\243\271\221\277\375\272W#\314\333\345\277\231\377\037\3511\300\344?\31372\355\230\203\335\277B\246\330Z\314\037\341\277\264\236\336\2251\332\353?\274\311k\2263\'\305\277\016#\263$\231\307\330\277\274\311k\2263\'\305\277*\363i\'3\237\316\277B\246\330Z\314\037\341\277B\246\330Z\314\037\341\277\2410\030?\314}\343\277\274\311k\2263\'\305\277D\254C\260d\220\326?\274\311k\2263\'\305\277R\0164\\\231\013\324\277*\363i\'3\237\316\277\023dn\223\030\251\362?B\246\330Z\314\037\341\277R\0164\\\231\013\324\277*\363i\'3\237\316\277\016#\263$\231\307\330\277B\246\330Z\314\037\341\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "\262<$Q\305\037\341?\324h\244\334q\206\335\277p.rA^\211\305\277\223O\272\314\217\373\316?\033\362\016\267\027\306\331\277\325!}9\355C\346\277\324h\244\334q\206\335\277\306\357\034\001f\243\340\2774\\nYPq\020@\341\033\235\214\022\n\315\277yf\262&\300c\344\277\254\002\263|0\177\336?\262<$Q\305\037\341?\216\230\022_G\004\352\277\216\351\310lN\364\277?\352S\335qt\344\353\277\035\253\347\023\223\203\342\277\211<\323\001\324\027\177?\251\004\344kcE\322\277k\263\271v\037\340\344?\325!}9\355C\346\277\324h\244\334q\206\335\277\341\033\235\214\022\n\315\277\306\357\034\001f\243\340\277\2679\264\372\327\202\364\277\363\213\035W\326\276\332?b{y\221\275\005\326\2772\335GL\032$\350\277!b\217\201\333z\307?\341\033\235\214\022\n\315\277\216\230\022_G\004\352\277\216\230\022_G\004\352\277\341\033\235\214\022\n\315\277!b\217\201\333z\307?\262<$Q\305\037\341?2\335GL\032$\350\277vi\"}\255\000\361?\t\334Nq\301\222\363\277\243\312r\227\316\244\357\277\216\230\022_G\004\352\2773\\\257\324\000A\356?^\2149aCY\002@\306\357\034\001f\243\340\277\324h\244\334q\206\335\277\211<\323\001\324\027\177?\0227\304\357\270r\037@$\307\207\006\304\360\361?\352S\335qt\344\353\277\363\213\035W\326\276\332?\324h\244\334q\206\335\277\251\004\344kcE\322\2772\335GL\032$\350\277\033\362\016\267\027\306\331\277\216\351\310lN\364\277?2\335GL\032$\350\277\324h\244\334q\206\335\277\216\351\310lN\364\277?\000\303\036\325}\302\360\277\211<\323\001\324\027\177?\216\230\022_G\004\352\277\033\362\016\267\027\306\331\277\033\362\016\267\027\306\331\277\254\002\263|0\177\336?4N_[h\212\016@\306\357\034\001f\243\340\277\216\351\310lN\364\277?\335\240\344\301\323`\354?9\371\347>K\221\367?\251\004\344kcE\322\277G\017\250\204\241\304\355\277\226\264\262Qxq\371?\017\370\356c\362\377\342?\253\016s\326\345\362\260?\243\312r\227\316\244\357\277\200\202R\031\361\320\363?\251\004\344kcE\322\277b{y\221\275\005\326\277\251\004\344kcE\322\277\r\352\236\352YI\003@k\263\271v\037\340\344?;\025\2101|\376\326?$*O\234y\240\350?\211<\323\001\324\027\177?k\263\271v\037\340\344?\226\264\262Qxq\371?\335\240\344\301\323`\354?\251\004\344kcE\322\277\375\201\216\354S\021\274\277\260.\324\327,i\001@\211<\323\001\324\027\177?\017\370\356c\362\377\342?\324h\244\334q\206\335\277+\"\274\t\013\001\000@\325!}9\355C\346\277;\025\2101|\376\326?\2679\264\372\327\202\364\277b{y\221\275\005\326\2775Nq\254\326\037\252\277\035\253\347\023\223\203\342\277k\263\271v\037\340\344?[~\351\347\252\242\362\277\306\357\034\001f\243\340\277b{y\221\275\005\326\277\306\357\034\001f\243\340\277\375\201\216\354S\021\274\277k\263\271v\037\340\344?\254\002\263|0\177\336?\253\016s\326\345\362\260?\216\351\310lN\364\277?\310\013\275\363\226\020\360?\216\230\022_G\004\352\277\363\213\035W\326\276\332?\033\362\016\267\027\306\331\277p.rA^\211\305\277yf\262&\300c\344\2775;\354\245N\321\002@\306\357\034\001f\243\340\277\254\002\263|0\177\336?5Nq\254\326\037\252\2775Nq\254\326\037\252\277\375\201\216\354S\021\274\277\000\303\036\325}\302\360\277\251\004\344kcE\322\277\325!}9\355C\346\277\200\202R\031\361\320\363?\200\345\031\257\246\200\352?\243\312r\227\316\244\357\277\352S\335qt\344\353\277q\276\231\231\312\371\007@\322$\355\217\332\340\362?\254\002\263|0\177\336?2\335GL\032$\350\277;\025\2101|\376\326?\324h\244\334q\206\335\277\363\213\035W\326\276\332?\310\013\275\363\226\020\360?\335\240\344\301\323`\354?\352S\335qt\344\353\277\200\202R\031\361\320\363?\202\236\362\013\">\323?2\335GL\032$\350\277\341\033\235\214\022\n\315\277\341\033\235\214\022\n\315\277/\340\267\242\007\301\364?\341\033\235\214\022\n\315\277yf\262&\300c\344\277\375\201\216\354S\021\274\277\256 \204^\224\262\361\277\202\236\362\013\">\323?\335\240\344\301\323`\354?\306\357\034\001f\243\340\277\035\253\347\023\223\203\342\277\324h\244\334q\206\335\277\375\201\216\354S\021\274\277\223O\272\314\217\373\316?p.rA^\211\305\277\202\236\362\013\">\323?\211<\323\001\324\027\177?\223O\272\314\217\373\316?\251\004\344kcE\322\277\2679\264\372\327\202\364\277\035\253\347\023\223\203\342\277\243\312r\227\316\244\357\277[~\351\347\252\242\362\277\325!}9\355C\346\277G\017\250\204\241\304\355\277\341\033\235\214\022\n\315\277\035\253\347\023\223\203\342\277\341\033\235\214\022\n\315\277\324h\244\334q\206\335\277\216\351\310lN\364\277?\024\003\317\206\235\031\006@\306\357\034\001f\243\340\277\341\033\235\214\022\n\315\277\200\202R\031\361\320\363?\341\033\235\214\022\n\315\277\307n\204\211L\300\346?\216\230\022_G\004\352\277\253\016s\326\345\362\260?vi\"}\255\000\361?\307n\204\211L\300\346?\000\303\036\325}\302\360\277\216\230\022_G\004\352\277\335\240\344\301\323`\354?\034\016\257\251H3\371\277\341\033\235\214\022\n\315\277\325!}9\355C\346\2772\335GL\032$\350\277\211<\323\001\324\027\177?2\335GL\032$\350\277\307n\204\211L\300\346?\243\312r\227\316\244\357\277\256 \204^\224\262\361\277yf\262&\300c\344\277\324h\244\334q\206\335\277!b\217\201\333z\307?\017\370\356c\362\377\342?\250\346\022\212\377\021\377?\324h\244\334q\206\335\277[~\351\347\252\242\362\277k\263\271v\037\340\344?\366\312\261g\354a\t@\216\230\022_G\004\352\2773\\\257\324\000A\356?vi\"}\255\000\361?\324h\244\334q\206\335\277\325!}9\355C\346\277\251\004\344kcE\322\277\216\230\022_G\004\352\277\325!}9\355C\346\277\216\351\310lN\364\277?k\263\271v\037\340\344?\223O\272\314\217\373\316?\307n\204\211L\300\346?\253\016s\326\345\362\260?\324h\244\334q\206\335\2772\335GL\032$\350\277G\017\250\204\241\304\355\277G\017\250\204\241\304\355\277b{y\221\275\005\326\277[~\351\347\252\242\362\277\211<\323\001\324\027\177?\211<\323\001\324\027\177?\035\253\347\023\223\203\342\277\033\362\016\267\027\306\331\277\213\233\202\2654\241\366?\335\240\344\301\323`\354?\216\351\310lN\364\277?^\2149aCY\002@\202\236\362\013\">\323?\243\312r\227\316\244\357\277\363\213\035W\326\276\332?[~\351\347\252\242\362\277\325!}9\355C\346\277[~\351\347\252\242\362\277\226\264\262Qxq\371?\211<\323\001\324\027\177?\216\351\310lN\364\277?\307n\204\211L\300\346?\243\312r\227\316\244\357\277\035\253\347\023\223\203\342\2775Nq\254\326\037\252\277\211<\323\001\324\027\177?yf\262&\300c\344\277\200\345\031\257\246\200\352?\324h\244\334q\206\335\277\324h\244\334q\206\335\277\325!}9\355C\346\277\017\370\356c\362\377\342?\000\303\036\325}\302\360\277\325!}9\355C\346\277\352S\335qt\344\353\277\273G\004tp9\004@3\\\257\324\000A\356?yf\262&\300c\344\277\033\362\016\267\027\306\331\277\251\004\344kcE\322\277\254\002\263|0\177\336?\216\230\022_G\004\352\277\324h\244\334q\206\335\277\000\303\036\325}\302\360\277\375\201\216\354S\021\274\277\262<$Q\305\037\341?\253\016s\326\345\362\260?p.rA^\211\305\277\216\230\022_G\004\352\2772\335GL\032$\350\277\211<\323\001\324\027\177?\251\004\344kcE\322\2775Nq\254\326\037\252\277\256 \204^\224\262\361\277/\340\267\242\007\301\364?yf\262&\300c\344\277\033\362\016\267\027\306\331\277\253\016s\326\345\362\260?\235\315\342\355\273A\374?\307n\204\211L\300\346?\325!}9\355C\346\277yf\262&\300c\344\277\325!}9\355C\346\277\243\312r\227\316\244\357\277e\227\031\204\356r\365\277\216\351\310lN\364\277?\375\201\216\354S\021\274\277\375\201\216\354S\021\274\277yf\262&\300c\344\277\017\370\356c\362\377\342?p.rA^\211\305\277G\017\250\204\241\304\355\277$*O\234y\240\350?\325!}9\355C\346\277\033\362\016\267\027\306\331\277\243\312r\227\316\244\357\277\324h\244\334q\206\335\277\256 \204^\224\262\361\277\251\004\344kcE\322\277\216\230\022_G\004\352\277yf\262&\300c\344\277\325!}9\355C\346\277\324h\244\334q\206\335\277\200\202R\031\361\320\363?\216\230\022_G\004\352\277\253\016s\326\345\362\260?\375\201\216\354S\021\274\277\325!}9\355C\346\277\254\002\263|0\177\336?\035\253\347\023\223\203\342\277\033\362\016\267\027\306\331\277\017\370\356c\362\377\342?\202\236\362\013\">\323?\034\016\257\251H3\371\277\251\004\344kcE\322\277\000\303\036\325}\302\360\277\325!}9\355C\346\277p.rA^\211\305\277\341\033\235\214\022\n\315\277\000\303\036\325}\302\360\2775Nq\254\326\037\252\2773\\\257\324\000A\356?k\263\271v\037\340\344?\216\230\022_G\004\352\277\035\253\347\023\223\203\342\277\307n\204\211L\300\346?G\017\250\204\241\304\355\277\216\351\310lN\364\277?p.rA^\211\305\277b{y\221\275\005\326\277\324h\244\334q\206\335\277b{y\221\275\005\326\277\t\334Nq\301\222\363\277;\025\2101|\376\326?2\335GL\032$\350\277;\025\2101|\376\326?\375\201\216\354S\021\274\277\370\201\005\304\234F\036@\035\253\347\023\223\203\342\277G\017\250\204\241\304\355\277yf\262&\300c\344\277\t\334Nq\301\222\363\277\363\213\035W\326\276\332?\243\312r\227\316\244\357\277\017\370\356c\362\377\342?\363\213\035W\326\276\332?\335\240\344\301\323`\354?\2679\264\372\327\202\364\277\200\345\031\257\246\200\352?$*O\234y\240\350?\256 \204^\224\262\361\277\341\033\235\214\022\n\315\277\211<\323\001\324\027\177?b{y\221\275\005\326\277\211<\323\001\324\027\177?$\307\207\006\304\360\361?;\025\2101|\376\326?\017\370\356c\362\377\342?\226\264\262Qxq\371?\2679\264\372\327\202\364\277\033\362\016\267\027\306\331\277\035\253\347\023\223\203\342\277\322$\355\217\332\340\362?\352S\335qt\344\353\277;\025\2101|\376\326?\371\210\255\000\351!\376?\017\370\356c\362\377\342?A\022\030\333\216a\372?\223O\272\314\217\373\316?\324h\244\334q\206\335\277G\017\250\204\241\304\355\277yf\262&\300c\344\277\352S\335qt\344\353\277\256 \204^\224\262\361\277b{y\221\275\005\326\2772\335GL\032$\350\277\353\261\201\313\250\221\006@\251\004\344kcE\322\2773\\\257\324\000A\356?\341\033\235\214\022\n\315\277\251\004\344kcE\322\277\353\261\201\313\250\221\006@\325!}9\355C\346\277\352S\335qt\344\353\277\244(\027\361\002R\n@\375\201\216\354S\021\274\277\251\004\344kcE\322\277\375\201\216\354S\021\274\277$*O\234y\240\350?2\335GL\032$\350\2772\335GL\032$\350\277\325!}9\355C\346\2772\335GL\032$\350\277\341\033\235\214\022\n\315\277\033\362\016\267\027\306\331\277\322$\355\217\332\340\362?p.rA^\211\305\277\325!}9\355C\346\277\322$\355\217\332\340\362?!b\217\201\333z\307?\324h\244\334q\206\335\277\223O\272\314\217\373\316?\352S\335qt\344\353\277\253\016s\326\345\362\260?\306\357\034\001f\243\340\277\243\312r\227\316\244\357\277\335\240\344\301\323`\354?\035\253\347\023\223\203\342\277\211<\323\001\324\027\177?\325!}9\355C\346\277\322$\355\217\332\340\362?p.rA^\211\305\277\325!}9\355C\346\277\254\002\263|0\177\336?\335\240\344\301\323`\354?b{y\221\275\005\326\277\363\213\035W\326\276\332?\216\230\022_G\004\352\277p.rA^\211\305\277p.rA^\211\305\277\262<$Q\305\037\341?/\340\267\242\007\301\364?\243\312r\227\316\244\357\277b{y\221\275\005\326\277\341\033\235\214\022\n\315\277\251\004\344kcE\322\2773\\\257\324\000A\356?\035\253\347\023\223\203\342\277\306\357\034\001f\243\340\277\341\033\235\214\022\n\315\277\017\370\356c\362\377\342?\310\013\275\363\226\020\360?\035\253\347\023\223\203\342\277\306\357\034\001f\243\340\277$*O\234y\240\350?yf\262&\300c\344\277b{y\221\275\005\326\277\306\357\034\001f\243\340\277\310\013\275\363\226\020\360?\341\033\235\214\022\n\315\277\363\213\035W\326\276\332?\017\370\356c\362\377\342?\363\213\035W\326\276\332?$*O\234y\240\350?\243\312r\227\316\244\357\277\375\201\216\354S\021\274\2775Nq\254\326\037\252\277\344\230Q/e\301\003@\033\362\016\267\027\306\331\277!b\217\201\333z\307?\325!}9\355C\346\277\324h\244\334q\206\335\277\307n\204\211L\300\346?\307n\204\211L\300\346?\325!}9\355C\346\277\216\230\022_G\004\352\277\000\344\341\00302\014@p.rA^\211\305\2775Nq\254\326\037\252\277\324h\244\334q\206\335\277\202\236\362\013\">\323?\033\362\016\267\027\306\331\277\000\303\036\325}\302\360\277$\307\207\006\304\360\361?b{y\221\275\005\326\277\375\201\216\354S\021\274\277\017\370\356c\362\377\342?5Nq\254\326\037\252\277\251\004\344kcE\322\277\216\351\310lN\364\277?$*O\234y\240\350?;\025\2101|\376\326?\211<\323\001\324\027\177?;\025\2101|\376\326?e\227\031\204\356r\365\277\216\351\310lN\364\277?5Nq\254\326\037\252\277p.rA^\211\305\277\035\253\347\023\223\203\342\277\375\201\216\354S\021\274\277;\025\2101|\376\326?\307n\204\211L\300\346?\352S\335qt\344\353\277\253\016s\326\345\362\260?\200\202R\031\361\320\363?\2679\264\372\327\202\364\277\307n\204\211L\300\346?\017\370\356c\362\377\342?\325!}9\355C\346\277p.rA^\211\305\277\325!}9\355C\346\277\253\016s\326\345\362\260?\325!}9\355C\346\277\243\312r\227\316\244\357\277\035\253\347\023\223\203\342\277\251\004\344kcE\322\277\035\253\347\023\223\203\342\277!b\217\201\333z\307?$*O\234y\240\350?\357o}d\245Q\373?3\\\257\324\000A\356?\200\345\031\257\246\200\352?\335\240\344\301\323`\354?2\335GL\032$\350\277\207\335\206\0348\341\001@3\\\257\324\000A\356?b{y\221\275\005\326\277\216\230\022_G\004\352\277\000\303\036\325}\302\360\277\211<\323\001\324\027\177?\251\004\344kcE\322\277\325!}9\355C\346\277\325!}9\355C\346\277\347VM\310a\201\370?yf\262&\300c\344\277\306\357\034\001f\243\340\277\306\357\034\001f\243\340\277yf\262&\300c\344\277$*O\234y\240\350?/\340\267\242\007\301\364?\341\033\235\214\022\n\315\277\375\201\216\354S\021\274\2775;\354\245N\321\002@\033\362\016\267\027\306\331\277p.rA^\211\305\277n\260I 2C\370\277\033\362\016\267\027\306\331\277b{y\221\275\005\326\277@T\034B\222\241\005@2\335GL\032$\350\277\325!}9\355C\346\277;\025\2101|\376\326?\306\357\034\001f\243\340\277;\025\2101|\376\326?\211<\323\001\324\027\177?vi\"}\255\000\361?\324h\244\334q\206\335\277\324h\244\334q\206\335\277\341\033\235\214\022\n\315\277p.rA^\211\305\277\325!}9\355C\346\277/\340\267\242\007\301\364?\035\253\347\023\223\203\342\277\2679\264\372\327\202\364\277\325!}9\355C\346\277\213\233\202\2654\241\366?\251\004\344kcE\322\2775Nq\254\326\037\252\277\033\362\016\267\027\306\331\277p.rA^\211\305\277\254\002\263|0\177\336?\341\033\235\214\022\n\315\277\033\362\016\267\027\306\331\2773\\\257\324\000A\356?G\017\250\204\241\304\355\277\375\201\216\354S\021\274\277\033\362\016\267\027\306\331\277\017\370\356c\362\377\342?\211<\323\001\324\027\177?\2679\264\372\327\202\364\2773\\\257\324\000A\356?\r\352\236\352YI\003@yf\262&\300c\344\277\324h\244\334q\206\335\277\375\201\216\354S\021\274\277\325!}9\355C\346\277\375\201\216\354S\021\274\277\200\202R\031\361\320\363?\216\351\310lN\364\277?\254\002\263|0\177\336?b{y\221\275\005\326\277e\227\031\204\356r\365\2772\335GL\032$\350\277\213\233\202\2654\241\366?\033\362\016\267\027\306\331\2773\\\257\324\000A\356?\035\253\347\023\223\203\342\277\256 \204^\224\262\361\277\324h\244\334q\206\335\277p.rA^\211\305\277\253\016s\326\345\362\260?p.rA^\211\305\277\202\236\362\013\">\323?\033\362\016\267\027\306\331\277\211<\323\001\324\027\177?\363\213\035W\326\276\332?/\340\267\242\007\301\364?\310\013\275\363\226\020\360?\363\213\035W\326\276\332?\223O\272\314\217\373\316?\325!}9\355C\346\277\324h\244\334q\206\335\277\231\017\347T\277\201\007@p.rA^\211\305\277\035\253\347\023\223\203\342\277\254\002\263|0\177\336?\253\016s\326\345\362\260?\017\370\356c\362\377\342?yf\262&\300c\344\2772\335GL\032$\350\2775;\354\245N\321\002@b{y\221\275\005\326\277\375\201\216\354S\021\274\277\375\201\216\354S\021\274\277\341\033\235\214\022\n\315\277\223O\272\314\217\373\316?b{y\221\275\005\326\277\202\236\362\013\">\323?\035\253\347\023\223\203\342\2772\335GL\032$\350\277!b\217\201\333z\307?b{y\221\275\005\326\277\000\303\036\325}\302\360\277b{y\221\275\005\326\277\251\004\344kcE\322\277\243\312r\227\316\244\357\277\223O\272\314\217\373\316?\251\004\344kcE\322\2772\335GL\032$\350\277\251\004\344kcE\322\277p.rA^\211\305\277p.rA^\211\305\277\262<$Q\305\037\341?\216\351\310lN\364\277?$*O\234y\240\350?\200\345\031\257\246\200\352?\000\303\036\325}\302\360\277\202\236\362\013\">\323?yf\262&\300c\344\277\2310i\010\301!\025@p.rA^\211\305\277/\340\267\242\007\301\364?4\\nYPq\020@\363\213\035W\326\276\332?G\017\250\204\241\304\355\277yf\262&\300c\344\277b{y\221\275\005\326\277\035\253\347\023\223\203\342\277\243\312r\227\316\244\357\277\216\230\022_G\004\352\277\262<$Q\305\037\341?\023\365~\r\005c\366\277\216\230\022_G\004\352\277\243\312r\227\316\244\357\277\325!}9\355C\346\277b{y\221\275\005\326\277\335\240\344\301\323`\354?p.rA^\211\305\277\307n\204\211L\300\346?;\025\2101|\376\326?\033\362\016\267\027\306\331\277\331\177!\223!\361\000@\271Zw)\212\362\017@\306\357\034\001f\243\340\277\216\230\022_G\004\352\277\216\351\310lN\364\277?\254\002\263|0\177\336?\211<\323\001\324\027\177?\256AG\215F\"\r@2\335GL\032$\350\277\307n\204\211L\300\346?\324h\244\334q\206\335\277\253\016s\326\345\362\260?\363\213\035W\326\276\332?\223O\272\314\217\373\316?\017\370\356c\362\377\342?p.rA^\211\305\277\033\362\016\267\027\306\331\277$*O\234y\240\350?\253\016s\326\345\362\260?!b\217\201\333z\307?\202\236\362\013\">\323?\243\312r\227\316\244\357\277\256 \204^\224\262\361\2775Nq\254\326\037\252\277p.rA^\211\305\277\223O\272\314\217\373\316?yf\262&\300c\344\277\017\370\356c\362\377\342?yf\262&\300c\344\277\256 \204^\224\262\361\277\341\033\235\214\022\n\315\277\223O\272\314\217\373\316?\213\233\202\2654\241\366?\254\002\263|0\177\336?\t\334Nq\301\222\363\277\335=\035,\036\261\365?p.rA^\211\305\277y\311y\274u\023\373\277b{y\221\275\005\326\277\254\002\263|0\177\336?\035\253\347\023\223\203\342\277\325!}9\355C\346\2772\335GL\032$\350\277\352S\335qt\344\353\277\310\013\275\363\226\020\360?\223O\272\314\217\373\316?;\210\021\253\255\372\036@5Nq\254\326\037\252\277\306\357\034\001f\243\340\277\306\357\034\001f\243\340\277\256AG\215F\"\r@p.rA^\211\305\277\000\303\036\325}\302\360\277\202\236\362\013\">\323?\035\253\347\023\223\203\342\277\324h\244\334q\206\335\277\335\240\344\301\323`\354?\324h\244\334q\206\335\277\253\016s\326\345\362\260?\325!}9\355C\346\277\306\357\034\001f\243\340\277k\263\271v\037\340\344?9\371\347>K\221\367?\306\357\034\001f\243\340\277\306\357\034\001f\243\340\277p.rA^\211\305\277\306\357\034\001f\243\340\277G\017\250\204\241\304\355\277\243\312r\227\316\244\357\277\325!}9\355C\346\277\325!}9\355C\346\277\306\357\034\001f\243\340\277\216\230\022_G\004\352\277\211<\323\001\324\027\177?2\335GL\032$\350\277b{y\221\275\005\326\277\324h\244\334q\206\335\277\325!}9\355C\346\277\200\345\031\257\246\200\352?5Nq\254\326\037\252\277\347VM\310a\201\370?$*O\234y\240\350?\325!}9\355C\346\277\2679\264\372\327\202\364\2772\335GL\032$\350\277\202\236\362\013\">\323?\253\016s\326\345\362\260?\375\201\216\354S\021\274\277p.rA^\211\305\277p.rA^\211\305\277\216\230\022_G\004\352\277\035\253\347\023\223\203\342\2779\371\347>K\221\367?\251\004\344kcE\322\277b{y\221\275\005\326\277\035\253\347\023\223\203\342\277\341\033\235\214\022\n\315\277G\017\250\204\241\304\355\277$\307\207\006\304\360\361?\307n\204\211L\300\346?!b\217\201\333z\307?\2679\264\372\327\202\364\277\254\002\263|0\177\336?\256 \204^\224\262\361\277\023\365~\r\005c\366\277\262<$Q\305\037\341?yf\262&\300c\344\277!b\217\201\333z\307?\035\253\347\023\223\203\342\277\223O\272\314\217\373\316?;\025\2101|\376\326?b{y\221\275\005\326\277\324h\244\334q\206\335\277p.rA^\211\305\277\341\033\235\214\022\n\315\277\341\033\235\214\022\n\315\277\325!}9\355C\346\277\322$\355\217\332\340\362?\023\365~\r\005c\366\277$\307\207\006\304\360\361?yf\262&\300c\344\277$*O\234y\240\350?p.rA^\211\305\277\324h\244\334q\206\335\277p.rA^\211\305\277G\017\250\204\241\304\355\277\363\213\035W\326\276\332?5Nq\254\326\037\252\277e\227\031\204\356r\365\277\324h\244\334q\206\335\277\254\002\263|0\177\336?\226\264\262Qxq\371?5Nq\254\326\037\252\277b{y\221\275\005\326\277\000\303\036\325}\302\360\277\223O\272\314\217\373\316?\251\004\344kcE\322\2775Nq\254\326\037\252\277;\025\2101|\376\326?\352S\335qt\344\353\277\223O\272\314\217\373\316?5Nq\254\326\037\252\277\344\230Q/e\301\003@\253\016s\326\345\362\260?\251\004\344kcE\322\277\256 \204^\224\262\361\277!b\217\201\333z\307?vi\"}\255\000\361?\033\362\016\267\027\306\331\277\035\253\347\023\223\203\342\277\216\351\310lN\364\277?\211<\323\001\324\027\177?\344\230Q/e\301\003@$*O\234y\240\350?p.rA^\211\305\277\216\230\022_G\004\352\2775Nq\254\326\037\252\277\202\236\362\013\">\323?\202\236\362\013\">\323?\325!}9\355C\346\277\306\357\034\001f\243\340\277yf\262&\300c\344\277\335=\035,\036\261\365?\035\253\347\023\223\203\342\277\324h\244\334q\206\335\277\035\253\347\023\223\203\342\2773\\\257\324\000A\356?b{y\221\275\005\326\277\t\334Nq\301\222\363\277\322$\355\217\332\340\362?\035\253\347\023\223\203\342\277G\017\250\204\241\304\355\277p.rA^\211\305\277\251\004\344kcE\322\277\023\365~\r\005c\366\277\256 \204^\224\262\361\277\033\362\016\267\027\306\331\277\034\016\257\251H3\371\277b{y\221\275\005\326\277\223O\272\314\217\373\316?\254\002\263|0\177\336?\033\362\016\267\027\306\331\277\253\016s\326\345\362\260?\033\362\016\267\027\306\331\277$\307\207\006\304\360\361?b{y\221\275\005\326\277b{y\221\275\005\326\277\352S\335qt\344\353\277\306\357\034\001f\243\340\277;\025\2101|\376\326?\253\016s\326\345\362\260?\260.\324\327,i\001@\253\016s\326\345\362\260?HmL\336\325q\010@\325!}9\355C\346\277\035\253\347\023\223\203\342\277\033\362\016\267\027\306\331\277\325!}9\355C\346\277G\017\250\204\241\304\355\277;\025\2101|\376\326?\216\230\022_G\004\352\277\341\033\235\214\022\n\315\277!b\217\201\333z\307?2\335GL\032$\350\277\324h\244\334q\206\335\277\324h\244\334q\206\335\277\251\004\344kcE\322\277\306\357\034\001f\243\340\277\033\362\016\267\027\306\331\277\216\230\022_G\004\352\277\253\016s\326\345\362\260?2\335GL\032$\350\277vi\"}\255\000\361?k\263\271v\037\340\344?0@\017\342\317\323\376\277\251\004\344kcE\322\277\223O\272\314\217\373\316?K+Hw\3221\375?!b\217\201\333z\307?\200\345\031\257\246\200\352?\2679\264\372\327\202\364\277\325!}9\355C\346\277\307n\204\211L\300\346?\375\201\216\354S\021\274\277yf\262&\300c\344\277\222\366\266\270{\261\004@\256 \204^\224\262\361\277b{y\221\275\005\326\277\325!}9\355C\346\277b{y\221\275\005\326\277\341\033\235\214\022\n\315\277\375\201\216\354S\021\274\277\3346u\357\321\325\025@;\025\2101|\376\326?b{y\221\275\005\326\277vi\"}\255\000\361?k\263\271v\037\340\344?\324h\244\334q\206\335\277b{y\221\275\005\326\277\324h\244\334q\206\335\277\363\213\035W\326\276\332?\341\033\235\214\022\n\315\277\251\004\344kcE\322\277\000\303\036\325}\302\360\277;\025\2101|\376\326?2\335GL\032$\350\277\251\004\344kcE\322\277\322$\355\217\332\340\362?\216\230\022_G\004\352\277\223O\272\314\217\373\316?\035\253\347\023\223\203\342\277\324h\244\334q\206\335\277\017\370\356c\362\377\342?\306\357\034\001f\243\340\277\035\253\347\023\223\203\342\277\341\033\235\214\022\n\315\277\375\201\216\354S\021\274\277b{y\221\275\005\326\277\306\357\034\001f\243\340\2773\\\257\324\000A\356?\263\345\'4\335M\026@p.rA^\211\305\277\306\357\034\001f\243\340\277b{y\221\275\005\326\277;\025\2101|\376\326?\035\253\347\023\223\203\342\277\216\351\310lN\364\277?yf\262&\300c\344\277\307n\204\211L\300\346?\216\351\310lN\364\277?\216\351\310lN\364\277?\000\303\036\325}\302\360\277\322$\355\217\332\340\362?!b\217\201\333z\307?\324h\244\334q\206\335\277\213\233\202\2654\241\366?\216\230\022_G\004\352\277\331\177!\223!\361\000@\t\334Nq\301\222\363\277\341\033\235\214\022\n\315\2775Nq\254\326\037\252\277\035\253\347\023\223\203\342\277\000\303\036\325}\302\360\277b{y\221\275\005\326\277$\307\207\006\304\360\361?b{y\221\275\005\326\277\253\016s\326\345\362\260?\035\253\347\023\223\203\342\277\216\351\310lN\364\277?\363\213\035W\326\276\332?\352S\335qt\344\353\277[~\351\347\252\242\362\277\341\033\235\214\022\n\315\277\216\230\022_G\004\352\277b{y\221\275\005\326\277\200\345\031\257\246\200\352?5Nq\254\326\037\252\277\341\033\235\214\022\n\315\277\341\033\235\214\022\n\315\277\341\033\235\214\022\n\315\277\226\264\262Qxq\371?\306\357\034\001f\243\340\277\251\004\344kcE\322\277\035\253\347\023\223\203\342\277\000\303\036\325}\302\360\277b{y\221\275\005\326\277G\017\250\204\241\304\355\277\2679\264\372\327\202\364\277\324h\244\334q\206\335\277\341\033\235\214\022\n\315\277\310\013\275\363\226\020\360?\216\230\022_G\004\352\277\251\004\344kcE\322\277\363\213\035W\326\276\332?yf\262&\300c\344\277!b\217\201\333z\307?\306\357\034\001f\243\340\277\216\230\022_G\004\352\277A\022\030\333\216a\372?\306\357\034\001f\243\340\277\352S\335qt\344\353\277\216\351\310lN\364\277?k\263\271v\037\340\344?\325!}9\355C\346\277\200\345\031\257\246\200\352?\375\201\216\354S\021\274\2779\371\347>K\221\367?\352S\335qt\344\353\277\223O\272\314\217\373\316?n\260I 2C\370\277\033\362\016\267\027\306\331\277\216\230\022_G\004\352\277\306\357\034\001f\243\340\2772\335GL\032$\350\277n\260I 2C\370\277\216\230\022_G\004\352\277\200\345\031\257\246\200\352?\306\357\034\001f\243\340\277\243\312r\227\316\244\357\277\325!}9\355C\346\2775;\354\245N\321\002@\035\253\347\023\223\203\342\277\000\303\036\325}\302\360\277q\276\231\231\312\371\007@2\335GL\032$\350\277\256 \204^\224\262\361\2775Nq\254\326\037\252\277\223O\272\314\217\373\316?\357o}d\245Q\373?\262<$Q\305\037\341?\000\303\036\325}\302\360\277\251\004\344kcE\322\277$*O\234y\240\350?\335=\035,\036\261\365?\035\253\347\023\223\203\342\277\035\253\347\023\223\203\342\277\216\230\022_G\004\352\277\200\202R\031\361\320\363?[~\351\347\252\242\362\2772\335GL\032$\350\277\254\002\263|0\177\336?\322$\355\217\332\340\362?4\\nYPq\020@\352S\335qt\344\353\277yf\262&\300c\344\277\250\346\022\212\377\021\377?\341\033\235\214\022\n\315\277p.rA^\211\305\277\371\210\255\000\351!\376?\324h\244\334q\206\335\277\324h\244\334q\206\335\277\310\013\275\363\226\020\360?\251\004\344kcE\322\277\202\236\362\013\">\323?\216\230\022_G\004\352\277vi\"}\255\000\361?\324h\244\334q\206\335\277!b\217\201\333z\307?\251\004\344kcE\322\277\341\033\235\214\022\n\315\277\363\213\035W\326\276\332?\033\362\016\267\027\306\331\277\331\177!\223!\361\000@\307n\204\211L\300\346?\033\362\016\267\027\306\331\277k\263\271v\037\340\344?\253\016s\326\345\362\260?\202\236\362\013\">\323?k\263\271v\037\340\344?\226\264\262Qxq\371?\223O\272\314\217\373\316?\341\033\235\214\022\n\315\277vi\"}\255\000\361?b{y\221\275\005\326\277yf\262&\300c\344\277yf\262&\300c\344\2779\371\347>K\221\367?\363\213\035W\326\276\332?\325!}9\355C\346\277\341\033\235\214\022\n\315\277\223O\272\314\217\373\316?\306\357\034\001f\243\340\277\035\253\347\023\223\203\342\2772\335GL\032$\350\277\033\362\016\267\027\306\331\277e\227\031\204\356r\365\277\341\033\235\214\022\n\315\277yf\262&\300c\344\277\254\002\263|0\177\336?\262<$Q\305\037\341?\033\362\016\267\027\306\331\277vi\"}\255\000\361?\375\201\216\354S\021\274\277\202\236\362\013\">\323?2\335GL\032$\350\277k\263\271v\037\340\344?5Nq\254\326\037\252\2775Nq\254\326\037\252\2775Nq\254\326\037\252\277\254\002\263|0\177\336?\216\351\310lN\364\277?b{y\221\275\005\326\277\325!}9\355C\346\277\324h\244\334q\206\335\277\226\264\262Qxq\371?\216\230\022_G\004\352\277\035\253\347\023\223\203\342\277\342\253\304\344~z\017@b{y\221\275\005\326\277i\245i\375\206)\005@\216\351\310lN\364\277?k\263\271v\037\340\344?yf\262&\300c\344\277\256 \204^\224\262\361\277\306\357\034\001f\243\340\277\035\253\347\023\223\203\342\2775Nq\254\326\037\252\277yf\262&\300c\344\277yf\262&\300c\344\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "+\365\024Q\346\t\342\277\344\274\010\2301\377\342\277>\376\324\300\256\251\326\277\363\200m\022\251\376\315\277ON\265\216\373~\313?7\234\242\003\363)\361\277\213\020\027W\241\324\303?\350\320\200\313\2044\364?\364F+\274\223\351\372?\350\303n\201\371Wu?Z\270(`M\257\360\277L$\000\277!\177\302\277\315n\3552\030\277\324\277~\324\256\274\2474\360\277\226\036K\256i\376\253\277+\365\024Q\346\t\342\277\017\315\303\016\217\251\265\277\213\031v\353\270~\356\277\337_\017\266:\367\002@\032\212\216]\"\224\354\277\357c\226J>\037\362\277\353O\036\027\353\351\320\277\356\013\326C\014\217\367?S%\023\341\223\304\362?\254?\002\305\334I\344?\344\274\010\2301\377\342\277+\365\024Q\346\t\342\277\003|\225\022\225|\002@7\234\242\003\363)\361\277Z\270(`M\257\360\277^t\340\214nT\327?<\1777uH\364\371?\017\315\303\016\217\251\265\277\214\245\361>\216T\270?C\341i2\004t\357\277\233]\037\232H\317\361?7k\277A\365\276\350\277UL\360%\310\351\344\277\255\016\037\003\337\336\373?\206\031\300\316\330)\004@\254?\002\305\334I\344?\032\212\216]\"\224\354\277L$\000\277!\177\302\277\006Tj\237\263\377\241?\306\333\327\263^\324\346\277e\007\366\013(?\345?\317\003\310\032\005?\331?\234\204\374\336|\364\343\277\342\014\210\212\315\336\355?\003<s\370\010T\336\277\261\"\22762\024\335?\214T\025G`\204\007@L$\000\277!\177\302\277\310gS\0074\252\260?\326e\372\327\300\276\376?!\035\244\334\333~\332\277}|\356\265u\244\365?\257\215\274NE\224\330\277>\376\324\300\256\251\326\277\363\200m\022\251\376\315\277>\376\324\300\256\251\326\277\023\200\034\247\230\244\361\277m/\346r\316\251\307?e\007\366\013(?\345?\023\200\034\247\230\244\361\277}|\356\265u\244\365?\322Q\202\244m\211\355\277\\\337\005\245\201\324\322\277\353O\036\027\353\351\320\277\226\036K\256i\376\253\277+\365\024Q\346\t\342\277/C\317\332NT\306\277Z\270(`M\257\360\277~\324\256\274\2474\360\277+\365\024Q\346\t\342\277\317\003\310\032\005?\331?s-!\n\233\024\341\277\312 3\251\257t\340?Q\357\366C\321\341\004@)E\224C\202\351\354?\003<s\370\010T\336\277\3602\263\210@\264\351\277L$\000\277!\177\302\277\016\024\344l\023\337\345\277\363w\016~\221T\343?\363\200m\022\251\376\315\277\344\274\010\2301\377\342\277\226\036K\256i\376\253\277\214T\025G`\204\007@/C\317\332NT\306\277\310gS\0074\252\260?\017\315\303\016\217\251\265\277\203\267C.\375\376\370?\003<s\370\010T\336\277\322Q\202\244m\211\355\277\317\003\310\032\005?\331?\257\215\274NE\224\330\277\035\317\351Rs4\346?\306\333\327\263^\324\346\277\324\nbF\351S\275\277!\035\244\334\333~\332\277\324\nbF\351S\275\277\357c\226J>\037\362\277\003<s\370\010T\336\277\023\200\034\247\230\244\361\277\022(\\\240f\024\367?\353O\036\027\353\351\320\2777k\277A\365\276\350\277a\302\232\026\327\236\353\277\017\315\303\016\217\251\265\277\320*\245_9d\373?+\365\024Q\346\t\342\277UL\360%\310\351\344\277\216^\321\340\t\037\350?L$\000\277!\177\302\277a\302\232\026\327\236\353\277ON\265\216\373~\313?\006\262\261\257W_\360?\032\212\216]\"\224\354\277\353O\036\027\353\351\320\277Q\343\217v\350\376\277?^t\340\214nT\327?UL\360%\310\351\344\277\254?\002\305\334I\344?7k\277A\365\276\350\277\344\274\010\2301\377\342\277\315n\3552\030\277\324\277Z\270(`M\257\360\277\261\"\22762\024\335?\006Tj\237\263\377\241?\017\315\303\016\217\251\265\277\014\355\006(\337\271\363?\032\212\216]\"\224\354\277\177\243\313\372\251\311\347\277\313G\020\356\343\231\362\277+\365\024Q\346\t\342\277\350\303n\201\371Wu?)E\224C\202\351\354?\213\031v\353\270~\356\277\317\003\310\032\005?\331?\016\024\344l\023\337\345\277\324\214!\000\025\217\006@C\341i2\004t\357\277\214T\025G`\204\007@\241\230t\022\320)\365?+\365\024Q\346\t\342\277\234\204\374\336|\364\343\277\016\024\344l\023\337\345\277!\035\244\334\333~\332\277\377\355\270n\240\t\352?a\302\232\026\327\236\353\277\023\200\034\247\230\244\361\277\241\230t\022\320)\365?\315n\3552\030\277\324\277\317\003\310\032\005?\331?\272e-\303O\037\340\277\274C\211Y\340q\003@\177\243\313\372\251\311\347\277\322Q\202\244m\211\355\277+\365\024Q\346\t\342\277C\341i2\004t\357\277\3602\263\210@\264\351\277\344\274\010\2301\377\342\277\250\372\246\317\213\251\352\277\272e-\303O\037\340\277\177\243\313\372\251\311\347\277\031F\035~jS\231\277\217-\356\036\014\264\377?~\324\256\274\2474\360\277}|\356\265u\244\365?\216^\321\340\t\037\350?a\302\232\026\327\236\353\277!\035\244\334\333~\332\2777k\277A\365\276\350\277UL\360%\310\351\344\277\250\372\246\317\213\251\352\277\222\254\213jri\334\277\032\212\216]\"\224\354\277m/\346r\316\251\307?\344\274\010\2301\377\342\277\032\212\216]\"\224\354\277\350\303n\201\371Wu?_\233\275\321\242y\371?\350\303n\201\371Wu?_\233\275\321\242y\371?/C\317\332NT\306\277\023\200\034\247\230\244\361\277\363\200m\022\251\376\315\277ON\265\216\373~\313?+\365\024Q\346\t\342\277\350\303n\201\371Wu?ON\265\216\373~\313?\234\204\374\336|\364\343\277~\324\256\274\2474\360\277C\341i2\004t\357\277\016\024\344l\023\337\345\277S\234o\030d\311\357?\016\024\344l\023\337\345\277\272e-\303O\037\340\277\016\024\344l\023\337\345\277^t\340\214nT\327?\306\333\327\263^\324\346\277\276y\245\366\242T\361?~\324\256\274\2474\360\277\177\243\313\372\251\311\347\277\354\344\370\376\327i\325?\203\267C.\375\376\370?\222\254\213jri\334\2777\234\242\003\363)\361\277\354\344\370\376\327i\325?\350\303n\201\371Wu?\\\337\005\245\201\324\322\277\016\024\344l\023\337\345\277\030c\261\030\356n\372?+\365\024Q\346\t\342\277\317\003\310\032\005?\331?\257\215\274NE\224\330\277\344\274\010\2301\377\342\277\233]\037\232H\317\361?\324\nbF\351S\275\277\350\320\200\313\2044\364?UL\360%\310\351\344\277S\234o\030d\311\357?;\260\0327F_\342?\344\274\010\2301\377\342\277!\035\244\334\333~\332\277\3602\263\210@\264\351\277/C\317\332NT\306\277\177\243\313\372\251\311\347\277~\324\256\274\2474\360\277Z\270(`M\257\360\277L$\000\277!\177\302\277\322Q\202\244m\211\355\277\272e-\303O\037\340\277^t\340\214nT\327?\350\303n\201\371Wu?\016\024\344l\023\337\345\277\023\200\034\247\230\244\361\277\354\344\370\376\327i\325?\354\344\370\376\327i\325?s-!\n\233\024\341\277a\302\232\026\327\236\353\277\254?\002\305\334I\344?\017\315\303\016\217\251\265\277!\035\244\334\333~\332\277~\324\256\274\2474\360\277\\\337\005\245\201\324\322\2777\234\242\003\363)\361\277\306\333\327\263^\324\346\277\356\013\326C\014\217\367?\357c\226J>\037\362\277\003<s\370\010T\336\277\261\"\22762\024\335?\350\303n\201\371Wu?\014\355\006(\337\271\363?\353O\036\027\353\351\320\277\"\262~\304\310\376\336?\213\031v\353\270~\356\277\247\323\311\212W\204\370?\353O\036\027\353\351\320\277\"\262~\304\310\376\336?S%\023\341\223\304\362?\272e-\303O\037\340\277^t\340\214nT\327?\322Q\202\244m\211\355\277s-!\n\233\024\341\277?\341\263\025$\037\005@\353O\036\027\353\351\320\277\'\230\033o\357\001\002@ON\265\216\373~\313?7k\277A\365\276\350\2772m\204\252(T\317?!\035\244\334\333~\332\277@\223\257\250\233)\333?\3602\263\210@\264\351\277\306\333\327\263^\324\346\277\032\212\216]\"\224\354\277\342\225+S\375\331\360?+\365\024Q\346\t\342\277\344\274\010\2301\377\342\277\032\212\216]\"\224\354\277UL\360%\310\351\344\277\016\024\344l\023\337\345\277\257\215\274NE\224\330\277\344\274\010\2301\377\342\277>\376\324\300\256\251\326\277\\\337\005\245\201\324\322\277\213\031v\353\270~\356\277+\365\024Q\346\t\342\277)E\224C\202\351\354?\031F\035~jS\231\277a\302\232\026\327\236\353\277\036\236\006\221u\311\375?\234\204\374\336|\364\343\277\306\333\327\263^\324\346\277>\376\324\300\256\251\326\277S\234o\030d\311\357?\021b\236\366{)\312\277Y`hY\033\037\366?\356\013\326C\014\217\367?\016\024\344l\023\337\345\277C\341i2\004t\357\277\344\274\010\2301\377\342\277\313G\020\356\343\231\362\277\006Tj\237\263\377\241?s-!\n\233\024\341\277\222\254\213jri\334\277wA\231=\356I\362?7\234\242\003\363)\361\277\023\200\034\247\230\244\361\2777\234\242\003\363)\361\277\214\245\361>\216T\270?\003<s\370\010T\336\277\017\315\303\016\217\251\265\277a\302\232\026\327\236\353\277\342\014\210\212\315\336\355?\272e-\303O\037\340\277\\\337\005\245\201\324\322\277\016\024\344l\023\337\345\277+\365\024Q\346\t\342\277~\324\256\274\2474\360\277\3602\263\210@\264\351\277\234\204\374\336|\364\343\277\\\337\005\245\201\324\322\277\342\225+S\375\331\360?\023\200\034\247\230\244\361\277\003<s\370\010T\336\277\023\200\034\247\230\244\361\277\014\355\006(\337\271\363?\350\303n\201\371Wu?\310gS\0074\252\260?K\264\241\313I\207\001@\2525F+3\257\003@\016\024\344l\023\337\345\277-\323p\347v\\\005@a\302\232\026\327\236\353\277Z\270(`M\257\360\277\222\254\213jri\334\277!\035\244\334\333~\332\277\226\036K\256i\376\253\277\234\204\374\336|\364\343\277\310gS\0074\252\260?\250\372\246\317\213\251\352\277Q\343\217v\350\376\277?\177\243\313\372\251\311\347\277\324\nbF\351S\275\277\312 3\251\257t\340?\250\372\246\317\213\251\352\277\313G\020\356\343\231\362\277\326e\372\327\300\276\376?\214\245\361>\216T\270?\014\355\006(\337\271\363?7\234\242\003\363)\361\277\254?\002\305\334I\344?m/\346r\316\251\307?\213\031v\353\270~\356\277\222\254\213jri\334\277\344\274\010\2301\377\342\277\003<s\370\010T\336\277\\\337\005\245\201\324\322\277\006Tj\237\263\377\241?\234\204\374\336|\364\343\277\257\215\274NE\224\330\277\014\355\006(\337\271\363?\177\243\313\372\251\311\347\277m/\346r\316\251\307?6D\342\374\300\231\366?\350\303n\201\371Wu?\272e-\303O\037\340\277\202\350&\360\372i\341?C\341i2\004t\357\277\213\031v\353\270~\356\277\353O\036\027\353\351\320\277!\000\2031Q\364\010@\324\nbF\351S\275\277\3602\263\210@\264\351\277\247\323\311\212W\204\370?\306\333\327\263^\324\346\277Q\343\217v\350\376\277?\345\232d.\302Q\006@B\272\214\355\317N\375?\361mR\344\347\271\002@\222\354\255\204\376\221\000@\222\254\213jri\334\277C\341i2\004t\357\277\217-\356\036\014\264\377?<\1777uH\364\371?e\007\366\013(?\345?\006\262\261\257W_\360?\2525F+3\257\003@+\365\024Q\346\t\342\277a\302\232\026\327\236\353\277\006Tj\237\263\377\241?\261\"\22762\024\335?C\341i2\004t\357\277\363w\016~\221T\343?\363\200m\022\251\376\315\277\213\031v\353\270~\356\277G&\305\'U\024\351?\234\204\374\336|\364\343\277@\223\257\250\233)\333?\\\302\344\371\366I\001@9\246^\235\234\304\001@+\365\024Q\346\t\342\277\222\254\213jri\334\277Q\357\366C\321\341\004@\232\324{\321\030\324\356?\310gS\0074\252\260?\222\254\213jri\334\277\202\350&\360\372i\341?C\341i2\004t\357\277m/\346r\316\251\307?\021b\236\366{)\312\277\216^\321\340\t\037\350?\216^\321\340\t\037\350?e\007\366\013(?\345?\254?\002\305\334I\344?2m\204\252(T\317?\350\320\200\313\2044\364?9\246^\235\234\304\001@\372\201\2004\033D\376?~\324\256\274\2474\360\277\263It{f9\377?\016\024\344l\023\337\345\277\353O\036\027\353\351\320\2777\234\242\003\363)\361\277m/\346r\316\251\307?s-!\n\233\024\341\277\016\024\344l\023\337\345\277\234\204\374\336|\364\343\277a\302\232\026\327\236\353\277\n\306)\343\252\224\321?\236bXu\rG\007@\021b\236\366{)\312\277\310gS\0074\252\260?\213\031v\353\270~\356\277)E\224C\202\351\354?\014\355\006(\337\271\363?~\324\256\274\2474\360\277s-!\n\233\024\341\277\017\315\303\016\217\251\265\277\006Tj\237\263\377\241?+\365\024Q\346\t\342\277a\302\232\026\327\236\353\277\3602\263\210@\264\351\277\016\024\344l\023\337\345\277\016\024\344l\023\337\345\277\032\212\216]\"\224\354\277C\341i2\004t\357\277\350\303n\201\371Wu?\234\204\374\336|\364\343\277\322Q\202\244m\211\355\277a\302\232\026\327\236\353\277\226\036K\256i\376\253\277\032\212\216]\"\224\354\277\226\036K\256i\376\253\277~\324\256\274\2474\360\277\016\024\344l\023\337\345\277\021b\236\366{)\312\277L$\000\277!\177\302\277\016\024\344l\023\337\345\277\006Tj\237\263\377\241?\032\212\216]\"\224\354\277\213\020\027W\241\324\303?\023\200\034\247\230\244\361\277\324\nbF\351S\275\277\017\315\303\016\217\251\265\277a\302\232\026\327\236\353\277\016\024\344l\023\337\345\277\353O\036\027\353\351\320\277Q\343\217v\350\376\277?\213\031v\353\270~\356\2772m\204\252(T\317?\310gS\0074\252\260?\250\372\246\317\213\251\352\277\257\215\274NE\224\330\277)E\224C\202\351\354?\202\350&\360\372i\341?+\365\024Q\346\t\342\277s-!\n\233\024\341\2777k\277A\365\276\350\277<\1777uH\364\371??\341\263\025$\037\005@C\341i2\004t\357\277/C\317\332NT\306\277K\264\241\313I\207\001@\322Q\202\244m\211\355\277\255\016\037\003\337\336\373?\306\333\327\263^\324\346\277{U\021qA\177\323?\\\337\005\245\201\324\322\277\023\200\034\247\230\244\361\277\234\204\374\336|\364\343\277\\\337\005\245\201\324\322\277\232\324{\321\030\324\356?C\341i2\004t\357\277\247\323\311\212W\204\370?\276y\245\366\242T\361?\014\355\006(\337\271\363?\"\262~\304\310\376\336?Z\270(`M\257\360\277\031F\035~jS\231\277L$\000\277!\177\302\277@\223\257\250\233)\333?C\341i2\004t\357\277\254?\002\305\334I\344?\3602\263\210@\264\351\277+\365\024Q\346\t\342\277a\302\232\026\327\236\353\277L$\000\277!\177\302\277\032\212\216]\"\224\354\277\363w\016~\221T\343?\\\337\005\245\201\324\322\277\036\236\006\221u\311\375?/C\317\332NT\306\277\3602\263\210@\264\351\277\006Tj\237\263\377\241?\310gS\0074\252\260?\213\031v\353\270~\356\277\222\254\213jri\334\2772m\204\252(T\317?a\302\232\026\327\236\353\277\357c\226J>\037\362\277\035\317\351Rs4\346?\213\031v\353\270~\356\277\\\302\344\371\366I\001@\3602\263\210@\264\351\277\310gS\0074\252\260?\3602\263\210@\264\351\277\320*\245_9d\373?@\223\257\250\233)\333?\222\254\213jri\334\277\016\024\344l\023\337\345\277\261\"\22762\024\335?\272e-\303O\037\340\277m/\346r\316\251\307?UL\360%\310\351\344\277\202\350&\360\372i\341?\250\372\246\317\213\251\352\277\202\350&\360\372i\341?\032\212\216]\"\224\354\277\350\320\200\313\2044\364?C\341i2\004t\357\277m/\346r\316\251\307?\032\212\216]\"\224\354\277h8\217\352\005\377\007@\234\204\374\336|\364\343\277\306\333\327\263^\324\346\277\032\212\216]\"\224\354\2777\234\242\003\363)\361\277\035\317\351Rs4\346?\377\355\270n\240\t\352?;\260\0327F_\342?\363w\016~\221T\343?\3602\263\210@\264\351\2777k\277A\365\276\350\277\322Q\202\244m\211\355\277s-!\n\233\024\341\277\'\230\033o\357\001\002@\357c\226J>\037\362\277\306\333\327\263^\324\346\277\324\nbF\351S\275\2777k\277A\365\276\350\277S%\023\341\223\304\362?\344\274\010\2301\377\342\277\324\nbF\351S\275\277\177\243\313\372\251\311\347\2777k\277A\365\276\350\277\003<s\370\010T\336\277\317\003\310\032\005?\331?\257\215\274NE\224\330\277\023\200\034\247\230\244\361\277\014\355\006(\337\271\363?\315n\3552\030\277\324\277\357c\226J>\037\362\277\363\200m\022\251\376\315\277\247\323\311\212W\204\370?+\365\024Q\346\t\342\277Z\270(`M\257\360\277^t\340\214nT\327?\202\350&\360\372i\341?\031F\035~jS\231\277\363w\016~\221T\343?\350\320\200\313\2044\364?/\t\215\2049?\363?2m\204\252(T\317?\306\333\327\263^\324\346\277\377\355\270n\240\t\352?\313G\020\356\343\231\362\277ON\265\216\373~\313?\250\372\246\317\213\251\352\277a\302\232\026\327\236\353\277\312 3\251\257t\340?\222\254\213jri\334\2779\246^\235\234\304\001@\302~\336\321g\314\006@\313G\020\356\343\231\362\277\234\204\374\336|\364\343\277\226\036K\256i\376\253\277\272e-\303O\037\340\277\3602\263\210@\264\351\277}|\356\265u\244\365?\003<s\370\010T\336\277>\376\324\300\256\251\326\277\213\020\027W\241\324\303?\213\031v\353\270~\356\277\312 3\251\257t\340?>\376\324\300\256\251\326\277\326e\372\327\300\276\376?\217-\356\036\014\264\377?\236bXu\rG\007@\263It{f9\377?Z\270(`M\257\360\277\322Q\202\244m\211\355\277\361mR\344\347\271\002@\216^\321\340\t\037\350?\233]\037\232H\317\361?\177\243\313\372\251\311\347\2777\234\242\003\363)\361\277\021b\236\366{)\312\277\177\243\313\372\251\311\347\277\322Q\202\244m\211\355\277\031F\035~jS\231\277}|\356\265u\244\365?\213\020\027W\241\324\303?Q\343\217v\350\376\277?s-!\n\233\024\341\277\363w\016~\221T\343?\353O\036\027\353\351\320\277{U\021qA\177\323?\266\0104\341X\027\000@\035\317\351Rs4\346?\236bXu\rG\007@+\365\024Q\346\t\342\277\006Tj\237\263\377\241?s-!\n\233\024\341\277ON\265\216\373~\313?~\324\256\274\2474\360\277C\341i2\004t\357\277C\341i2\004t\357\277\213\031v\353\270~\356\277\317\003\310\032\005?\331?}|\356\265u\244\365?L$\000\277!\177\302\277\3602\263\210@\264\351\277\213\031v\353\270~\356\277Z\270(`M\257\360\277L$\000\277!\177\302\277\372\201\2004\033D\376?\226\036K\256i\376\253\277\312 3\251\257t\340?\035\317\351Rs4\346?\257\215\274NE\224\330\277ON\265\216\373~\313?C\341i2\004t\357\277\n\306)\343\252\224\321?\353O\036\027\353\351\320\277\"\262~\304\310\376\336?\014\355\006(\337\271\363?\306\333\327\263^\324\346\277\250\372\246\317\213\251\352\277\\\302\344\371\366I\001@;\260\0327F_\342?\032\212\216]\"\224\354\277S%\023\341\223\304\362?\310gS\0074\252\260?\\\337\005\245\201\324\322\277\375\343\374\324\366n\t@\032\212\216]\"\224\354\2777k\277A\365\276\350\277\306\333\327\263^\324\346\277+\365\024Q\346\t\342\277\021b\236\366{)\312\277\322Q\202\244m\211\355\277\177\243\313\372\251\311\347\277Q\343\217v\350\376\277?UL\360%\310\351\344\277\250\372\246\317\213\251\352\277L$\000\277!\177\302\277\310gS\0074\252\260?\344\274\010\2301\377\342\277\322Q\202\244m\211\355\277G&\305\'U\024\351?\\\337\005\245\201\324\322\277\306\333\327\263^\324\346\277\250+\212\221\211\024\363\277\306\333\327\263^\324\346\277{U\021qA\177\323?\177\243\313\372\251\311\347\277\357c\226J>\037\362\277\324\nbF\351S\275\277\324\214!\000\025\217\006@~\324\256\274\2474\360\277\023\200\034\247\230\244\361\277b\3759r~\244\004@\322Q\202\244m\211\355\277\357c\226J>\037\362\277L$\000\277!\177\302\277\363w\016~\221T\343?\023\200\034\247\230\244\361\277G&\305\'U\024\351?\017\315\303\016\217\251\265\277\306\333\327\263^\324\346\277\226\036K\256i\376\253\277\310gS\0074\252\260?\250+\212\221\211\024\363\277\213\031v\353\270~\356\277\255\016\037\003\337\336\373?G&\305\'U\024\351?L$\000\277!\177\302\277\344\274\010\2301\377\342\277\250\372\246\317\213\251\352\277\250\372\246\317\213\251\352\277\3602\263\210@\264\351\277\250\372\246\317\213\251\352\277\177\243\313\372\251\311\347\277\177\243\313\372\251\311\347\2777\234\242\003\363)\361\277\006Tj\237\263\377\241?\270\265\254\265\353\376\352?C\341i2\004t\357\2777\234\242\003\363)\361\277\234\204\374\336|\364\343\277\3602\263\210@\264\351\277wA\231=\356I\362?B\272\214\355\317N\375?+\365\024Q\346\t\342\277~\324\256\274\2474\360\277\322Q\202\244m\211\355\277\213\031v\353\270~\356\277wA\231=\356I\362?+\365\024Q\346\t\342\277\016\024\344l\023\337\345\277\263It{f9\377?UL\360%\310\351\344\277\226\036K\256i\376\253\277Z\270(`M\257\360\277\203\267C.\375\376\370?\014\355\006(\337\271\363?\315n\3552\030\277\324\277\226\036K\256i\376\253\277\021b\236\366{)\312\277\216^\321\340\t\037\350?\006Tj\237\263\377\241?C\341i2\004t\357\277\003<s\370\010T\336\277\353O\036\027\353\351\320\277\315n\3552\030\277\324\277\344\274\010\2301\377\342\277\036\236\006\221u\311\375?\306\333\327\263^\324\346\277\353O\036\027\353\351\320\277wA\231=\356I\362?7k\277A\365\276\350\277C\341i2\004t\357\277!\035\244\334\333~\332\277\021b\236\366{)\312\277^t\340\214nT\327?+\365\024Q\346\t\342\277\315n\3552\030\277\324\277\003<s\370\010T\336\277\261\"\22762\024\335?\202\350&\360\372i\341?+\365\024Q\346\t\342\277\377\355\270n\240\t\352?+\365\024Q\346\t\342\277\317\003\310\032\005?\331?\306\333\327\263^\324\346\277\017\315\303\016\217\251\265\277~\324\256\274\2474\360\277G&\305\'U\024\351?~\324\256\274\2474\360\277\003<s\370\010T\336\277\\\302\344\371\366I\001@\032\212\216]\"\224\354\277\232\324{\321\030\324\356?\350\303n\201\371Wu?\202\350&\360\372i\341?~\324\256\274\2474\360\2777k\277A\365\276\350\277\326\226\335\231\276)\347?/\t\215\2049?\363?\250\372\246\317\213\251\352\277\313G\020\356\343\231\362\277\177\243\313\372\251\311\347\277\304\264\372n*\257\364?Q\343\217v\350\376\277?@\265\256 {\001\035@\032\212\216]\"\224\354\277>\376\324\300\256\251\326\277\023\200\034\247\230\244\361\277\204\017\0045/\217\363\277\372\201\2004\033D\376?>\376\324\300\256\251\326\277\035\317\351Rs4\346?\344\274\010\2301\377\342\277\006Tj\237\263\377\241?~\324\256\274\2474\360\277L$\000\277!\177\302\277\016\024\344l\023\337\345\277\n\306)\343\252\224\321?\"\262~\304\310\376\336?\377\355\270n\240\t\352?7\234\242\003\363)\361\277UL\360%\310\351\344\277/C\317\332NT\306\277\250\372\246\317\213\251\352\277\3602\263\210@\264\351\277\014\355\006(\337\271\363?\363\200m\022\251\376\315\277\257\215\274NE\224\330\277\350\303n\201\371Wu?\306\333\327\263^\324\346\277~\324\256\274\2474\360\2772m\204\252(T\317?\016\024\344l\023\337\345\277\031F\035~jS\231\2777k\277A\365\276\350\277\3602\263\210@\264\351\277s-!\n\233\024\341\277!\035\244\334\333~\332\277\233]\037\232H\317\361?>\376\324\300\256\251\326\277/C\317\332NT\306\277\312 3\251\257t\340?Z\270(`M\257\360\277\213\020\027W\241\324\303?\3602\263\210@\264\351\277C\341i2\004t\357\277;\260\0327F_\342?\n\306)\343\252\224\321?\322Q\202\244m\211\355\277q}\240\3746\364\353?+\365\024Q\346\t\342\277\363w\016~\221T\343?\031F\035~jS\231\277\031F\035~jS\231\2777k\277A\365\276\350\277\350\303n\201\371Wu?C\341i2\004t\357\277\214\245\361>\216T\270?\317\003\310\032\005?\331?\226\036K\256i\376\253\277\320*\245_9d\373?!\035\244\334\333~\332\277\003<s\370\010T\336\277\350\320\200\313\2044\364?L$\000\277!\177\302\277L$\000\277!\177\302\277~\324\256\274\2474\360\277\322Q\202\244m\211\355\277\003<s\370\010T\336\277\213\031v\353\270~\356\277\270\265\254\265\353\376\352?a\302\232\026\327\236\353\277\222\254\213jri\334\277\030c\261\030\356n\372?/C\317\332NT\306\277\031F\035~jS\231\277/\t\215\2049?\363?2m\204\252(T\317?\372\201\2004\033D\376?\313G\020\356\343\231\362\277UL\360%\310\351\344\277\354\344\370\376\327i\325?\354\344\370\376\327i\325?/C\317\332NT\306\277\030c\261\030\356n\372?\250\372\246\317\213\251\352\277\200\201\'\221:\034\013@\211\362\230\246\204Y\374?\006Tj\237\263\377\241?UL\360%\310\351\344\277~\324\256\274\2474\360\277\006Tj\237\263\377\241?\202\350&\360\372i\341?\226\036K\256i\376\253\277\353O\036\027\353\351\320\277>\376\324\300\256\251\326\277\213\031v\353\270~\356\277\"\262~\304\310\376\336?m/\346r\316\251\307?\353O\036\027\353\351\320\277\006Tj\237\263\377\241?\006Tj\237\263\377\241?\030c\261\030\356n\372?\250\372\246\317\213\251\352\2779\246^\235\234\304\001@ON\265\216\373~\313?\356\013\326C\014\217\367?\250\372\246\317\213\251\352\277!\035\244\334\333~\332\277\202\350&\360\372i\341?\250\372\246\317\213\251\352\277L$\000\277!\177\302\277\250\372\246\317\213\251\352\277+\365\024Q\346\t\342\277\233]\037\232H\317\361?\003<s\370\010T\336\277\023\200\034\247\230\244\361\277Z\270(`M\257\360\277\216^\321\340\t\037\350?\n\306)\343\252\224\321?/\t\215\2049?\363?\354\344\370\376\327i\325?\3602\263\210@\264\351\277\350\303n\201\371Wu?\"\262~\304\310\376\336?\006\262\261\257W_\360?\204\017\0045/\217\363\277m/\346r\316\251\307?@\223\257\250\233)\333?UL\360%\310\351\344\277\353O\036\027\353\351\320\277\344\274\010\2301\377\342\277\313G\020\356\343\231\362\277\\\337\005\245\201\324\322\277\322Q\202\244m\211\355\277\363w\016~\221T\343?\030c\261\030\356n\372?Z\270(`M\257\360\277a\302\232\026\327\236\353\277\213\031v\353\270~\356\277\350\320\200\313\2044\364?\247\323\311\212W\204\370?7k\277A\365\276\350\277\234\204\374\336|\364\343\277\247\323\311\212W\204\370?ON\265\216\373~\313?\\\337\005\245\201\324\322\277\254?\002\305\334I\344?\177\243\313\372\251\311\347\277\326\226\335\231\276)\347?Z\270(`M\257\360\277\\\337\005\245\201\324\322\277\244\372\360\262\253T\000@\177\243\313\372\251\311\347\277UL\360%\310\351\344\277<\1777uH\364\371?\363\200m\022\251\376\315\277\021b\236\366{)\312\277\\\302\344\371\366I\001@\322Q\202\244m\211\355\277\213\031v\353\270~\356\277Z\270(`M\257\360\277\"\262~\304\310\376\336?S%\023\341\223\304\362?\320*\245_9d\373?ON\265\216\373~\313?\324\nbF\351S\275\277Z\270(`M\257\360\277\032\212\216]\"\224\354\277\315n\3552\030\277\324\277\n\306)\343\252\224\321?\222\254\213jri\334\277UL\360%\310\351\344\277\250+\212\221\211\024\363\277\226\036K\256i\376\253\277\214\245\361>\216T\270?\310gS\0074\252\260?>\376\324\300\256\251\326\277\250\372\246\317\213\251\352\277\357c\226J>\037\362\277\250\372\246\317\213\251\352\277S%\023\341\223\304\362?\322Q\202\244m\211\355\277\213\020\027W\241\324\303?\367\250\247\\o\024\006@\\\337\005\245\201\324\322\277\350\320\200\313\2044\364?\257\215\274NE\224\330\277\230\'\003\375\205\354\003@S\234o\030d\311\357?\213\020\027W\241\324\303?\234\204\374\336|\364\343\277\021b\236\366{)\312\277e\007\366\013(?\345?\317\003\310\032\005?\331?\322Q\202\244m\211\355\2777\234\242\003\363)\361\2772m\204\252(T\317?7\234\242\003\363)\361\277a\302\232\026\327\236\353\2777\234\242\003\363)\361\277/C\317\332NT\306\277>\376\324\300\256\251\326\277a\302\232\026\327\236\353\277\266\0104\341X\027\000@\3602\263\210@\264\351\277\344\274\010\2301\377\342\277\017\362?\003\2441\t@;\260\0327F_\342?\315n\3552\030\277\324\277{U\021qA\177\323?+\365\024Q\346\t\342\277\177\243\313\372\251\311\347\277\250\372\246\317\213\251\352\277\364F+\274\223\351\372?Z\270(`M\257\360\277\\\337\005\245\201\324\322\277\3602\263\210@\264\351\277ON\265\216\373~\313?\261\"\22762\024\335?\312 3\251\257t\340?Q\343\217v\350\376\277?)E\224C\202\351\354?\234\204\374\336|\364\343\277C\341i2\004t\357\277\006Tj\237\263\377\241?Q\343\217v\350\376\277?s-!\n\233\024\341\277Z\270(`M\257\360\277Z\270(`M\257\360\277b\3759r~\244\004@\023\200\034\247\230\244\361\277Z\270(`M\257\360\277\317\003\310\032\005?\331?\"\262~\304\310\376\336?\202\350&\360\372i\341?L$\000\277!\177\302\277\306\333\327\263^\324\346\277\353O\036\027\353\351\320\277\353O\036\027\353\351\320\277\326\226\335\231\276)\347?6D\342\374\300\231\366?Z\270(`M\257\360\277s-!\n\233\024\341\277\211\362\230\246\204Y\374?\272e-\303O\037\340\277\244\372\360\262\253T\000@\350\303n\201\371Wu?s-!\n\233\024\341\277>\376\324\300\256\251\326\277\3602\263\210@\264\351\277\332\307vx\234\351\t@\342\014\210\212\315\336\355?6D\342\374\300\231\366?W*L\274X<\010@\006\262\261\257W_\360?\'\230\033o\357\001\002@\344\274\010\2301\377\342\277\213\020\027W\241\324\303?\260p\233\243\272\t\007@\250+\212\221\211\024\363\277\\\337\005\245\201\324\322\277+\365\024Q\346\t\342\277ON\265\216\373~\313?~\324\256\274\2474\360\277+\365\024Q\346\t\342\277W*L\274X<\010@\3602\263\210@\264\351\277\234\204\374\336|\364\343\277\344\274\010\2301\377\342\277\202\350&\360\372i\341?\035\317\351Rs4\346?\213\031v\353\270~\356\277\214\245\361>\216T\270?\317\003\310\032\005?\331?\211\362\230\246\204Y\374?UL\360%\310\351\344\277\324\nbF\351S\275\277a\302\232\026\327\236\353\277\363w\016~\221T\343?wA\231=\356I\362?7\234\242\003\363)\361\277}|\356\265u\244\365?s-!\n\233\024\341\277UL\360%\310\351\344\277\324\nbF\351S\275\277\226\036K\256i\376\253\277\022(\\\240f\024\367?\324\nbF\351S\275\277>\376\324\300\256\251\326\2776D\342\374\300\231\366?a\302\232\026\327\236\353\277\312 3\251\257t\340?\211\362\230\246\204Y\374?\350\303n\201\371Wu?\312 3\251\257t\340?~\324\256\274\2474\360\277s-!\n\233\024\341\277\031F\035~jS\231\277\350\303n\201\371Wu?\241\230t\022\320)\365?\353O\036\027\353\351\320\277\250\372\246\317\213\251\352\277a\302\232\026\327\236\353\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "\325\001rO\257$\352\277\004\335\210\373\361\322\355?$n\354\252mZ\305?\033/\331\346wS\352?\323@\205\023\245+\325?BHDV*\361\364\277\330\256h\274\321\221\360\277\256\273\216\036Q\242\007@\252\3755\332\300\270\363?\362|j0x\345\344\277\2743p\333\010\321\365\277\372\245\022&\273%\343\277\362|j0x\345\344\277\3650H\215\024\211\361?(\243\226\263Kdg?)B\026\016\010\315\333\277\330\256h\274\321\221\360\277\\\272\340G\256@\273\277G\374!\263\306\224\341?\013\271OMK\237\304\277$n\354\252mZ\305?G\374!\263\306\224\341?t\332\314V\203R\006@\302\3564(\037\253\330?\333\265O\254K\310\366?BHDV*\361\364\277\272\276\245Bb4\344?\263&\336\317\003\371\361?>\323y\275\203T\343?\2743p\333\010\321\365\277\250s<GV\352\335?>\323y\275\203T\343?Q\346\266\344\023\316\324\277\350\024\257v?\236\313\277\336*\032E\362d\350\277\237J\224Q\023\252\337?\211\361\\v\023\363\354?\307c\377\300\305G\372?\302\3564(\037\253\330?\302\3564(\037\253\330?\314\330\311Yl\344\353\277\325\001rO\257$\352\277\304\257!d)\244\355\277Kx\323;\347g\371?\2743p\333\010\321\365\277B\005D\352\213\205\252\277Kq\354Km1\363\277\314\330\311Yl\344\353\277\261Zz\226T\333\000@\374\263\340\005\257\222\357?\274O\206\305F9\360?\357\362p\235\r\027\377?\260\234\344<\231*\334?>\323y\275\203T\343?c8\007\320\231N\321\277>\323y\275\203T\343?$X\201\334\272\223\350?\350\024\257v?\236\313\277\273\206yn\346c\357\277\304\257!d)\244\355\277Kq\354Km1\363\277\253\341\037\360\202P\371\277;\224f\371\215M\330\277\362|j0x\345\344\277q\034t\022\363h\362?$X\201\334\272\223\350?Kq\354Km1\363\277\273\206yn\346c\357\277B\005D\352\213\205\252\277q\034t\022\363h\362?Kq\354Km1\363\277\362|j0x\345\344\277\304\257!d)\244\355\277_\312#\'m\350\365?\242\270w\372?\020\373\277BHDV*\361\364\277>\323y\275\203T\343?c8\007\320\231N\321\2777;\262J%\031\361?(\243\226\263Kdg?\013\271OMK\237\304\277\362|j0x\345\344\277Kq\354Km1\363\277\260\234\344<\231*\334?\217f\'\017\272\217\376\277\336*\032E\362d\350\277\r\0061\3614\023\354?v\221>\253\231\005\344\277\314\330\311Yl\344\353\277\304\257!d)\244\355\277/\366\363j\244p\370\277\302\3564(\037\253\330?\350\024\257v?\236\313\277\303\236\277\214\273\'\000\300c8\007\320\231N\321\277\206,\035B\t\323\002@;\224f\371\215M\330\277\344\222\325\376*\254\321?\242\324\215\344}x\365?Kq\354Km1\363\277\002\030I\307\347\262\003@\362|j0x\345\344\277\2743p\333\010\321\365\277\3650H\215\024\211\361?b?\356\277\023\205\347\277\247\331\266`\025r\255?5\252\321\307@\024\345?8\037\234`\347\260\366\277c8\007\320\231N\321\277(\243\226\263Kdg?\323@\205\023\245+\325?\314\330\311Yl\344\353\277(\243\226\263Kdg?\216$\032\003\363\266\274?&\351a_\237\230\364?\304\257!d)\244\355\277\263&\336\317\003\371\361?\r\0061\3614\023\354?\333\265O\254K\310\366?B\005D\352\213\205\252\277\003\317\272\033\376e\341\277B\005D\352\213\205\252\277(\243\226\263Kdg?\330\256h\274\321\221\360\277\013\271OMK\237\304\277\264\n\310\345\305\220\367\277\'\315Kua0\372\277\357\362p\235\r\027\377?\350\024\257v?\236\313\277\030\360\305\"\202L\337\277;\224f\371\215M\330\277\260\234\344<\231*\334?\247\331\266`\025r\255?\323@\205\023\245+\325?\317\205\300\306\216Q\362\277Kq\354Km1\363\277\362|j0x\345\344\277;\224f\371\215M\330\277;\224f\371\215M\330\277\'\315Kua0\372\277\237J\224Q\023\252\337?$X\201\334\272\223\350?\013\271OMK\237\304\277\237J\224Q\023\252\337?\r\0061\3614\023\354?\216$\032\003\363\266\274?\350\024\257v?\236\313\277\r\0061\3614\023\354?$X\201\334\272\223\350?\330\256h\274\321\221\360\277B\005D\352\213\205\252\277\346S\302:5\245\346\277G\374!\263\306\224\341?\247\331\266`\025r\255?\372\245\022&\273%\343\277\336*\032E\362d\350\277\003\317\272\033\376e\341\277)B\026\016\010\315\333\277\003\317\272\033\376e\341\277\272\276\245Bb4\344?\013\271OMK\237\304\277\3106\207\377\031c\002@\336*\032E\362d\350\277(\243\226\263Kdg?S\232\224A\260q\361\277\033/\331\346wS\352?\013\271OMK\237\304\277S\232\224A\260q\361\277\330\256h\274\321\221\360\277\344\336\367\241\216\010\365?\304\257!d)\244\355\2778\037\234`\347\260\366\277G\374!\263\306\224\341?\304\257!d)\244\355\277\253\341\037\360\202P\371\277\325\001rO\257$\352\277\354\311K\324aY\314?8\037\234`\347\260\366\277>\323y\275\203T\343?\336*\032E\362d\350\277>\323y\275\203T\343?\346S\302:5\245\346\277$n\354\252mZ\305?\273\206yn\346c\357\277\2743p\333\010\321\365\277\302\3564(\037\253\330?\330\256h\274\321\221\360\277G\374!\263\306\224\341?\346S\302:5\245\346\277\030\360\305\"\202L\337\277\264\n\310\345\305\220\367\277\224\337\201\265\213\032\006@\013\271OMK\237\304\277-\201)\322\375\323\346?Q\346\266\344\023\316\324\277\332w\373\350\333\330\317?S\232\224A\260q\361\277\030\360\305\"\202L\337\277\\\272\340G\256@\273\277\3650H\215\024\211\361?\372\245\022&\273%\343\277-\201)\322\375\323\346?\271\305\2142\334j\332?\317\205\300\306\216Q\362\277\\\272\340G\256@\273\277\346S\302:5\245\346\277\302\3564(\037\253\330?\354\007\240\227\321H\363?\205Y\225\003\265\267\372?;\224f\371\215M\330\277Q\346\266\344\023\316\324\277\330\256h\274\321\221\360\277\304\257!d)\244\355\277-\201)\322\375\323\346?c8\007\320\231N\321\277\2743p\333\010\321\365\277\374\263\340\005\257\222\357?\274O\206\305F9\360?\252\3755\332\300\270\363?\307c\377\300\305G\372?(\243\226\263Kdg?c8\007\320\231N\321\277\346S\302:5\245\346\277\216$\032\003\363\266\274?\354\311K\324aY\314?/\366\363j\244p\370\277B\005D\352\213\205\252\277\325\001rO\257$\352\277\253\341\037\360\202P\371\277$X\201\334\272\223\350?\252\3755\332\300\270\363?\250s<GV\352\335?}\003uL\306\222\004@c8\007\320\231N\321\277\302\3564(\037\253\330?$n\354\252mZ\305?\030\360\305\"\202L\337\277Kq\354Km1\363\277\217f\'\017\272\217\376\277\370\033\031\223PW\375?8\037\234`\347\260\366\277\250s<GV\352\335?\2743p\333\010\321\365\277\033/\331\346wS\352?Kq\354Km1\363\277\247\331\266`\025r\255?\237J\224Q\023\252\337?\003\317\272\033\376e\341\277\304\257!d)\244\355\277$X\201\334\272\223\350?\\\272\340G\256@\273\277\247\331\266`\025r\255?\302\347M8\245t\342?\273\206yn\346c\357\277\302\3564(\037\253\330?>\323y\275\203T\343?\237J\224Q\023\252\337?\2743p\333\010\321\365\277\035\300\271i\\X\366?\030\360\305\"\202L\337\277\307c\377\300\305G\372?-F\246\0333\273\001@G\374!\263\306\224\341?BHDV*\361\364\277q\034t\022\363h\362?\033/\331\346wS\352?Q\346\266\344\023\316\324\277\372\245\022&\273%\343\277B\005D\352\213\205\252\277h\363\313\034\260(\364?5\252\321\307@\024\345?\362|j0x\345\344\277CO+F\244\'\373?B\005D\352\213\205\252\277$X\201\334\272\223\350?-\201)\322\375\323\346?\317\205\300\306\216Q\362\277\240C\255a\231s\351?\013\271OMK\237\304\277$X\201\334\272\223\350?7;\262J%\031\361?\336*\032E\362d\350\277$n\354\252mZ\305?c8\007\320\231N\321\277\013\271OMK\237\304\277\374\263\340\005\257\222\357?G\374!\263\306\224\341?B\005D\352\213\205\252\277$n\354\252mZ\305?\264\n\310\345\305\220\367\277\336*\032E\362d\350\277\302\347M8\245t\342?\344\222\325\376*\254\321?\013\271OMK\237\304\277\227\032\005lV3\353?\261\310\272\331\376\267\265?\354\007\240\227\321H\363?5\252\321\307@\024\345?\220U\3057L\023\001@Kq\354Km1\363\277\336*\032E\362d\350\277\205Y\225\003\265\267\372?\r\0061\3614\023\354?8\037\234`\347\260\366\277$X\201\334\272\223\350?\336*\032E\362d\350\277c8\007\320\231N\321\277\323@\205\023\245+\325?\354\311K\324aY\314?/\366\363j\244p\370\2777;\262J%\031\361?\260\234\344<\231*\334?W\241{1*\250\367?\350\024\257v?\236\313\277\237J\224Q\023\252\337?)B\026\016\010\315\333\277\334i-\t\350k\323?;\224f\371\215M\330\277\306\\\030\321K\021\364\277\306\\\030\321K\021\364\277\211\361\\v\023\363\354?$X\201\334\272\223\350?Kq\354Km1\363\277B\005D\352\213\205\252\277\314\330\311Yl\344\353\277\372\245\022&\273%\343\277\247\331\266`\025r\255?\325\001rO\257$\352\277;\371\n\217\265\002\005@\274O\206\305F9\360?zE\034\0106\251\360?\354\311K\324aY\314?\003\317\272\033\376e\341\277\306\\\030\321K\021\364\277\350\024\257v?\236\313\277\302\3564(\037\253\330?W\241{1*\250\367?\344\222\325\376*\254\321?\r\0061\3614\023\354?\003\317\272\033\376e\341\277\200\310\264\200\320\262\356?)B\026\016\010\315\333\277\250lUW\334\263\347?\230\217\317\004\375\317\374\277$n\354\252mZ\305?v\221>\253\231\005\344\277G\374!\263\306\224\341?\205Y\225\003\265\267\372?;\224f\371\215M\330\277\302\3564(\037\253\330?/\366\363j\244p\370\277-\201)\322\375\323\346?\030\360\305\"\202L\337\277\013\271OMK\237\304\277\344\222\325\376*\254\321?\350\024\257v?\236\313\277\317\205\300\306\216Q\362\277\\\272\340G\256@\273\277\263&\336\317\003\371\361?\273\206yn\346c\357\277\242\324\215\344}x\365?B\005D\352\213\205\252\277$X\201\334\272\223\350?\217f\'\017\272\217\376\277\253\341\037\360\202P\371\277\346S\302:5\245\346\277\362|j0x\345\344\2771\375\332Z\036\247\376?\035\300\271i\\X\366?\332w\373\350\333\330\317?\350\024\257v?\236\313\277\302\3564(\037\253\330?\302\3564(\037\253\330?\261\225\375L\037\364\345?\372\245\022&\273%\343\277\336*\032E\362d\350\277;\224f\371\215M\330\277\013\271OMK\237\304\277$X\201\334\272\223\350?B\005D\352\213\205\252\277\260\234\344<\231*\334?\336*\032E\362d\350\277\003\317\272\033\376e\341\277\323@\205\023\245+\325?(\243\226\263Kdg?\330\256h\274\321\221\360\277\362|j0x\345\344\277\304\257!d)\244\355\277\274O\206\305F9\360?-\201)\322\375\323\346?\302\3564(\037\253\330?\323@\205\023\245+\325?\330\256h\274\321\221\360\277\346S\302:5\245\346\277&\351a_\237\230\364?/\366\363j\244p\370\277Kq\354Km1\363\277\200\310\264\200\320\262\356?\323@\205\023\245+\325?\302\3564(\037\253\330?\261\310\272\331\376\267\265?\354\311K\324aY\314?\323@\205\023\245+\325?\003\317\272\033\376e\341\277_\312#\'m\350\365?/\022\nU\342\330\362?7;\262J%\031\361?B\005D\352\213\205\252\277B\005D\352\213\205\252\277\344\222\325\376*\254\321?\302\3564(\037\253\330?\330\256h\274\321\221\360\2775\252\321\307@\024\345?\325\001rO\257$\352\277\362|j0x\345\344\277G\374!\263\306\224\341?\323@\205\023\245+\325?\372\245\022&\273%\343\277Q\346\266\344\023\316\324\277\302\3564(\037\253\330?Q\346\266\344\023\316\324\277\237J\224Q\023\252\337?\247\331\266`\025r\255?\317\205\300\306\216Q\362\277|0\355\rrw\374?\325\001rO\257$\352\277\336*\032E\362d\350\277\325\001rO\257$\352\277\350\024\257v?\236\313\277q\034t\022\363h\362?\344\222\325\376*\254\321?B\005D\352\213\205\252\277\354\311K\324aY\314?\346S\302:5\245\346\277;\224f\371\215M\330\277\247\331\266`\025r\255?>\323y\275\203T\343?\372\245\022&\273%\343\277B\005D\352\213\205\252\277G\374!\263\306\224\341?\273\206yn\346c\357\277$X\201\334\272\223\350?G\374!\263\306\224\341?)B\026\016\010\315\333\277\033/\331\346wS\352?\302\3564(\037\253\330?\346S\302:5\245\346\277\'\315Kua0\372\277zE\034\0106\251\360?\372\245\022&\273%\343\277\350\024\257v?\236\313\277\325\001rO\257$\352\277B\005D\352\213\205\252\277\362|j0x\345\344\277\024j\231\262m3\000@S\232\224A\260q\361\277k\336\234\"\354\366\377?\325\001rO\257$\352\277\216$\032\003\363\266\274?\216$\032\003\363\266\274?\306\\\030\321K\021\364\277&\351a_\237\230\364?\216$\032\003\363\266\274?(\243\226\263Kdg?\325\001rO\257$\352\277\346S\302:5\245\346\277\323@\205\023\245+\325?;\224f\371\215M\330\277$X\201\334\272\223\350?\\\272\340G\256@\273\277\314\330\311Yl\344\353\277\350\024\257v?\236\313\277\013\271OMK\237\304\277\323@\205\023\245+\325?\030\360\305\"\202L\337\277\004\335\210\373\361\322\355?\263&\336\317\003\371\361?CO+F\244\'\373?\216$\032\003\363\266\274?\215\202=\371\367\367\370?\035\300\271i\\X\366?\\\272\340G\256@\273\277\024{\373\211\333\257\375\277\350\024\257v?\236\313\277\362|j0x\345\344\277\323@\205\023\245+\325?\260\234\344<\231*\334?$n\354\252mZ\305?\036\244\243\177\036\360\373\277\253\341\037\360\202P\371\277;\224f\371\215M\330\277\024j\231\262m3\000@\354\311K\324aY\314?\003\317\272\033\376e\341\277\354\311K\324aY\314?\273\206yn\346c\357\277\372\245\022&\273%\343\277\317\205\300\306\216Q\362\277\350\024\257v?\236\313\277\227\032\005lV3\353?\r\0061\3614\023\354?\2743p\333\010\321\365\277$X\201\334\272\223\350?-\201)\322\375\323\346?\013\271OMK\237\304\277\330\256h\274\321\221\360\277c8\007\320\231N\321\277\253\341\037\360\202P\371\2775\252\321\307@\024\345?-\201)\322\375\323\346?\306\\\030\321K\021\364\277\336*\032E\362d\350\277\227\032\005lV3\353?\312\027\335\035b\353\326?7;\262J%\031\361?\030\360\305\"\202L\337\277S\232\224A\260q\361\277\314\330\311Yl\344\353\277\325\001rO\257$\352\277c8\007\320\231N\321\277\344\222\325\376*\254\321?\344\222\325\376*\254\321?=X7\261}\367\026@\325\001rO\257$\352\277\004\335\210\373\361\322\355?\313\020\366-\350\264\340?\372\245\022&\273%\343\277\264\n\310\345\305\220\367\277\304\257!d)\244\355\277\344\222\325\376*\254\321?\266\021\257\325?\307\375?G\374!\263\306\224\341?\036\244\243\177\036\360\373\277\237J\224Q\023\252\337?\350\024\257v?\236\313\277\030\360\305\"\202L\337\277\350\024\257v?\236\313\277\304\257!d)\244\355\277\306\\\030\321K\021\364\277B\005D\352\213\205\252\277\216$\032\003\363\266\274?\r\0061\3614\023\354?\350\024\257v?\236\313\277\216$\032\003\363\266\274?\314\330\311Yl\344\353\277\247\331\266`\025r\255?>\323y\275\203T\343?\272\276\245Bb4\344?\013\271OMK\237\304\277\362|j0x\345\344\277B\005D\352\213\205\252\277\344\336\367\241\216\010\365?\003\317\272\033\376e\341\277\003\317\272\033\376e\341\277\325\001rO\257$\352\277\2743p\333\010\321\365\277\206,\035B\t\323\002@Kq\354Km1\363\277\372\245\022&\273%\343\277\227\032\005lV3\353?\362|j0x\345\344\277\362|j0x\345\344\277$X\201\334\272\223\350?\\\272\340G\256@\273\277$n\354\252mZ\305?BHDV*\361\364\277S\232\224A\260q\361\277\r\0061\3614\023\354?*\247\272\243/\202\010@\242\270w\372?\020\373\277\2743p\333\010\321\365\277c8\007\320\231N\321\277\276:W\313\202\007\374?Kq\354Km1\363\277-\201)\322\375\323\346?B\005D\352\213\205\252\277;\224f\371\215M\330\277b?\356\277\023\205\347\277h\363\313\034\260(\364?-\201)\322\375\323\346?\314\330\311Yl\344\353\277$n\354\252mZ\305?$n\354\252mZ\305?Q\346\266\344\023\316\324\277)B\026\016\010\315\333\277\304\257!d)\244\355\277\264\n\310\345\305\220\367\277\323@\205\023\245+\325?\314\330\311Yl\344\353\277\362|j0x\345\344\277\2743p\333\010\321\365\277\242\270w\372?\020\373\277;\224f\371\215M\330\277\2743p\333\010\321\365\277\350\024\257v?\236\313\277\346S\302:5\245\346\277\304\257!d)\244\355\277\314\330\311Yl\344\353\277\354\311K\324aY\314?\354\007\240\227\321H\363?B\005D\352\213\205\252\277\227\032\005lV3\353?\227\032\005lV3\353?CO+F\244\'\373?\247\331\266`\025r\255?)B\026\016\010\315\333\277Kx\323;\347g\371?\004\335\210\373\361\322\355?\030\360\305\"\202L\337\277-\201)\322\375\323\346?(\243\226\263Kdg?\375\033\234\277\347\331\310?y\330\344\360N\200\021@8\037\234`\347\260\366\277Q\346\266\344\023\316\324\277\250s<GV\352\335?\336*\032E\362d\350\277\013\271OMK\237\304\277-\201)\322\375\323\346?\\\272\340G\256@\273\277(\243\226\263Kdg?Kq\354Km1\363\2778\037\234`\347\260\366\277Kq\354Km1\363\277\303\236\277\214\273\'\000\300\362|j0x\345\344\277\260\234\344<\231*\334?\'\315Kua0\372\277\304\257!d)\244\355\277BHDV*\361\364\277-F\246\0333\273\001@\304\257!d)\244\355\277\350\024\257v?\236\313\277\033/\331\346wS\352?\323@\205\023\245+\325?\346S\302:5\245\346\277\237J\224Q\023\252\337?\325\001rO\257$\352\277\272\276\245Bb4\344?\013\271OMK\237\304\277\302\3564(\037\253\330?\334i-\t\350k\323?B\005D\352\213\205\252\277\314\330\311Yl\344\353\277Q\346\266\344\023\316\324\277\317\205\300\306\216Q\362\277\003\317\272\033\376e\341\277$n\354\252mZ\305?\260\234\344<\231*\334?;\224f\371\215M\330\277\030\360\305\"\202L\337\277\307c\377\300\305G\372?\216$\032\003\363\266\274?\\\272\340G\256@\273\277\322\214\247\266\010\210\370?$n\354\252mZ\305?zE\034\0106\251\360?&\351a_\237\230\364?G\374!\263\306\224\341?>\323y\275\203T\343?Q\346\266\344\023\316\324\277>\323y\275\203T\343?Q\346\266\344\023\316\324\277BHDV*\361\364\277\242\324\215\344}x\365?\013\271OMK\237\304\277\362|j0x\345\344\277\035\300\271i\\X\366?\013\271OMK\237\304\277$n\354\252mZ\305?\261Zz\226T\333\000@W\241{1*\250\367?\346S\302:5\245\346\277\330\256h\274\321\221\360\277\003\317\272\033\376e\341\277\216$\032\003\363\266\274?\261\225\375L\037\364\345?_\312#\'m\350\365?\013\271OMK\237\304\277\325\001rO\257$\352\277\346S\302:5\245\346\277\372\245\022&\273%\343\277\302\3564(\037\253\330?S\232\224A\260q\361\277Kx\323;\347g\371?\302\3564(\037\253\330?|0\355\rrw\374?:&\203Pa\347\374?\013\271OMK\237\304\277\354\311K\324aY\314?\240C\255a\231s\351?\r\0061\3614\023\354?\030\360\305\"\202L\337\277\2743p\333\010\321\365\277\350\024\257v?\236\313\277\273\206yn\346c\357\277\344\222\325\376*\254\321?\237J\224Q\023\252\337?\003\317\272\033\376e\341\277\302\3564(\037\253\330?\354\311K\324aY\314?\272\276\245Bb4\344?\362|j0x\345\344\277\346S\302:5\245\346\277\346S\302:5\245\346\277\336*\032E\362d\350\277\030\360\305\"\202L\337\277(\243\226\263Kdg?\302\3564(\037\253\330?\362|j0x\345\344\277\247\331\266`\025r\255?\302\3564(\037\253\330?\030\360\305\"\202L\337\277$X\201\334\272\223\350?\325\001rO\257$\352\277e\'h\343\000\013\003@\344\222\325\376*\254\321?;\224f\371\215M\330\277\273\206yn\346c\357\277)B\026\016\010\315\333\277s\007E\030/7\376?-\201)\322\375\323\346?\033/\331\346wS\352?\260\234\344<\231*\334?\350\024\257v?\236\313\277$n\354\252mZ\305?Q\346\266\344\023\316\324\277\325\001rO\257$\352\277\323@\205\023\245+\325?Kq\354Km1\363\277\237J\224Q\023\252\337?\330\256h\274\321\221\360\277\336*\032E\362d\350\277\r\0061\3614\023\354?5\252\321\307@\024\345?\362|j0x\345\344\277\330\256h\274\321\221\360\277\013\271OMK\237\304\277\372\245\022&\273%\343\277\372\245\022&\273%\343\277\346S\302:5\245\346\277\247\331\266`\025r\255?)B\026\016\010\315\333\277CO+F\244\'\373?\362|j0x\345\344\277\266\021\257\325?\307\375?Q\346\266\344\023\316\324\277\330\256h\274\321\221\360\2778\037\234`\347\260\366\277\217f\'\017\272\217\376\277-\201)\322\375\323\346?\264\n\310\345\305\220\367\277\322\214\247\266\010\210\370?)B\026\016\010\315\333\277\323@\205\023\245+\325?\302\347M8\245t\342?-\201)\322\375\323\346?\260\234\344<\231*\334?\200\310\264\200\320\262\356?\354\311K\324aY\314?>\323y\275\203T\343?\323@\205\023\245+\325?\304\257!d)\244\355\277:&\203Pa\347\374?\003\317\272\033\376e\341\277\035\300\271i\\X\366?\323@\205\023\245+\325?\003\317\272\033\376e\341\277G\374!\263\306\224\341?\2743p\333\010\321\365\277\\\272\340G\256@\273\277-\201)\322\375\323\346?-\201)\322\375\323\346?\323@\205\023\245+\325?;\224f\371\215M\330\277\346S\302:5\245\346\277\322_/\365\\\243\000@G\374!\263\306\224\341?BHDV*\361\364\277\372\245\022&\273%\343\277\336*\032E\362d\350\277\260\234\344<\231*\334?\036~\022\256\354A\n@\'\315Kua0\372\277$n\354\252mZ\305?\325\001rO\257$\352\277\013\271OMK\237\304\277\306\\\030\321K\021\364\277;\224f\371\215M\330\277\274O\206\305F9\360?8\037\234`\347\260\366\277\215{V\t~\301\362\277\247\331\266`\025r\255?\325\001rO\257$\352\277\003\317\272\033\376e\341\277BHDV*\361\364\277\372\245\022&\273%\343\277\302\3564(\037\253\330?\013\271OMK\237\304\277(\243\226\263Kdg?\317\205\300\306\216Q\362\277\330\256h\274\321\221\360\277\264\n\310\345\305\220\367\277\273\206yn\346c\357\277\325\001rO\257$\352\277\263&\336\317\003\371\361?\317\205\300\306\216Q\362\277\211\361\\v\023\363\354?\371\356\240\321\244r\005@\372\245\022&\273%\343\277\215\202=\371\367\367\370?\323@\205\023\245+\325?>\323y\275\203T\343?\323@\205\023\245+\325?\304\257!d)\244\355\277\346S\302:5\245\346\277>\323y\275\203T\343?Kq\354Km1\363\277\025\227\021t\031\030\370?\323@\205\023\245+\325?>\323y\275\203T\343?\227\032\005lV3\353?\261\225\375L\037\364\345?\323J\000\373\230q\014@/\022\nU\342\330\362?\261\225\375L\037\364\345?h\363\313\034\260(\364?\217f\'\017\272\217\376\277(\243\226\263Kdg?\346S\302:5\245\346\277\211\361\\v\023\363\354?\272\276\245Bb4\344?\030\360\305\"\202L\337\277\263&\336\317\003\371\361?#\035\376%\360z\003@\260\234\344<\231*\334?$n\354\252mZ\305?\344\222\325\376*\254\321?\323@\205\023\245+\325?\344\222\325\376*\254\321?\344\222\325\376*\254\321?\255\350\006\340\374\206\377?\302\3564(\037\253\330?;\224f\371\215M\330\277\350\024\257v?\236\313\277\\\272\340G\256@\273\277\247\331\266`\025r\255?\325\001rO\257$\352\277\3650H\215\024\211\361?\344\222\325\376*\254\321?\354\311K\324aY\314?\271\305\2142\334j\332?\216$\032\003\363\266\274?\273\206yn\346c\357\277\372\245\022&\273%\343\277t\332\314V\203R\006@\3650H\215\024\211\361?\354\311K\324aY\314?Kq\354Km1\363\277_\312#\'m\350\365?\247\331\266`\025r\255?G\374!\263\306\224\341?\357\362p\235\r\027\377?\264\n\310\345\305\220\367\277\314\330\311Yl\344\353\277\317\205\300\306\216Q\362\277\030\360\305\"\202L\337\277\013\271OMK\237\304\277\2471\322\240\021\233\002@BHDV*\361\364\277H\304\365\336J\304\354\277\216$\032\003\363\266\274?\271\305\2142\334j\332?S\232\224A\260q\361\277/\022\nU\342\330\362?$n\354\252mZ\305?-\201)\322\375\323\346?\314\330\311Yl\344\353\277\354\311K\324aY\314?\217f\'\017\272\217\376\277\200\310\264\200\320\262\356?-\201)\322\375\323\346?\r\0061\3614\023\354?\336*\032E\362d\350\277\304\257!d)\244\355\277\273\206yn\346c\357\277\330\256h\274\321\221\360\277\030\360\305\"\202L\337\277\344\222\325\376*\254\321?G\374!\263\306\224\341?\250s<GV\352\335?Q\346\266\344\023\316\324\277CO+F\244\'\373?\004\335\210\373\361\322\355?\325\001rO\257$\352\277(\243\226\263Kdg?\344\222\325\376*\254\321?\325\001rO\257$\352\277(\243\226\263Kdg?\036\244\243\177\036\360\373\277S\232\224A\260q\361\277(\243\226\263Kdg?\322_/\365\\\243\000@\260\234\344<\231*\334?\003\317\272\033\376e\341\277BHDV*\361\364\277\344\222\325\376*\254\321?/\022\nU\342\330\362?\323@\205\023\245+\325?)B\026\016\010\315\333\277B\005D\352\213\205\252\277c8\007\320\231N\321\2778\037\234`\347\260\366\277\247\331\266`\025r\255?\346S\302:5\245\346\277\304\257!d)\244\355\277\317\205\300\306\216Q\362\277h\363\313\034\260(\364?1\375\332Z\036\247\376?\013\271OMK\237\304\277(\243\226\263Kdg?\030\360\305\"\202L\337\277-\201)\322\375\323\346?\354\311K\324aY\314?\035\300\271i\\X\366?\253\341\037\360\202P\371\277\013\271OMK\237\304\277\302\3564(\037\253\330?c8\007\320\231N\321\277\344\222\325\376*\254\321?S\232\224A\260q\361\277\227\032\005lV3\353?\325\001rO\257$\352\277\203\2151\312\005\232\t@\216$\032\003\363\266\274?G\374!\263\306\224\341?\2743p\333\010\321\365\277\260\234\344<\231*\334?\336*\032E\362d\350\277\003\317\272\033\376e\341\277\247\331\266`\025r\255?G\374!\263\306\224\341?\350\024\257v?\236\313\277\314\330\311Yl\344\353\277\227\032\005lV3\353?\344\222\325\376*\254\321?$n\354\252mZ\305?$n\354\252mZ\305?\\\272\340G\256@\273\277\274O\206\305F9\360?S\232\224A\260q\361\277(\243\226\263Kdg?\350\024\257v?\236\313\277\003\317\272\033\376e\341\277\003\317\272\033\376e\341\277\372\245\022&\273%\343\277\344\222\325\376*\254\321?_\312#\'m\350\365?\336*\032E\362d\350\277\325\001rO\257$\352\277\336*\032E\362d\350\277S\232\224A\260q\361\277\317\205\300\306\216Q\362\277\237J\224Q\023\252\337?-\201)\322\375\323\346?\004\335\210\373\361\322\355?zE\034\0106\251\360?(\243\226\263Kdg?\350\024\257v?\236\313\277\003\317\272\033\376e\341\277\372\245\022&\273%\343\277>\323y\275\203T\343?S\232\224A\260q\361\277\003\317\272\033\376e\341\277BHDV*\361\364\277Kq\354Km1\363\277\344\222\325\376*\254\321?\260\234\344<\231*\334?\247\331\266`\025r\255?\tg\202\216\\\241\363\277\302\347M8\245t\342?S\232\224A\260q\361\277\354\007\240\227\321H\363?$X\201\334\272\223\350?/\366\363j\244p\370\277B\005D\352\213\205\252\277\336*\032E\362d\350\277\344\222\325\376*\254\321?\253\341\037\360\202P\371\277(\243\226\263Kdg?\002\030I\307\347\262\003@_\312#\'m\350\365?\344\222\325\376*\254\321?\330\256h\274\321\221\360\277Z\017_\332V\016\323\277\323@\205\023\245+\325?\200\310\264\200\320\262\356?\2743p\333\010\321\365\277\237J\224Q\023\252\337?\302\3564(\037\253\330?\013\271OMK\237\304\277\362|j0x\345\344\2777;\262J%\031\361?\354\311K\324aY\314?\033/\331\346wS\352?\242\270w\372?\020\373\277_\312#\'m\350\365?Kx\323;\347g\371?\247\331\266`\025r\255?Q\346\266\344\023\316\324\277\2743p\333\010\321\365\277\357\362p\235\r\027\377?\325\001rO\257$\352\277\336*\032E\362d\350\277\304\257!d)\244\355\277\003\317\272\033\376e\341\277\247\331\266`\025r\255?\003\317\272\033\376e\341\277\260\234\344<\231*\334?/\366\363j\244p\370\277\003\317\272\033\376e\341\277)B\026\016\010\315\333\277B\005D\352\213\205\252\277\304\257!d)\244\355\277\344\222\325\376*\254\321?\372\245\022&\273%\343\277(\243\226\263Kdg?c8\007\320\231N\321\277\325\001rO\257$\352\277\344\222\325\376*\254\321?Kq\354Km1\363\277\306\\\030\321K\021\364\277\261\310\272\331\376\267\265?S\232\224A\260q\361\2771\375\332Z\036\247\376?\247\331\266`\025r\255?5\252\321\307@\024\345?\237J\224Q\023\252\337?\004\335\210\373\361\322\355?c8\007\320\231N\321\277\354\311K\324aY\314?\r\0061\3614\023\354?\013\271OMK\237\304\277\330\256h\274\321\221\360\277\003\317\272\033\376e\341\277\\\272\340G\256@\273\277\276:W\313\202\007\374?S\232\224A\260q\361\277Kq\354Km1\363\277\372\245\022&\273%\343\2771\375\332Z\036\247\376?8\037\234`\347\260\366\277\253\341\037\360\202P\371\277\354\311K\324aY\314?\317\205\300\306\216Q\362\277c8\007\320\231N\321\277\372\245\022&\273%\343\277\325\001rO\257$\352\277Q\346\266\344\023\316\324\277\306\\\030\321K\021\364\277G\374!\263\306\224\341?\230\217\317\004\375\317\374\277\350\024\257v?\236\313\277\325\001rO\257$\352\277\240C\255a\231s\351?$n\354\252mZ\305?\346S\302:5\245\346\277\346S\302:5\245\346\277\227\032\005lV3\353?\013\271OMK\237\304\277\250lUW\334\263\347?\323@\205\023\245+\325?\304\257!d)\244\355\277\033/\331\346wS\352?\344\222\325\376*\254\321?h\363\313\034\260(\364?\302\3564(\037\253\330?)B\026\016\010\315\333\277\372\245\022&\273%\343\277\tni~\326\327\371?t\332\314V\203R\006@\344\222\325\376*\254\321?\314\330\311Yl\344\353\277\302\3564(\037\253\330?Q\346\266\344\023\316\324\277\317\205\300\306\216Q\362\277\330\256h\274\321\221\360\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1087
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1087
          }
        }
        tensor_content: "\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  input: "normalize_element/component_8"
  input: "normalize_element/component_9"
  input: "normalize_element/component_10"
  input: "normalize_element/component_11"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "is_files"
    value {
      b: false
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT64
          }
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT64
          }
        }
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT64
          }
        }
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 128
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_DOUBLE
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT64
          }
        }
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDatasetV2"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_4"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_5"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_6"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_7"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_8"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_9"
  op: "Cast"
  input: "IteratorGetNext:9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_10"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/alcohol/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/alcohol/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/alcohol/weights"
    }
  }
}
node {
  name: "linear/linear_model/alcohol/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/alcohol/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/alcohol/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/alcohol/weights"
  input: "linear/linear_model/alcohol/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/alcohol/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/alcohol/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/chlorides/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/chlorides/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/chlorides/weights"
    }
  }
}
node {
  name: "linear/linear_model/chlorides/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/chlorides/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/chlorides/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/chlorides/weights"
  input: "linear/linear_model/chlorides/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/chlorides/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/chlorides/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/citric_acid/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/citric_acid/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/citric_acid/weights"
    }
  }
}
node {
  name: "linear/linear_model/citric_acid/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/citric_acid/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/citric_acid/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/citric_acid/weights"
  input: "linear/linear_model/citric_acid/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/citric_acid/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/citric_acid/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/density/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/density/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/density/weights"
    }
  }
}
node {
  name: "linear/linear_model/density/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/density/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/density/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/density/weights"
  input: "linear/linear_model/density/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/density/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/density/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/fixed_acidity/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/fixed_acidity/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/fixed_acidity/weights"
    }
  }
}
node {
  name: "linear/linear_model/fixed_acidity/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/fixed_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/fixed_acidity/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/fixed_acidity/weights"
  input: "linear/linear_model/fixed_acidity/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/fixed_acidity/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/fixed_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/free_sulfur_dioxide/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/free_sulfur_dioxide/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/free_sulfur_dioxide/weights"
    }
  }
}
node {
  name: "linear/linear_model/free_sulfur_dioxide/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/free_sulfur_dioxide/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  input: "linear/linear_model/free_sulfur_dioxide/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/free_sulfur_dioxide/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/pH/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/pH/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/pH/weights"
    }
  }
}
node {
  name: "linear/linear_model/pH/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/pH/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/pH/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/pH/weights"
  input: "linear/linear_model/pH/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/pH/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/pH/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/residual_sugar/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/residual_sugar/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/residual_sugar/weights"
    }
  }
}
node {
  name: "linear/linear_model/residual_sugar/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/residual_sugar/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/residual_sugar/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/residual_sugar/weights"
  input: "linear/linear_model/residual_sugar/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/residual_sugar/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/residual_sugar/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/sulphates/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/sulphates/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/sulphates/weights"
    }
  }
}
node {
  name: "linear/linear_model/sulphates/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/sulphates/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/sulphates/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/sulphates/weights"
  input: "linear/linear_model/sulphates/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/sulphates/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/sulphates/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/total_sulfur_dioxide/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/total_sulfur_dioxide/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/total_sulfur_dioxide/weights"
    }
  }
}
node {
  name: "linear/linear_model/total_sulfur_dioxide/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/total_sulfur_dioxide/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  input: "linear/linear_model/total_sulfur_dioxide/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/total_sulfur_dioxide/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/volatile_acidity/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/volatile_acidity/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/volatile_acidity/weights"
    }
  }
}
node {
  name: "linear/linear_model/volatile_acidity/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/volatile_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/volatile_acidity/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/volatile_acidity/weights"
  input: "linear/linear_model/volatile_acidity/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/volatile_acidity/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/volatile_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/bias_weights"
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights"
  input: "linear/linear_model/bias_weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/alcohol/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/chlorides/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/citric_acid/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_3"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/density/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_4"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/fixed_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_5"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_6"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/pH/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_7"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/residual_sugar/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_8"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/sulphates/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_9"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_10"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/volatile_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_no_bias"
  op: "AddN"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum"
  attr {
    key: "N"
    value {
      i: 11
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  op: "BiasAdd"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_no_bias"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear/linear_model/Cast_11"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_12"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_13"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_14"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_15"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_16"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_17"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_18"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_19"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_20"
  op: "Cast"
  input: "IteratorGetNext:9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_21"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "ReadVariableOp"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bias/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "bias"
      }
    }
  }
}
node {
  name: "bias"
  op: "ScalarSummary"
  input: "bias/tags"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/alcohol/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/chlorides/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/citric_acid/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/density/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/fixed_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/pH/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/residual_sugar/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/sulphates/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/volatile_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/AddN"
  op: "AddN"
  input: "zero_fraction/total_size/Size"
  input: "zero_fraction/total_size/Size_1"
  input: "zero_fraction/total_size/Size_2"
  input: "zero_fraction/total_size/Size_3"
  input: "zero_fraction/total_size/Size_4"
  input: "zero_fraction/total_size/Size_5"
  input: "zero_fraction/total_size/Size_6"
  input: "zero_fraction/total_size/Size_7"
  input: "zero_fraction/total_size/Size_8"
  input: "zero_fraction/total_size/Size_9"
  input: "zero_fraction/total_size/Size_10"
  attr {
    key: "N"
    value {
      i: 11
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal"
  op: "Equal"
  input: "zero_fraction/total_size/Size"
  input: "zero_fraction/total_zero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count"
  op: "If"
  input: "zero_fraction/total_zero/Equal"
  input: "linear/linear_model/alcohol/weights"
  input: "zero_fraction/total_size/Size"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_false_294"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_true_293"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_1"
  op: "Equal"
  input: "zero_fraction/total_size/Size_1"
  input: "zero_fraction/total_zero/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_1"
  op: "If"
  input: "zero_fraction/total_zero/Equal_1"
  input: "linear/linear_model/chlorides/weights"
  input: "zero_fraction/total_size/Size_1"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_1_false_337"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_1_true_336"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_1/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_2"
  op: "Equal"
  input: "zero_fraction/total_size/Size_2"
  input: "zero_fraction/total_zero/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_2"
  op: "If"
  input: "zero_fraction/total_zero/Equal_2"
  input: "linear/linear_model/citric_acid/weights"
  input: "zero_fraction/total_size/Size_2"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_2_false_380"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_2_true_379"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_2/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_3"
  op: "Equal"
  input: "zero_fraction/total_size/Size_3"
  input: "zero_fraction/total_zero/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_3"
  op: "If"
  input: "zero_fraction/total_zero/Equal_3"
  input: "linear/linear_model/density/weights"
  input: "zero_fraction/total_size/Size_3"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_3_false_423"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_3_true_422"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_3/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_4"
  op: "Equal"
  input: "zero_fraction/total_size/Size_4"
  input: "zero_fraction/total_zero/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_4"
  op: "If"
  input: "zero_fraction/total_zero/Equal_4"
  input: "linear/linear_model/fixed_acidity/weights"
  input: "zero_fraction/total_size/Size_4"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_4_false_466"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_4_true_465"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_4/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_5"
  op: "Equal"
  input: "zero_fraction/total_size/Size_5"
  input: "zero_fraction/total_zero/Const_5"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_5"
  op: "If"
  input: "zero_fraction/total_zero/Equal_5"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  input: "zero_fraction/total_size/Size_5"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_5_false_509"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_5_true_508"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_5/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_6"
  op: "Equal"
  input: "zero_fraction/total_size/Size_6"
  input: "zero_fraction/total_zero/Const_6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_6"
  op: "If"
  input: "zero_fraction/total_zero/Equal_6"
  input: "linear/linear_model/pH/weights"
  input: "zero_fraction/total_size/Size_6"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_6_false_552"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_6_true_551"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_6/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_7"
  op: "Equal"
  input: "zero_fraction/total_size/Size_7"
  input: "zero_fraction/total_zero/Const_7"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_7"
  op: "If"
  input: "zero_fraction/total_zero/Equal_7"
  input: "linear/linear_model/residual_sugar/weights"
  input: "zero_fraction/total_size/Size_7"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_7_false_595"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_7_true_594"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_7/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_8"
  op: "Equal"
  input: "zero_fraction/total_size/Size_8"
  input: "zero_fraction/total_zero/Const_8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_8"
  op: "If"
  input: "zero_fraction/total_zero/Equal_8"
  input: "linear/linear_model/sulphates/weights"
  input: "zero_fraction/total_size/Size_8"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_8_false_638"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_8_true_637"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_8/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_9"
  op: "Equal"
  input: "zero_fraction/total_size/Size_9"
  input: "zero_fraction/total_zero/Const_9"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_9"
  op: "If"
  input: "zero_fraction/total_zero/Equal_9"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  input: "zero_fraction/total_size/Size_9"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_9_false_681"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_9_true_680"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_9/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_10"
  op: "Equal"
  input: "zero_fraction/total_size/Size_10"
  input: "zero_fraction/total_zero/Const_10"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_10"
  op: "If"
  input: "zero_fraction/total_zero/Equal_10"
  input: "linear/linear_model/volatile_acidity/weights"
  input: "zero_fraction/total_size/Size_10"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_10_false_724"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_10_true_723"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_10/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/AddN"
  op: "AddN"
  input: "zero_fraction/total_zero/zero_count/Identity"
  input: "zero_fraction/total_zero/zero_count_1/Identity"
  input: "zero_fraction/total_zero/zero_count_2/Identity"
  input: "zero_fraction/total_zero/zero_count_3/Identity"
  input: "zero_fraction/total_zero/zero_count_4/Identity"
  input: "zero_fraction/total_zero/zero_count_5/Identity"
  input: "zero_fraction/total_zero/zero_count_6/Identity"
  input: "zero_fraction/total_zero/zero_count_7/Identity"
  input: "zero_fraction/total_zero/zero_count_8/Identity"
  input: "zero_fraction/total_zero/zero_count_9/Identity"
  input: "zero_fraction/total_zero/zero_count_10/Identity"
  attr {
    key: "N"
    value {
      i: 11
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/compute/float32_size"
  op: "Cast"
  input: "zero_fraction/total_size/AddN"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/compute/truediv"
  op: "RealDiv"
  input: "zero_fraction/total_zero/AddN"
  input: "zero_fraction/compute/float32_size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/zero_fraction_or_nan"
  op: "Identity"
  input: "zero_fraction/compute/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fraction_of_zero_weights/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fraction_of_zero_weights"
      }
    }
  }
}
node {
  name: "fraction_of_zero_weights"
  op: "ScalarSummary"
  input: "fraction_of_zero_weights/tags"
  input: "zero_fraction/zero_fraction_or_nan"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/Cast"
  op: "Cast"
  input: "head/losses/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  input: "head/losses/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/mean_squared_error/Cast/x"
  op: "Const"
  input: "^head/losses/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/Mul"
  op: "Mul"
  input: "head/losses/mean_squared_error/SquaredDifference"
  input: "head/losses/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/mean_squared_error/Mul"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range"
  op: "Range"
  input: "head/losses/weighted_loss/range/start"
  input: "head/losses/weighted_loss/Rank"
  input: "head/losses/weighted_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/grad_ys_0"
  op: "Fill"
  input: "training/Ftrl/gradients/gradients/Shape"
  input: "training/Ftrl/gradients/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Ftrl/gradients/gradients/grad_ys_0"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/grad_ys_0"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/mean_squared_error/Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "head/losses/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/mean_squared_error/SquaredDifference"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Mul"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/scalar"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  input: "head/losses/Cast"
  input: "^training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "head/losses/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/alcohol/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/chlorides/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/density/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/pH/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/sulphates/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/beta/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/beta"
    }
  }
}
node {
  name: "training/Ftrl/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/beta/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/beta"
  input: "training/Ftrl/beta/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/decay"
    }
  }
}
node {
  name: "training/Ftrl/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/decay"
  input: "training/Ftrl/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/l1_regularization_strength"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/l1_regularization_strength"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/l1_regularization_strength"
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/l1_regularization_strength"
  input: "training/Ftrl/l1_regularization_strength/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/l2_regularization_strength"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/l2_regularization_strength"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/l2_regularization_strength"
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/l2_regularization_strength"
  input: "training/Ftrl/l2_regularization_strength/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/learning_rate/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Ftrl/learning_rate"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/learning_rate"
    }
  }
}
node {
  name: "training/Ftrl/learning_rate/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/learning_rate/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/learning_rate"
  input: "training/Ftrl/learning_rate/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/learning_rate/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/learning_rate_power"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/learning_rate_power"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/learning_rate_power"
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/learning_rate_power"
  input: "training/Ftrl/learning_rate_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/alcohol/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/chlorides/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/citric_acid/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/density/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/density/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/density/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/density/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/density/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/density/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/density/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/density/weights/linear"
  input: "training/Ftrl/linear/linear_model/density/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/density/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/density/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/pH/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/pH/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/linear"
  input: "training/Ftrl/linear/linear_model/pH/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/pH/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/sulphates/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/bias_weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity"
  op: "Identity"
  input: "training/Ftrl/Identity/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity_1"
  op: "Identity"
  input: "training/Ftrl/Identity_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity_2"
  op: "Identity"
  input: "training/Ftrl/Identity_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity_3"
  op: "Identity"
  input: "training/Ftrl/Identity_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity_4"
  op: "Identity"
  input: "training/Ftrl/Identity_4/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_5"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_6"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_7"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_8"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_9"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_10"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_11"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_12"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_13"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_14"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_15"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_16"
  op: "Identity"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/IdentityN"
  op: "IdentityN"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_grad/BiasAddGrad"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/alcohol/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/chlorides/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/citric_acid/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/density/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/fixed_acidity/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/free_sulfur_dioxide/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/pH/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/residual_sugar/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/sulphates/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/total_sulfur_dioxide/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/volatile_acidity/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-1030"
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/alcohol/weights"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
  input: "training/Ftrl/IdentityN"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/alcohol/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/chlorides/weights"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
  input: "training/Ftrl/IdentityN:1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/chlorides/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/citric_acid/weights"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
  input: "training/Ftrl/IdentityN:2"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/citric_acid/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/density/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/density/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/density/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/density/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/density/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/density/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/density/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/density/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/density/weights"
  input: "training/Ftrl/linear/linear_model/density/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/density/weights/linear"
  input: "training/Ftrl/IdentityN:3"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/density/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/density/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/fixed_acidity/weights"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
  input: "training/Ftrl/IdentityN:4"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/fixed_acidity/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
  input: "training/Ftrl/IdentityN:5"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/free_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/pH/weights"
  input: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/pH/weights/linear"
  input: "training/Ftrl/IdentityN:6"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/pH/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/residual_sugar/weights"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
  input: "training/Ftrl/IdentityN:7"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/residual_sugar/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/sulphates/weights"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
  input: "training/Ftrl/IdentityN:8"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/sulphates/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
  input: "training/Ftrl/IdentityN:9"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/total_sulfur_dioxide/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/volatile_acidity/weights"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
  input: "training/Ftrl/IdentityN:10"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/volatile_acidity/weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/mul/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/mul"
  op: "Mul"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/mul/x"
  input: "training/Ftrl/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/truediv"
  op: "RealDiv"
  input: "training/Ftrl/Identity_4"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/add"
  op: "AddV2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/bias_weights"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  input: "training/Ftrl/IdentityN:11"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/add"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "multiply_linear_by_lr"
    value {
      b: false
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/group_deps"
  op: "NoOp"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/alcohol/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/chlorides/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/citric_acid/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/density/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/fixed_acidity/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/free_sulfur_dioxide/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/pH/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/residual_sugar/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/sulphates/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/total_sulfur_dioxide/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/volatile_acidity/weights/ResourceApplyFtrl"
}
node {
  name: "training/Ftrl/Ftrl/Const"
  op: "Const"
  input: "^training/Ftrl/Ftrl/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Ftrl/Ftrl/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^linear/linear_model/alcohol/weights/Assign"
  input: "^linear/linear_model/bias_weights/Assign"
  input: "^linear/linear_model/chlorides/weights/Assign"
  input: "^linear/linear_model/citric_acid/weights/Assign"
  input: "^linear/linear_model/density/weights/Assign"
  input: "^linear/linear_model/fixed_acidity/weights/Assign"
  input: "^linear/linear_model/free_sulfur_dioxide/weights/Assign"
  input: "^linear/linear_model/pH/weights/Assign"
  input: "^linear/linear_model/residual_sugar/weights/Assign"
  input: "^linear/linear_model/sulphates/weights/Assign"
  input: "^linear/linear_model/total_sulfur_dioxide/weights/Assign"
  input: "^linear/linear_model/volatile_acidity/weights/Assign"
  input: "^training/Ftrl/beta/Assign"
  input: "^training/Ftrl/decay/Assign"
  input: "^training/Ftrl/l1_regularization_strength/Assign"
  input: "^training/Ftrl/l2_regularization_strength/Assign"
  input: "^training/Ftrl/learning_rate/Assign"
  input: "^training/Ftrl/learning_rate_power/Assign"
  input: "^training/Ftrl/linear/linear_model/alcohol/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/alcohol/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/bias_weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/bias_weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/chlorides/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/chlorides/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/citric_acid/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/citric_acid/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/density/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/density/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/fixed_acidity/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/pH/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/pH/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/residual_sugar/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/sulphates/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/sulphates/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/volatile_acidity/weights/linear/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/alcohol/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/chlorides/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/citric_acid/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/density/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/fixed_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/pH/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/residual_sugar/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/sulphates/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/volatile_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/density/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/density/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  input: "report_uninitialized_variables/VarIsInitializedOp_25"
  input: "report_uninitialized_variables/VarIsInitializedOp_26"
  input: "report_uninitialized_variables/VarIsInitializedOp_27"
  input: "report_uninitialized_variables/VarIsInitializedOp_28"
  input: "report_uninitialized_variables/VarIsInitializedOp_29"
  input: "report_uninitialized_variables/VarIsInitializedOp_30"
  input: "report_uninitialized_variables/VarIsInitializedOp_31"
  input: "report_uninitialized_variables/VarIsInitializedOp_32"
  input: "report_uninitialized_variables/VarIsInitializedOp_33"
  input: "report_uninitialized_variables/VarIsInitializedOp_34"
  input: "report_uninitialized_variables/VarIsInitializedOp_35"
  input: "report_uninitialized_variables/VarIsInitializedOp_36"
  input: "report_uninitialized_variables/VarIsInitializedOp_37"
  input: "report_uninitialized_variables/VarIsInitializedOp_38"
  input: "report_uninitialized_variables/VarIsInitializedOp_39"
  input: "report_uninitialized_variables/VarIsInitializedOp_40"
  input: "report_uninitialized_variables/VarIsInitializedOp_41"
  input: "report_uninitialized_variables/VarIsInitializedOp_42"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 43
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 43
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/alcohol/weights"
        string_val: "linear/linear_model/chlorides/weights"
        string_val: "linear/linear_model/citric_acid/weights"
        string_val: "linear/linear_model/density/weights"
        string_val: "linear/linear_model/fixed_acidity/weights"
        string_val: "linear/linear_model/free_sulfur_dioxide/weights"
        string_val: "linear/linear_model/pH/weights"
        string_val: "linear/linear_model/residual_sugar/weights"
        string_val: "linear/linear_model/sulphates/weights"
        string_val: "linear/linear_model/total_sulfur_dioxide/weights"
        string_val: "linear/linear_model/volatile_acidity/weights"
        string_val: "linear/linear_model/bias_weights"
        string_val: "training/Ftrl/beta"
        string_val: "training/Ftrl/decay"
        string_val: "training/Ftrl/l1_regularization_strength"
        string_val: "training/Ftrl/l2_regularization_strength"
        string_val: "training/Ftrl/learning_rate"
        string_val: "training/Ftrl/learning_rate_power"
        string_val: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/density/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/density/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/pH/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/linear"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 43
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 43
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 43
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/alcohol/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/chlorides/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/citric_acid/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/density/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/fixed_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/pH/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/residual_sugar/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/sulphates/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/volatile_acidity/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/density/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/density/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_38"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_39"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_40"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_41"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_42"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 43
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 43
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/alcohol/weights"
        string_val: "linear/linear_model/chlorides/weights"
        string_val: "linear/linear_model/citric_acid/weights"
        string_val: "linear/linear_model/density/weights"
        string_val: "linear/linear_model/fixed_acidity/weights"
        string_val: "linear/linear_model/free_sulfur_dioxide/weights"
        string_val: "linear/linear_model/pH/weights"
        string_val: "linear/linear_model/residual_sugar/weights"
        string_val: "linear/linear_model/sulphates/weights"
        string_val: "linear/linear_model/total_sulfur_dioxide/weights"
        string_val: "linear/linear_model/volatile_acidity/weights"
        string_val: "linear/linear_model/bias_weights"
        string_val: "training/Ftrl/beta"
        string_val: "training/Ftrl/decay"
        string_val: "training/Ftrl/l1_regularization_strength"
        string_val: "training/Ftrl/l2_regularization_strength"
        string_val: "training/Ftrl/learning_rate"
        string_val: "training/Ftrl/learning_rate_power"
        string_val: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/density/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/density/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/pH/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/linear"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 43
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 43
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 43
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "bias"
  input: "fraction_of_zero_weights"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp/part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 43
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/alcohol/weights"
        string_val: "linear/linear_model/bias_weights"
        string_val: "linear/linear_model/chlorides/weights"
        string_val: "linear/linear_model/citric_acid/weights"
        string_val: "linear/linear_model/density/weights"
        string_val: "linear/linear_model/fixed_acidity/weights"
        string_val: "linear/linear_model/free_sulfur_dioxide/weights"
        string_val: "linear/linear_model/pH/weights"
        string_val: "linear/linear_model/residual_sugar/weights"
        string_val: "linear/linear_model/sulphates/weights"
        string_val: "linear/linear_model/total_sulfur_dioxide/weights"
        string_val: "linear/linear_model/volatile_acidity/weights"
        string_val: "training/Ftrl/beta"
        string_val: "training/Ftrl/decay"
        string_val: "training/Ftrl/l1_regularization_strength"
        string_val: "training/Ftrl/l2_regularization_strength"
        string_val: "training/Ftrl/learning_rate"
        string_val: "training/Ftrl/learning_rate_power"
        string_val: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/linear"
        string_val: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/density/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/density/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/pH/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 43
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step/Read/ReadVariableOp"
  input: "linear/linear_model/alcohol/weights/Read/ReadVariableOp"
  input: "linear/linear_model/bias_weights/Read/ReadVariableOp"
  input: "linear/linear_model/chlorides/weights/Read/ReadVariableOp"
  input: "linear/linear_model/citric_acid/weights/Read/ReadVariableOp"
  input: "linear/linear_model/density/weights/Read/ReadVariableOp"
  input: "linear/linear_model/fixed_acidity/weights/Read/ReadVariableOp"
  input: "linear/linear_model/free_sulfur_dioxide/weights/Read/ReadVariableOp"
  input: "linear/linear_model/pH/weights/Read/ReadVariableOp"
  input: "linear/linear_model/residual_sugar/weights/Read/ReadVariableOp"
  input: "linear/linear_model/sulphates/weights/Read/ReadVariableOp"
  input: "linear/linear_model/total_sulfur_dioxide/weights/Read/ReadVariableOp"
  input: "linear/linear_model/volatile_acidity/weights/Read/ReadVariableOp"
  input: "training/Ftrl/beta/Read/ReadVariableOp"
  input: "training/Ftrl/decay/Read/ReadVariableOp"
  input: "training/Ftrl/l1_regularization_strength/Read/ReadVariableOp"
  input: "training/Ftrl/l2_regularization_strength/Read/ReadVariableOp"
  input: "training/Ftrl/learning_rate/Read/ReadVariableOp"
  input: "training/Ftrl/learning_rate_power/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/density/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/density/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 43
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/alcohol/weights"
        string_val: "linear/linear_model/bias_weights"
        string_val: "linear/linear_model/chlorides/weights"
        string_val: "linear/linear_model/citric_acid/weights"
        string_val: "linear/linear_model/density/weights"
        string_val: "linear/linear_model/fixed_acidity/weights"
        string_val: "linear/linear_model/free_sulfur_dioxide/weights"
        string_val: "linear/linear_model/pH/weights"
        string_val: "linear/linear_model/residual_sugar/weights"
        string_val: "linear/linear_model/sulphates/weights"
        string_val: "linear/linear_model/total_sulfur_dioxide/weights"
        string_val: "linear/linear_model/volatile_acidity/weights"
        string_val: "training/Ftrl/beta"
        string_val: "training/Ftrl/decay"
        string_val: "training/Ftrl/l1_regularization_strength"
        string_val: "training/Ftrl/l2_regularization_strength"
        string_val: "training/Ftrl/learning_rate"
        string_val: "training/Ftrl/learning_rate_power"
        string_val: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/linear"
        string_val: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/density/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/density/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/pH/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 43
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "linear/linear_model/alcohol/weights"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "linear/linear_model/chlorides/weights"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "linear/linear_model/citric_acid/weights"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "linear/linear_model/density/weights"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "linear/linear_model/fixed_acidity/weights"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "linear/linear_model/free_sulfur_dioxide/weights"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "linear/linear_model/pH/weights"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "linear/linear_model/residual_sugar/weights"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "linear/linear_model/sulphates/weights"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "linear/linear_model/total_sulfur_dioxide/weights"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "linear/linear_model/volatile_acidity/weights"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Ftrl/beta"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Ftrl/decay"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Ftrl/l1_regularization_strength"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Ftrl/l2_regularization_strength"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Ftrl/learning_rate"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Ftrl/learning_rate_power"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/accumulator"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/alcohol/weights/linear"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/accumulator"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/chlorides/weights/linear"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/accumulator"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/citric_acid/weights/linear"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/density/weights/accumulator"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/density/weights/linear"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/accumulator"
  input: "save/Identity_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/fixed_acidity/weights/linear"
  input: "save/Identity_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/accumulator"
  input: "save/Identity_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/free_sulfur_dioxide/weights/linear"
  input: "save/Identity_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/accumulator"
  input: "save/Identity_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/pH/weights/linear"
  input: "save/Identity_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/accumulator"
  input: "save/Identity_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/residual_sugar/weights/linear"
  input: "save/Identity_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/accumulator"
  input: "save/Identity_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/sulphates/weights/linear"
  input: "save/Identity_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/accumulator"
  input: "save/Identity_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/total_sulfur_dioxide/weights/linear"
  input: "save/Identity_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/accumulator"
  input: "save/Identity_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/volatile_acidity/weights/linear"
  input: "save/Identity_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_29"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_30"
  input: "^save/AssignVariableOp_31"
  input: "^save/AssignVariableOp_32"
  input: "^save/AssignVariableOp_33"
  input: "^save/AssignVariableOp_34"
  input: "^save/AssignVariableOp_35"
  input: "^save/AssignVariableOp_36"
  input: "^save/AssignVariableOp_37"
  input: "^save/AssignVariableOp_38"
  input: "^save/AssignVariableOp_39"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_40"
  input: "^save/AssignVariableOp_41"
  input: "^save/AssignVariableOp_42"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "zero_fraction_cond_false_562"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_8_false_638"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_sulphates_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_8"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_sulphates_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_648"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_647"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_8"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_1_false_337"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_chlorides_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_1"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_chlorides_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_347"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_346"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_5_true_508"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_7"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_605"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_475"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_690"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_4_false_466"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_fixed_acidity_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_4"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_fixed_acidity_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_476"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_475"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_4"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_519"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_8_true_637"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_2_true_379"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_9_false_681"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_total_sulfur_dioxide_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_9"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_total_sulfur_dioxide_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_691"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_690"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_9"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_433"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_734"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_733"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_604"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_9_true_680"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_476"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_691"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_347"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_6_false_552"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_ph_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_6"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_ph_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_562"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_561"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_6"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_10_true_723"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_false_294"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_alcohol_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_alcohol_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_304"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_303"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_4_true_465"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_7_true_594"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_303"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_10_false_724"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_volatile_acidity_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_10"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_volatile_acidity_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_734"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_733"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_10"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_5_false_509"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_free_sulfur_dioxide_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_5"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_free_sulfur_dioxide_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_519"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_518"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_5"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_432"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_3_false_423"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_density_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_3"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_density_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_433"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_432"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_3"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_561"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_518"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_647"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_1_true_336"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_2_false_380"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_citric_acid_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_2"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_citric_acid_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_390"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_389"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_2"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_304"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_390"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_648"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_389"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_6"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_INT64
          shape {
          }
        }
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_3_true_422"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_7_false_595"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_residual_sugar_weights"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_FLOAT
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_7"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_residual_sugar_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_605"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_604"
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_7"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_6_true_551"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_true_293"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_346"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 1087
  min_consumer: 12
}
